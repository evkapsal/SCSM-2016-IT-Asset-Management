<SequentialWorkflowActivity x:Class="WorkflowAuthoring.HardwareSyncNow" x:Name="HardwareSyncNow" xmlns:ns0="clr-namespace:Microsoft.ServiceManager.WorkflowAuthoring.ActivityLibrary;Assembly=Microsoft.ServiceManager.WorkflowAuthoring.ActivityLibrary, Version=7.0.5000.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/workflow">
	<ns0:WindowsPowerShellScript TimeoutSeconds="3600" x:Name="HWSyncNow" ScriptBody="#NOTES&#xD;&#xA;#===========================================================================&#xD;&#xA;#Created with:  SAPIEN Technologies, Inc., PowerShell Studio 2015&#xD;&#xA;#Created on:    23/5/2017 24:00 PM&#xD;&#xA;#Created by:     Evangelos Kapsalakis&#xD;&#xA;#Organization:   Microsoft Hellas&#xD;&#xA;#Filename:  Hardware Connector V5.2&#xD;&#xA;#===========================================================================&#xD;&#xA;#.DESCRIPTION&#xD;&#xA;#A description of the file.&#xD;&#xA;&#xD;&#xA;Import-Module SMLets&#xD;&#xA;&#xD;&#xA;$HardwareConnectorAdminSettingCl = Get-SCSMClass -Name HardwareConnector$&#xD;&#xA;$HardwareConnectorAdminSettingObj = Get-SCSMObject -Class $HardwareConnectorAdminSettingCl&#xD;&#xA;if ($HardwareConnectorAdminSettingObj.IsActive -eq $true)&#xD;&#xA;{&#xD;&#xA; Set-SCSMObject -SMObject $HardwareConnectorAdminSettingObj -Property &quot;SyncNow&quot; -Value $false&#xD;&#xA; &#xD;&#xA; Try&#xD;&#xA; {&#xD;&#xA;   $ActiveId = (Get-SCSMEnumeration -Name ITSMConnectorStatus.Running$).id&#xD;&#xA; }&#xD;&#xA; Catch &#xD;&#xA;  {&#xD;&#xA;   $ActiveId = $null&#xD;&#xA;  }&#xD;&#xA; Finally&#xD;&#xA;  {&#xD;&#xA; if($ActiveId)&#xD;&#xA;  {&#xD;&#xA;    Set-SCSMObject -SMObject $HardwareConnectorAdminSettingObj -Property &quot;Status&quot; -Value $ActiveId&#xD;&#xA;  }&#xD;&#xA; }&#xD;&#xA; &#xD;&#xA; ##&#xD;&#xA; try&#xD;&#xA; {&#xD;&#xA;   $SQLSrv = (Get-SCSMConnector  | ?{ $_.DataProviderName -eq &quot;SmsConnector&quot; }).ServerName&#xD;&#xA;   $DBName = (Get-SCSMConnector  | ?{ $_.DataProviderName -eq &quot;SmsConnector&quot; }).DatabaseName&#xD;&#xA; }&#xD;&#xA; catch &#xD;&#xA;  {&#xD;&#xA;   $SQLSrv = $null&#xD;&#xA;  $DBName = $null&#xD;&#xA;  }&#xD;&#xA; &#xD;&#xA; Try&#xD;&#xA; {&#xD;&#xA;  $events = [System.Diagnostics.EventLog]::SourceExists(&quot;Hardware Connector&quot;);&#xD;&#xA; }&#xD;&#xA; finally&#xD;&#xA; {&#xD;&#xA;  if ($events -ne $true)&#xD;&#xA;  {&#xD;&#xA;   New-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector'&#xD;&#xA;   Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId 10000 -Category 0 -EntryType Information -Message &quot;Hardware Connector Succesfully Create Event Log Source&quot;&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId 10000 -Category 0 -EntryType Information -Message &quot;Hardware Connector Start Processing Hardware Objects&quot;&#xD;&#xA; }&#xD;&#xA; &#xD;&#xA; $ErrorID = 10101&#xD;&#xA; $InfoID = 10100&#xD;&#xA; $WarningId = 10102&#xD;&#xA; $PreFix = $HardwareConnectorAdminSettingObj.AssetTagPrefix&#xD;&#xA; &#xD;&#xA; $ActiveObjEnum = (Get-SCSMEnumeration -Name ObjectStatusEnum.Active).id&#xD;&#xA; $ReadinessStatusEnumId = (Get-SCSMEnumeration -Name ReadinessStatus.InUse).id&#xD;&#xA; $ReadinessStatusNotUsedEnumId = (Get-SCSMEnumeration -Name ReadinessStatus.ReadyForUse).id&#xD;&#xA; $HardwareHasUserRelCl = Get-SCSMRelationshipClass -Name Relationship.HardwareHasUser$&#xD;&#xA; $HardwareAssetHasUser = Get-SCSMRelationshipClass -Name Relationship.HardwareAssetHasUser$&#xD;&#xA; $ConfigItemRelCl = Get-SCSMRelationshipClass -Name System.ConfigItemRelatesToConfigItem$&#xD;&#xA; $ComputerProjectionClass = Get-SCSMTypeProjection Microsoft.Windows.Computer.ProjectionType$&#xD;&#xA; $NetworkClass = Get-SCSMClass -Name System.NetworkManagement.Node$&#xD;&#xA; $NetworkDeviceClass = Get-SCSMClass -Name NetworkDevice$ | ?{ $_.ManagementPack -eq &quot;IT_Asset_Management_Base&quot; }&#xD;&#xA; $UserClass = Get-SCSMClass -Name System.Domain.User$&#xD;&#xA; $NetDevUserRelationShip = Get-SCSMRelationshipClass -Name Relationship.NetworkDeviceHasUser$&#xD;&#xA; $NetDevModelRel = Get-SCSMRelationshipClass -Name Relationship.NetworkDeviceHasModel$&#xD;&#xA; $NetDevManufactRel = Get-SCSMRelationshipClass -Name Relationship.NetworkDeviceHasManufacturer$&#xD;&#xA; $DevModel = Get-scsmclass -name DeviceModel$&#xD;&#xA; $DevManufacturer = Get-scsmclass -name DeviceManufacturer$&#xD;&#xA; $ModelHasManufacturerRelCl = Get-SCSMRelationshipClass -Name Relationship.DeviceModelHasManufacturer$&#xD;&#xA; $HardwareHasModel = Get-SCSMRelationshipClass -Name Relationship.HardwareHasModel$&#xD;&#xA; $NetHardwareAssetTypeId = (Get-SCSMEnumeration -Name HardwareAssetType.NetworkDevice$).id&#xD;&#xA; $SystemPrinterClass = Get-SCSMClass -Name Microsoft.AD.Printer$&#xD;&#xA; $PrinterClass = Get-SCSMClass -Name Printer$ | ?{ $_.ManagementPack -eq &quot;IT_Asset_Management_Base&quot; }&#xD;&#xA; $StorageDeviceClass = Get-SCSMClass -Name StorageDevice$&#xD;&#xA; $HardwareRefStorageDev= Get-SCSMRelationshipClass -Name Relationship.HardwareAssetReferencesStorageDevice$&#xD;&#xA; $StorageDevTypeId= (Get-SCSMEnumeration -Name HardwareAssetType.StorageDevice).id&#xD;&#xA; $StorageDevHasUserRelCl= Get-SCSMRelationshipClass -Name Relationship.StorageDeviceHasUser$&#xD;&#xA; $SystemMobileClass = Get-SCSMClass -Name Microsoft.SystemCenter.ConfigurationManager.MobileDevice$&#xD;&#xA; $MobileDeviceClass = Get-SCSMClass -Name MobileDevice$ | ?{ $_.ManagementPack -eq &quot;IT_Asset_Management_Base&quot; }&#xD;&#xA; $PendingDeleteEnumId = (Get-SCSMEnumeration -Name System.ConfigItem.ObjectStatusEnum.PendingDelete$).Id&#xD;&#xA; $PrinterHasUserClass = Get-SCSMRelationshipClass -Name Relationship.PrinterHasUser$&#xD;&#xA; $PrinterAssetEnumId = (Get-SCSMEnumeration -Name HardwareAssetType.Printer$).id&#xD;&#xA; $ActiveDeviceStatusEnumId = (Get-SCSMEnumeration -Name DeviceStatus.Active$).id&#xD;&#xA; $WindowsMobileEnumId = (Get-SCSMEnumeration -Name ODdevType.Windows$).id&#xD;&#xA; $AndroidMobileEnumId = (Get-SCSMEnumeration -Name ODdevType.Android$).id&#xD;&#xA; $IoSMobileEnumId = (Get-SCSMEnumeration -Name ODdevType.IOS$).id&#xD;&#xA; $OtherMobileEnumId = (Get-SCSMEnumeration -Name ODdevType.Other$).id&#xD;&#xA; $MobileDevHasUsr = Get-SCSMRelationshipClass -Name Relationship.MobileDeviceHasUser$&#xD;&#xA; $MobDevHasManufacturer = Get-SCSMRelationshipClass -Name Relationship.MobileDeviceHasManufacturer$&#xD;&#xA; $MobDevHasModel = Get-SCSMRelationshipClass -Name Relationship.MobileDeviceHasModel$&#xD;&#xA; $MobDevAssetTypeId= (Get-SCSMEnumeration -Name HardwareAssetType.Phone$).id&#xD;&#xA; $AssetMobileEnumId = (Get-SCSMEnumeration -Name HardwareAssetClass.Mobile$).id&#xD;&#xA; $HardwareConnectorAdminSettingCl = Get-SCSMClass -Name HardwareConnector$&#xD;&#xA; $HardwareConnectorAdminSettingObj = Get-SCSMObject -Class $HardwareConnectorAdminSettingCl&#xD;&#xA; $HAssetRefMobRelCl = Get-SCSMRelationshipClass -Name Relationship.HardwareAssetReferencesMobileDevice$&#xD;&#xA; $HAssetRefPrinterRelCl = Get-SCSMRelationshipClass -Name Relationship.HardwareAssetReferencesPrinter$&#xD;&#xA; $HAssetRefNetRelCl = Get-SCSMRelationshipClass -Name Relationship.HardwareAssetReferencesNetworkDevice$&#xD;&#xA; $HAssetRefStorRelCl = Get-SCSMRelationshipClass -Name Relationship.HardwareAssetReferencesStorageDevice$&#xD;&#xA; $HardwareClass = Get-SCSMClass  Hardware$ | ? { $_.ManagementPack -eq &quot;IT_Asset_Management_Base&quot; }&#xD;&#xA; $HardwareAssetClass = Get-SCSMClass -Name HardwareAsset$&#xD;&#xA; $HardwareAssetRefHardwareRelCl = Get-SCSMRelationshipClass -Name Relationship.HardwareAssetReferencesHardware$&#xD;&#xA; $HardwareHasManufacturerRelCl = Get-SCSMRelationshipClass -Name Relationship.HardwareHasManufacturer$&#xD;&#xA; $HardwareHasModelRelCl = Get-SCSMRelationshipClass -Name Relationship.HardwareHasModel$&#xD;&#xA; $ContainDiskRelCl = Get-SCSMRelationshipClass -Name Relationship.HardwareContainsDisks$&#xD;&#xA; $ContainVolumeRelCl = Get-SCSMRelationshipClass -Name Relationship.HardwareContainsVolumes$&#xD;&#xA; $DevHasSoftInstalledRelClId = (Get-SCSMRelationshipClass -Name System.DeviceHasSoftwareItemInstalled$).id&#xD;&#xA; $DevHasUpdInstalledRelClId = (Get-SCSMRelationshipClass -Name System.DeviceHasSoftwareUpdateInstalled$).id&#xD;&#xA; $ScannerCl = Get-SCSMClass -Name Scanner$&#xD;&#xA; $HardwareAssetReferenceScannerRelCl= Get-SCSMRelationshipClass -Name Relationship.HardwareAssetReferencesScannerDevice$&#xD;&#xA; $ScannerAssetTypeId= (Get-SCSMEnumeration HardwareAssetType.Scanner$).id&#xD;&#xA; $AssetStatusEnumDeployedId = (Get-SCSMEnumeration -Name System.ConfigItem.AssetStatusEnum.Deployed$).id&#xD;&#xA; $ScannerUserRelCl = Get-SCSMRelationshipClass -Name Relationship.ScannerHasUser$&#xD;&#xA; $MonitorCl = Get-SCSMClass -Name Monitor$&#xD;&#xA; $HardwareAssetRefMonitorRelCl = Get-SCSMRelationshipClass -Name Relationship.HardwareAssetReferencesMonitorDevice$&#xD;&#xA; $MonitorAssetTyteId = (Get-SCSMEnumeration -Name HardwareAssetType.Monitor$).id&#xD;&#xA; $MonitorUserRelCL= Get-SCSMRelationshipClass -Name Relationship.MonitorHasUser$&#xD;&#xA; $OtherDeviceCl = Get-SCSMClass -Name OtherDevice$&#xD;&#xA; $HardwareAssetRefOtherDevRelCl = Get-SCSMRelationshipClass -Name Relationship.HardwareAssetReferencesOtherDevice$&#xD;&#xA; $OtherDeviceTypeId= (Get-SCSMEnumeration -Name HardwareAssetType.OtherDevice$).id&#xD;&#xA; $OtherDeviceRelCl= Get-SCSMRelationshipClass -Name Relationship.OtherDeviceHasUser$&#xD;&#xA; &#xD;&#xA; #Asset Class Enum&#xD;&#xA; $ComputerHWAssetEnumId = (Get-SCSMEnumeration -Name HardwareAssetClass.Computer$).id&#xD;&#xA; $VMHWAssetEnumId = (Get-SCSMEnumeration -Name HardwareAssetClass.VirtualMachine$).id&#xD;&#xA; &#xD;&#xA; #Asset Types Enum&#xD;&#xA; $SrvAssetTypeEnumId = (Get-SCSMEnumeration -Name HardwareAssetType.Server$).id&#xD;&#xA; $DesktopAssetTypeEnumId = (Get-SCSMEnumeration -Name HardwareAssetType.Desktop$).id&#xD;&#xA; $VMAssetTypeEnumId = (Get-SCSMEnumeration -Name HardwareAssetType.VirtualMachine$).id&#xD;&#xA; &#xD;&#xA; #OS Enum&#xD;&#xA; $CompOSId = (Get-SCSMEnumeration -Name OperatingSystemFoundation.Windows).id&#xD;&#xA; $ServerOSId = (Get-SCSMEnumeration -Name OperatingSystemType.Server).id&#xD;&#xA; $ClientOSId = (Get-SCSMEnumeration -Name OperatingSystemType.Client).id&#xD;&#xA; &#xD;&#xA; #Processor Family Enum&#xD;&#xA; $Amd64Id = (Get-SCSMEnumeration -Name ProcessorFamily.Amd$).id&#xD;&#xA; $x86 = (Get-SCSMEnumeration -Name ProcessorFamily.X86$).id&#xD;&#xA; &#xD;&#xA; #Rel Cl&#xD;&#xA; $UsrUsDevRelClId = (Get-SCSMRelationshipClass -Name System.UserUsesDevice$).id&#xD;&#xA; &#xD;&#xA; #Function For Hashing String&#xD;&#xA; Function Get-StringHash([String]$String)&#xD;&#xA; {&#xD;&#xA;  $StringBuilder = New-Object System.Text.StringBuilder&#xD;&#xA;  [System.Security.Cryptography.HashAlgorithm]::Create('MD5').ComputeHash([System.Text.Encoding]::UTF8.GetBytes($String)) | %{&#xD;&#xA;   [Void]$StringBuilder.Append($_.ToString(&quot;x2&quot;))&#xD;&#xA;  }&#xD;&#xA;  $StringBuilder.ToString()&#xD;&#xA; }&#xD;&#xA; &#xD;&#xA; #Function For Executing SQL Query to SCCM For Processor Details.&#xD;&#xA; Function Get-ProcessorDetails&#xD;&#xA; {&#xD;&#xA;  param (&#xD;&#xA;   [string]$COMP,&#xD;&#xA;   [ValidateNotNullOrEmpty()]&#xD;&#xA;   [string]$Server,&#xD;&#xA;   [ValidateNotNullOrEmpty()]&#xD;&#xA;   [string]$Database&#xD;&#xA;  )&#xD;&#xA;  &#xD;&#xA;  [string]$UserSQLQuery = $(&quot;SELECT NumberOfCores0 ,NumberOfLogicalProcessors0 &#xD;&#xA;        FROM [dbo].[v_GS_PROCESSOR] CPU &#xD;&#xA;        INNER JOIN v_R_System VR&#xD;&#xA;        ON CPU.ResourceID = VR.ResourceID&#xD;&#xA;        WHERE SystemName0 = '$COMP'&quot;)&#xD;&#xA;  &#xD;&#xA;  function ExecuteSqlQuery ($Server, $Database, $SQLQuery)&#xD;&#xA;  {&#xD;&#xA;   $Datatable = New-Object System.Data.DataTable&#xD;&#xA;   &#xD;&#xA;   $Connection = New-Object System.Data.SQLClient.SQLConnection&#xD;&#xA;   $Connection.ConnectionString = &quot;server='$Server';database='$Database';trusted_connection=true;&quot;&#xD;&#xA;   $Connection.Open()&#xD;&#xA;   $Command = New-Object System.Data.SQLClient.SQLCommand&#xD;&#xA;   $Command.Connection = $Connection&#xD;&#xA;   $Command.CommandText = $SQLQuery&#xD;&#xA;   $Reader = $Command.ExecuteReader()&#xD;&#xA;   $Datatable.Load($Reader)&#xD;&#xA;   $Connection.Close()&#xD;&#xA;   &#xD;&#xA;   return $Datatable&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  $resultsDataTable = New-Object System.Data.DataTable&#xD;&#xA;  $resultsDataTable = ExecuteSqlQuery $Server $Database $UserSqlQuery&#xD;&#xA;  &#xD;&#xA;  $PLResult = New-Object PSObject -Property @{&#xD;&#xA;   Cores = $resultsDataTable.NumberOfCores0&#xD;&#xA;   Processors = $resultsDataTable.NumberOfLogicalProcessors0&#xD;&#xA;   ServerName = $COMP&#xD;&#xA;  }&#xD;&#xA;  return $PLResult&#xD;&#xA; }&#xD;&#xA; &#xD;&#xA; function Get-InactiveComputers&#xD;&#xA; {&#xD;&#xA;  param (&#xD;&#xA;   [ValidateNotNullOrEmpty()]&#xD;&#xA;   [string]$Server,&#xD;&#xA;   [ValidateNotNullOrEmpty()]&#xD;&#xA;   [string]$Database&#xD;&#xA;  )&#xD;&#xA;  &#xD;&#xA;  [string]$UserSqlQuery = $(&quot;select a.Name0 from v_R_System a&#xD;&#xA;  join v_AgentDiscoveries b on b.ResourceId=a.ResourceId where&#xD;&#xA;  (AgentName  like 'Heartbeat Discovery' and DATEDIFF(Day, AgentTime, Getdate())&gt;=30) OR&#xD;&#xA;  (AgentName  like 'SMS_AD_SYSTEM_DISCOVERY_AGENT' and DATEDIFF(Day, AgentTime, Getdate())&gt;=30)&quot;)&#xD;&#xA;  &#xD;&#xA;  function ExecuteSqlQuery ($Server, $Database, $SQLQuery)&#xD;&#xA;  {&#xD;&#xA;   $Datatable = New-Object System.Data.DataTable&#xD;&#xA;   $Connection = New-Object System.Data.SQLClient.SQLConnection&#xD;&#xA;   $Connection.ConnectionString = &quot;server='$Server';database='$Database';trusted_connection=true;&quot;&#xD;&#xA;   $Connection.Open()&#xD;&#xA;   $Command = New-Object System.Data.SQLClient.SQLCommand&#xD;&#xA;   $Command.Connection = $Connection&#xD;&#xA;   $Command.CommandText = $UserSQLQuery&#xD;&#xA;   $Reader = $Command.ExecuteReader()&#xD;&#xA;   $Datatable.Load($Reader)&#xD;&#xA;   $Connection.Close()&#xD;&#xA;   &#xD;&#xA;   return $Datatable&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  $resultsDataTable = New-Object System.Data.DataTable&#xD;&#xA;  $resultsDataTable = ExecuteSqlQuery $Server $Database $UserSqlQuery&#xD;&#xA;  &#xD;&#xA;  $PLResult = $resultsDataTable.Name0&#xD;&#xA;  return $PLResult&#xD;&#xA;  &#xD;&#xA; }&#xD;&#xA; &#xD;&#xA;  if($SQLSrv)&#xD;&#xA;    {&#xD;&#xA;    $InactiveComputers = $null&#xD;&#xA;    $InactiveComputers = Get-InactiveComputers -Server $SQLSrv -Database $DBName&#xD;&#xA;    }&#xD;&#xA;  else{&#xD;&#xA;      Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId 10000 -Category 0 -EntryType Information -Message &quot;SCCM Connector is not enabled&quot;&#xD;&#xA;    }&#xD;&#xA;  &#xD;&#xA; #Process Windows Computers&#xD;&#xA; Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId 10000 -Category 0 -EntryType Information -Message &quot;Hardware Connector Start Processing of Computer Objects&quot;&#xD;&#xA; $WindowsComputers = Get-SCSMObjectProjection -Projection $ComputerProjectionClass -Filter &quot;ObjectStatus -eq $ActiveObjEnum&quot;&#xD;&#xA; if ($WindowsComputers)&#xD;&#xA; {&#xD;&#xA;  foreach ($WindowsComputer in $WindowsComputers)&#xD;&#xA;  {&#xD;&#xA;   $DevUsrExists = $null&#xD;&#xA;   $CompName = $WindowsComputer.PrincipalName&#xD;&#xA;   &#xD;&#xA;   $HWExists = Get-SCSMObject -Class $HardwareClass -Filter &quot;DeviceName -eq $CompName&quot; -ErrorAction SilentlyContinue&#xD;&#xA;   if (!$HWExists)&#xD;&#xA;   {&#xD;&#xA;    #write-verbose &quot;[INFO]`t Processing Computer $CompName...&quot;&#xD;&#xA;    Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $InfoID -Category 0 -EntryType Information -Message &quot;Hardware Connector Found $CompName. Start Processing Item.&quot;&#xD;&#xA;    $CompManufacturer = $null&#xD;&#xA;    $CompModel = $null&#xD;&#xA;    [string]$CompModel = $WindowsComputer.Model&#xD;&#xA;    [string]$CompManufacturer = $WindowsComputer.Manufacturer&#xD;&#xA;    [datetime]$LastModified = $WindowsComputer.Object.LastModified&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    ##Processing Cores and Processors&#xD;&#xA;    $Sockets = $null&#xD;&#xA;    [int]$Sockets = (Get-SCSMRelatedObject -SMObject $WindowsComputer.Object | ?{ $_.ClassName -eq &quot;Microsoft.Windows.Peripheral.Processor&quot; } | Measure-Object).Count&#xD;&#xA;    &#xD;&#xA;    try&#xD;&#xA;    {&#xD;&#xA;     try&#xD;&#xA;     {&#xD;&#xA;      $Res = $null&#xD;&#xA;   if($SQLSrv)&#xD;&#xA;   {&#xD;&#xA;       $Res = Get-ProcessorDetails -COMP $($WindowsComputer.NetbiosComputerName) -Server $SQLSrv -Database $DBName&#xD;&#xA;   }&#xD;&#xA;  &#xD;&#xA;  }&#xD;&#xA;     Catch&#xD;&#xA;     {&#xD;&#xA;      $Res = $null&#xD;&#xA;      Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Query SCCM DB For Computer: $($WindowsComputer.DisplayName). Please Ensure that SCSM Workflow Account has Read Permission on SQL Server: $SQLSrv and Database: $DBName.&quot;&#xD;&#xA;     }&#xD;&#xA;     Finally&#xD;&#xA;     {&#xD;&#xA;  if($Res)&#xD;&#xA;  {&#xD;&#xA;       if (($Res.Processors | Measure-Object).Count -gt 1)&#xD;&#xA;       {&#xD;&#xA;        $FPhyProcSum = $null&#xD;&#xA;        $LogicProc = $null&#xD;&#xA;        $FPhyProcSum = $($Res.Processors) -join '+'&#xD;&#xA;        $LogicProc = Invoke-Expression $FPhyProcSum&#xD;&#xA;        $FPhyCorSum = $($Res.Cores) -join '+'&#xD;&#xA;        $PhysProc = Invoke-Expression $FPhyCorSum&#xD;&#xA;        &#xD;&#xA;       }&#xD;&#xA;       else&#xD;&#xA;       {&#xD;&#xA;        $LogicProc = $null&#xD;&#xA;        $PhysProc = $null&#xD;&#xA;        $LogicProc = $Res.Processors&#xD;&#xA;        $PhysProc = $Res.Cores&#xD;&#xA;       }&#xD;&#xA;   }&#xD;&#xA;   else{&#xD;&#xA;     $LogicProc = $null&#xD;&#xA;         $PhysProc = $null&#xD;&#xA;   $LogicProc = $WindowsComputer.LogicalProcessors&#xD;&#xA;   $PhysProc = $WindowsComputer.PhysicalProcessors&#xD;&#xA;      }&#xD;&#xA;      &#xD;&#xA;     }&#xD;&#xA;    }&#xD;&#xA;    finally&#xD;&#xA;    {&#xD;&#xA;     [int]$PhysicalCores = $PhysProc&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    try&#xD;&#xA;    {&#xD;&#xA;     $SerialNumber = $null&#xD;&#xA;     $SerialNumber = $WindowsComputer.DeployedComputer[0].SerialNumber&#xD;&#xA;    }&#xD;&#xA;    catch&#xD;&#xA;    {&#xD;&#xA;     $SerialNumber = &quot;Not Present&quot;&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    $OSDisplayName = (Get-SCSMRelatedObject -SMObject $WindowsComputer.Object | ? { $_.ClassName -eq &quot;Microsoft.Windows.OperatingSystem&quot; }).OSVersionDisplayName&#xD;&#xA;    $OSVersion = (Get-SCSMRelatedObject -SMObject $WindowsComputer.Object | ? { $_.ClassName -eq &quot;Microsoft.Windows.OperatingSystem&quot; }).OSVersion&#xD;&#xA;    $Memory = (Get-SCSMRelatedObject -SMObject $WindowsComputer.Object | ? { $_.ClassName -eq &quot;Microsoft.Windows.OperatingSystem&quot; }).PhysicalMemory&#xD;&#xA;    $DataWidth = (Get-SCSMRelatedObject -SMObject $WindowsComputer.Object | ? { $_.ClassName -eq &quot;Microsoft.Windows.Peripheral.Processor&quot; }).DataWidth&#xD;&#xA;    #$SystemType= (Get-SCSMObject -Class (Get-SCSMClass -Name Microsoft.SystemCenter.ConfigurationManager.DeployedComputer) -Filter &quot;SerialNumber -eq $SerialNumber&quot;).SystemType[0]&#xD;&#xA;    &#xD;&#xA;    $Nets = Get-SCSMRelatedObject -SMObject $WindowsComputer.Object | ? { $_.ClassName -eq &quot;Microsoft.Windows.ComputerNetworkAdapter&quot; } -ErrorAction SilentlyContinue&#xD;&#xA;    If (!$Nets)&#xD;&#xA;    {&#xD;&#xA;     $Nets = Get-SCSMRelatedObject -SMObject $WindowsComputer.Object | ? { $_.ClassName -eq &quot;Microsoft.Windows.Peripheral.NetworkAdapter&quot; } -ErrorAction SilentlyContinue&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    $Nip = $WindowsComputer.IPAddress&#xD;&#xA;    &#xD;&#xA;    foreach ($Net in $Nets)&#xD;&#xA;    {&#xD;&#xA;     if (!$Nip)&#xD;&#xA;     {&#xD;&#xA;      $Nip += ($Net.IPAddress + &quot;  &quot;)&#xD;&#xA;     }&#xD;&#xA;     $NMAc = $null&#xD;&#xA;     $NMAC += ($Net.MACAddress + &quot;  &quot;)&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    try&#xD;&#xA;    {&#xD;&#xA;     $DeviceUser = $null&#xD;&#xA;     $PDeviceUser = $null&#xD;&#xA;     $PDeviceUser = (Get-SCSMRelationshipObject -ByTarget $WindowsComputer.object | ? { $_.RelationshipId -eq $UsrUsDevRelClId })&#xD;&#xA;     if ($PDeviceUser.SourceObject)&#xD;&#xA;     {&#xD;&#xA;      if ($PDeviceUser.SourceObject.count -eq 1)&#xD;&#xA;      {&#xD;&#xA;       $DeviceUser = $PDeviceUser.SourceObject&#xD;&#xA;      }&#xD;&#xA;      else&#xD;&#xA;      {&#xD;&#xA;       $DeviceUser = $PDeviceUser.SourceObject[0]&#xD;&#xA;      }&#xD;&#xA;     }&#xD;&#xA;    }&#xD;&#xA;    catch&#xD;&#xA;    {&#xD;&#xA;     $DeviceUser = $null&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    switch -wildcard ($OSDisplayName)&#xD;&#xA;    {&#xD;&#xA;     &quot;*Server*&quot;{ $OSTypeEnum = $ServerOSId }&#xD;&#xA;     default { $OSTypeEnum = $ClientOSId }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    switch ($DataWidth)&#xD;&#xA;    {&#xD;&#xA;     &quot;64&quot;{ $Fam = $Amd64Id }&#xD;&#xA;     default { $Fam = $x86 }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    if ($OSTypeEnum -eq $ServerOSId) { $DevType = $SrvAssetTypeEnumId }&#xD;&#xA;    Else { $DevType = $DesktopAssetTypeEnumId }&#xD;&#xA;    &#xD;&#xA;    switch ($WindowsComputer.IsVirtualMachine)&#xD;&#xA;    {&#xD;&#xA;     &quot;True&quot; { $AssHwType = $VMHWAssetEnumId }&#xD;&#xA;     &quot;False&quot;{ $AssHwType = $ComputerHWAssetEnumId }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    if ($AssHwType -eq $VMHWAssetEnumId) { $DevType = $VMAssetTypeEnumId }&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    if ($SerialNumber -ne &quot;Not Present&quot;)&#xD;&#xA;    {&#xD;&#xA;     if ($AssHwType -ne $VMHWAssetEnumId)&#xD;&#xA;     {&#xD;&#xA;      $AssetTag = $null&#xD;&#xA;      $AssetTag = &quot;$PreFix&quot; + &quot;$SerialNumber&quot;&#xD;&#xA;     }&#xD;&#xA;     else&#xD;&#xA;     {&#xD;&#xA;      $AssetTag = $null&#xD;&#xA;      $AssetTag = &quot;$PreFix&quot; + &quot;VM:&quot; + &quot;$CompName&quot;&#xD;&#xA;     }&#xD;&#xA;    }&#xD;&#xA;    else { $AssetTag = $null }&#xD;&#xA;    &#xD;&#xA;    [String]$ConnDetails = &quot;$CompName&quot; + &quot;$Nip&quot; + &quot;$NMac&quot; + &quot;$OSDisplayName&quot; + &quot;$Memory&quot; + &quot;$SerialNumber&quot; + &quot;$AssetTag&quot; + $($LastModified.ToString())&#xD;&#xA;    $ObjHash = Get-StringHash -String $ConnDetails&#xD;&#xA;    &#xD;&#xA;    $PropertyHashTable = @{&#xD;&#xA;     &quot;DisplayName&quot; = $CompName;&#xD;&#xA;     &quot;AssetClass&quot; = $AssHwType;&#xD;&#xA;     &quot;DeviceManufacturer&quot; = $CompManufacturer;&#xD;&#xA;     &quot;DeviceModel&quot; = $CompModel;&#xD;&#xA;     &quot;DeviceName&quot; = $CompName;&#xD;&#xA;     &quot;DeviceType&quot; = $DevType;&#xD;&#xA;     &quot;IPAddress&quot; = $Nip;&#xD;&#xA;     &quot;MACAddress&quot; = $NMac;&#xD;&#xA;     &quot;OSFoundation&quot; = $CompOSId;&#xD;&#xA;     &quot;OSName&quot; = $OSDisplayName;&#xD;&#xA;     &quot;OSType&quot; = $OSTypeEnum;&#xD;&#xA;     &quot;OSVersion&quot; = $OSVersion;&#xD;&#xA;     &quot;PhysicalCores&quot; = $PhysicalCores;&#xD;&#xA;     &quot;PhysicalProcessors&quot; = $LogicProc;&#xD;&#xA;     &quot;PhysicalSockets&quot; = $Sockets&#xD;&#xA;     &quot;Memory&quot; = $Memory;&#xD;&#xA;     &quot;ProcessorFamily&quot; = $Fam;&#xD;&#xA;     &quot;SerialNumber&quot; = $SerialNumber;&#xD;&#xA;     &quot;ObjectHash&quot; = $ObjHash;&#xD;&#xA;     &quot;AssetTag&quot; = $AssetTag;&#xD;&#xA;     &quot;LastDiscoveredDate&quot; = (Get-Date);&#xD;&#xA;     &quot;LastModifiedSync&quot; = $LastModified;&#xD;&#xA;     &#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    $NewHW = New-SCSMObject -Class $HardwareClass -PropertyHashtable $PropertyHashTable -PassThru&#xD;&#xA;    #write-verbose &quot;[INFO]`t Creating Hardware for Computer $CompName...&quot;&#xD;&#xA;    &#xD;&#xA;    try&#xD;&#xA;    {&#xD;&#xA;     $disks = $null&#xD;&#xA;     $disks = Get-SCSMRelatedObject -SMObject $WindowsComputer.Object | ?{ ($_.Classname -eq &quot;Microsoft.Windows.Peripheral.PhysicalDisk&quot;) -and ($_.ObjectStatus -ne $PendingDeleteEnumId) }&#xD;&#xA;    }&#xD;&#xA;    catch { }&#xD;&#xA;    finally&#xD;&#xA;    {&#xD;&#xA;     foreach ($disk in $disks)&#xD;&#xA;     {&#xD;&#xA;      New-SCSMRelationshipObject -Relationship $ContainDiskRelCl -Source $NewHW -Target $disk -Bulk&#xD;&#xA;     }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    try&#xD;&#xA;    {&#xD;&#xA;     $volumes = $null&#xD;&#xA;     $volumes = Get-SCSMRelatedObject -SMObject $WindowsComputer.Object | ?{ ($_.Classname -eq &quot;Microsoft.Windows.Peripheral.LogicalDisk&quot;) -and ($_.ObjectStatus -ne $PendingDeleteEnumId) }&#xD;&#xA;    }&#xD;&#xA;    catch { }&#xD;&#xA;    finally&#xD;&#xA;    {&#xD;&#xA;     foreach ($volume in $volumes)&#xD;&#xA;     {&#xD;&#xA;      New-SCSMRelationshipObject -Relationship $ContainVolumeRelCl -Source $NewHW -Target $volume -Bulk&#xD;&#xA;     }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    if ($AssHwType -ne $VMHWAssetEnumId)&#xD;&#xA;    {&#xD;&#xA;     &#xD;&#xA;     if ($CompManufacturer)&#xD;&#xA;     {&#xD;&#xA;      $iNewMan = $null&#xD;&#xA;      $iNewMan = Get-SCSMObject -Class $DevManufacturer -Filter &quot;DisplayName -like *$CompManufacturer*&quot;&#xD;&#xA;      if ($iNewMan)&#xD;&#xA;      {&#xD;&#xA;       $iRelMan = New-SCSMRelationshipObject -Source $NewHW -Target $iNewMan -Relationship $HardwareHasManufacturerRelCl -Bulk&#xD;&#xA;       &#xD;&#xA;      }&#xD;&#xA;      else&#xD;&#xA;      {&#xD;&#xA;       &#xD;&#xA;       $iVendorHashTable = @{&#xD;&#xA;        &#xD;&#xA;        &quot;DisplayName&quot; = $CompManufacturer;&#xD;&#xA;        &quot;ManufacturerName&quot; = $CompManufacturer;&#xD;&#xA;        &#xD;&#xA;       }&#xD;&#xA;       &#xD;&#xA;       &#xD;&#xA;       $iNewMan = New-SCSMObject -Class $DevManufacturer -PropertyHashtable $iVendorHashTable -PassThru&#xD;&#xA;       $iRelMan = New-SCSMRelationshipObject -Source $NewHW -Target $iNewMan -Relationship $HardwareHasManufacturerRelCl -Bulk&#xD;&#xA;       &#xD;&#xA;       &#xD;&#xA;       # Find Manufacturer Web Site&#xD;&#xA;       &#xD;&#xA;       if ($iNewMan)&#xD;&#xA;       {&#xD;&#xA;        try{&#xD;&#xA;          $Key = ($HardwareConnectorAdminSettingObj.Searchkey)&#xD;&#xA;          $env:MS_BingSearch_API_key = &quot;$Key&quot;&#xD;&#xA;          $Uri = 'https://api.cognitive.microsoft.com/bing/v5.0/search?q=' + $CompManufacturer&#xD;&#xA;          $Result = Invoke-RestMethod -Uri $Uri -Method 'GET' -ContentType 'application/json' -Headers @{ 'Ocp-Apim-Subscription-Key' = $env:MS_BingSearch_API_key }&#xD;&#xA;          $Url = $Result.webPages.value[0].displayUrl&#xD;&#xA;          $ManUrl = &quot;http://&quot; + $Url&#xD;&#xA;      }&#xD;&#xA;  catch&#xD;&#xA;   {&#xD;&#xA;   $ManUrl = $null&#xD;&#xA;   Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $WarningId -Category 0 -EntryType Warning -Message &quot;SCSM Server Cannot Find Manufacturer URL. Please Check if you have Insert the Bing API Key in Hardware Connector Setting, or SCSM Server is connected to Internet.&quot;&#xD;&#xA;   }&#xD;&#xA;  finally&#xD;&#xA;   {&#xD;&#xA;          if ($ManUrl)&#xD;&#xA;          {&#xD;&#xA;           Set-SCSMObject -SMObject $iNewMan -Property &quot;ManufacturerWebSite&quot; -Value $ManUrl&#xD;&#xA;          }&#xD;&#xA;   }&#xD;&#xA;       }&#xD;&#xA;      }&#xD;&#xA;     }&#xD;&#xA;     &#xD;&#xA;     if ($CompModel)&#xD;&#xA;     {&#xD;&#xA;      $iModEx = $null&#xD;&#xA;      $iModEx = Get-SCSMObject -Class $DevModel -Filter &quot;DisplayName -eq $CompModel&quot;&#xD;&#xA;      if ($iModEx)&#xD;&#xA;      {&#xD;&#xA;       $iRelModel = New-SCSMRelationshipObject -Source $NewHW -Target $iModEx -Relationship $HardwareHasModelRelCl -Bulk&#xD;&#xA;       #$RelDevMan = New-SCSMRelationshipObject -Source $iModEx -Target $iNewMan -Relationship $ModelHasManufacturerRelCl -Bulk&#xD;&#xA;       &#xD;&#xA;      }&#xD;&#xA;      else&#xD;&#xA;      {&#xD;&#xA;       &#xD;&#xA;       $iModelHashTable = @{&#xD;&#xA;        &#xD;&#xA;        &quot;DisplayName&quot; = $($CompModel);&#xD;&#xA;        &quot;ModelName&quot; = $($CompModel);&#xD;&#xA;        &#xD;&#xA;       }&#xD;&#xA;       &#xD;&#xA;       $iModEx = New-SCSMObject -Class $DevModel -PropertyHashtable $iModelHashTable -PassThru&#xD;&#xA;       &#xD;&#xA;       #Find Web Site For Model&#xD;&#xA;       &#xD;&#xA;       if ($iModEx)&#xD;&#xA;       {&#xD;&#xA;      try&#xD;&#xA;   {&#xD;&#xA;           $Key = ($HardwareConnectorAdminSettingObj.Searchkey)&#xD;&#xA;           $env:MS_BingSearch_API_key = &quot;$Key&quot;&#xD;&#xA;           $Uri = 'https://api.cognitive.microsoft.com/bing/v5.0/search?q=' + $CompModel&#xD;&#xA;           $Result = Invoke-RestMethod -Uri $Uri -Method 'GET' -ContentType 'application/json' -Headers @{ 'Ocp-Apim-Subscription-Key' = $env:MS_BingSearch_API_key }&#xD;&#xA;           $Url = $Result.webPages.value[0].displayUrl&#xD;&#xA;           $ModelUrl = &quot;http://&quot; + $Url&#xD;&#xA;   }&#xD;&#xA;  catch&#xD;&#xA;   {&#xD;&#xA;   $ModelUrl = $null&#xD;&#xA;   Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $WarningId -Category 0 -EntryType Warning -Message &quot;SCSM Server Cannot Find Model URL. Please Check if you have Insert the Bing API Key in Hardware Connector Setting, or SCSM Server is connected to Internet.&quot;&#xD;&#xA;   }&#xD;&#xA;  finally&#xD;&#xA;   {        &#xD;&#xA;        if ($ModelUrl)&#xD;&#xA;           {&#xD;&#xA;            Set-SCSMObject -SMObject $iModEx -Property &quot;ModelWebSite&quot; -Value $ModelUrl&#xD;&#xA;           }&#xD;&#xA;         }&#xD;&#xA;    }&#xD;&#xA;      }&#xD;&#xA;      &#xD;&#xA;      #Relationships&#xD;&#xA;      &#xD;&#xA;      $iRelModel = New-SCSMRelationshipObject -Source $NewHW -Target $iModEx -Relationship $HardwareHasModel -Bulk&#xD;&#xA;      $iRelDevMan = New-SCSMRelationshipObject -Source $iModEx -Target $iNewMan -Relationship $ModelHasManufacturerRelCl -Bulk&#xD;&#xA;      $CompCI = Get-SCSMObject -Id $WindowsComputer.Object.Id&#xD;&#xA;      New-SCSMRelationshipObject -Relationship $ConfigItemRelCl -Source $NewHW -Target $CompCI -Bulk&#xD;&#xA;      &#xD;&#xA;      #Numeric Values Model and Manufacturer&#xD;&#xA;      &#xD;&#xA;      [int]$ModelDeployedCount = (Get-SCSMRelationshipObject -ByTarget $iModEx | ? RelationShipId -eq $HardwareHasModel.id).Count&#xD;&#xA;      Set-SCSMObject -SMObject $iModEx -Property &quot;ModelCount&quot; -Value $ModelDeployedCount&#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;     }&#xD;&#xA;     &#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;     $CompCI = Get-SCSMObject -Id $WindowsComputer.Object.Id&#xD;&#xA;     New-SCSMRelationshipObject -Relationship $ConfigItemRelCl -Source $NewHW -Target $CompCI -Bulk&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    if ($DeviceUser)&#xD;&#xA;    {&#xD;&#xA;     &#xD;&#xA;     $id = $DeviceUser.id&#xD;&#xA;     $DevUsrExists = Get-SCSMObject -Class (Get-SCSMClass -Name Microsoft.AD.User$) -Filter &quot;id -eq $id&quot; -ErrorAction SilentlyContinue&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    if ($DevUsrExists)&#xD;&#xA;    {&#xD;&#xA;     #write-verbose &quot;[INFO]`t Assigning Relationship for Hardware $CompName with User $DevUsrExists...&quot;&#xD;&#xA;     Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $InfoID -Category 0 -EntryType Information -Message &quot;Hardware Connector Assigning Relationship for Computer with Computer Name : $CompName and User: $DevUsrExists&quot;&#xD;&#xA;     New-SCSMRelationshipObject -Relationship $HardwareHasUserRelCl -Source $NewHW -Target $DevUsrExists -Bulk -ErrorAction SilentlyContinue&#xD;&#xA;     &#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    $AssExists = Get-SCSMObject -Class $HardwareAssetClass -Filter &quot;AssetName -eq $CompName&quot;&#xD;&#xA;    if (!$AssExists)&#xD;&#xA;    {&#xD;&#xA;     #Check if is Active&#xD;&#xA;     $IsActive = $null&#xD;&#xA;     $RStatus = $null&#xD;&#xA;     $IsActive = $InactiveComputers -contains $($CompCI.DisplayName)&#xD;&#xA;     if ($IsActive -ne $true)&#xD;&#xA;     { $RStatus = $ReadinessStatusEnumId }&#xD;&#xA;     else { $RStatus = $ReadinessStatusNotUsedEnumId }&#xD;&#xA;     &#xD;&#xA;     $AssetTable = @{&#xD;&#xA;      &quot;AssetName&quot; = $CompName;&#xD;&#xA;      &quot;DisplayName&quot; = $CompName;&#xD;&#xA;      &quot;Type&quot; = $DevType;&#xD;&#xA;      &quot;ReadinessStatus&quot; = $RStatus;&#xD;&#xA;      &quot;AssetTag&quot; = $AssetTag;&#xD;&#xA;      &quot;SerialNumber&quot; = $SerialNumber;&#xD;&#xA;     }&#xD;&#xA;     &#xD;&#xA;     $Asset = New-SCSMObject -Class $HardwareAssetClass -PropertyHashtable $AssetTable -PassThru&#xD;&#xA;     #write-verbose &quot;[INFO]`t Creating Hardware Asset for Hardware $CompName ...&quot;&#xD;&#xA;     Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $InfoID -Category 0 -EntryType Information -Message &quot;Hardware Connector Succesfully Create Hardware Asset for Computer Object: $CompName&quot;&#xD;&#xA;     New-SCSMRelationshipObject -Relationship $HardwareAssetRefHardwareRelCl -Source $Asset -Target $NewHW -Bulk&#xD;&#xA;     if ($DevUsrExists)&#xD;&#xA;     {&#xD;&#xA;      #write-verbose &quot;[INFO]`t Assigning Realtionship for Hardware Asset $CompName  ans User $DevUsrExists...&quot;&#xD;&#xA;      Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $InfoID -Category 0 -EntryType Information -Message &quot;Hardware Connector Assigning Relationship for Hardware Asset with Computer Name : $CompName and User: $DevUsrExists&quot;&#xD;&#xA;      New-SCSMRelationshipObject -Relationship $HardwareAssetHasUser -Source $Asset -Target $DevUsrExists -Bulk -ErrorAction SilentlyContinue&#xD;&#xA;     }&#xD;&#xA;     &#xD;&#xA;    }&#xD;&#xA;   }&#xD;&#xA;   else&#xD;&#xA;   {&#xD;&#xA;    $ActualHw = Get-SCSMObject -Class $HardwareClass -Filter &quot;DeviceName -eq $($WindowsComputer.PrincipalName)&quot;&#xD;&#xA;    [datetime]$LastModified = $WindowsComputer.Object.LastModified&#xD;&#xA; $ObjLast = $null&#xD;&#xA; $WinCLast = $null&#xD;&#xA; &#xD;&#xA;    $ObjLast = Get-Date -Date $($ActualHW.LastModifiedSync) -Format &quot;yyyy-MM-dd hh:mm&quot;&#xD;&#xA;    $WinCLast = Get-Date -Date $($WindowsComputer.LastModified) -Format &quot;yyyy-MM-dd hh:mm&quot;&#xD;&#xA;    if ($ObjLast -ne $WinCLast)&#xD;&#xA;    {&#xD;&#xA;     $ObjHistory = $null&#xD;&#xA;     $emg = $null&#xD;&#xA;     &#xD;&#xA;     $emg = New-Object Microsoft.EnterpriseManagement.EnterpriseManagementGroup &quot;localhost&quot;&#xD;&#xA;     $ObjHistory = $emg.EntityObjects.GetObjectHistoryTransactions($WindowsComputer.Object) | ? { $_.DateOccurred -gt $($HWExists.LastModifiedSync) }&#xD;&#xA;     foreach ($ObjHist in $ObjHistory)&#xD;&#xA;     {&#xD;&#xA;      try&#xD;&#xA;      {&#xD;&#xA;       $PropertyChanges = $null&#xD;&#xA;       $RelationshipChanges = $null&#xD;&#xA;       &#xD;&#xA;       $PropertyChanges = $ObjHist.ObjectHistory.Values.ClassHistory.PropertyChanges&#xD;&#xA;       $RelationshipChanges = $ObjHist.ObjectHistory.Values.ClassHistory.RelationshipChanges&#xD;&#xA;      }&#xD;&#xA;      Catch&#xD;&#xA;      {&#xD;&#xA;       $PropertyChanges = $null&#xD;&#xA;       $RelationshipChanges = $null&#xD;&#xA;      }&#xD;&#xA;      Finally&#xD;&#xA;      {&#xD;&#xA;       if ($PropertyChanges)&#xD;&#xA;       {&#xD;&#xA;        if ($PropertyChanges.Count -gt 1)&#xD;&#xA;        {&#xD;&#xA;         foreach ($PropertyChange in $PropertyChanges.Values.Second)&#xD;&#xA;         {&#xD;&#xA;          $Propery = $null&#xD;&#xA;          $Value = $null&#xD;&#xA;          $ChangeType = $null&#xD;&#xA;          &#xD;&#xA;          $Propery = $PropertyChange.Type.Name&#xD;&#xA;          $Value = $PropertyChange.Value&#xD;&#xA;          $ChangeType = $ObjHist.ObjectHistory.Values.ClassHistory.ChangeType&#xD;&#xA;          &#xD;&#xA;          if ($ChangeType -eq &quot;Insert&quot;)&#xD;&#xA;          {&#xD;&#xA;           try&#xD;&#xA;           {&#xD;&#xA;            Set-SCSMObject -SMObject $ActualHw -Property $Propery -Value $Value&#xD;&#xA;           }&#xD;&#xA;           catch&#xD;&#xA;           {&#xD;&#xA;            Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object: $ActualHw For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;           }&#xD;&#xA;          }&#xD;&#xA;          elseIf ($ChangeType -eq &quot;Modify&quot;)&#xD;&#xA;          {&#xD;&#xA;           try&#xD;&#xA;           {&#xD;&#xA;            Set-SCSMObject -SMObject $ActualHw -Property $Propery -Value $Value&#xD;&#xA;           }&#xD;&#xA;           catch&#xD;&#xA;           {&#xD;&#xA;            Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object: $ActualHw For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;           }&#xD;&#xA;          }&#xD;&#xA;          elseif ($ChangeType -eq &quot;Delete&quot;)&#xD;&#xA;          {&#xD;&#xA;           try&#xD;&#xA;           {&#xD;&#xA;            Set-SCSMObject -SMObject $ActualHw -Property $Propery -Value &quot; &quot;&#xD;&#xA;           }&#xD;&#xA;           catch&#xD;&#xA;           {&#xD;&#xA;            Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object: $ActualHw For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;           }&#xD;&#xA;          }&#xD;&#xA;         }&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;         $Propery = $null&#xD;&#xA;         $Value = $null&#xD;&#xA;         $ChangeType = $null&#xD;&#xA;         &#xD;&#xA;         $Propery = $ObjHist.ObjectHistory.Values.ClassHistory.PropertyChanges.Key&#xD;&#xA;         $Value = $ObjHist.ObjectHistory.Values.ClassHistory.PropertyChanges.Value&#xD;&#xA;         $ChangeType = $ObjHist.ObjectHistory.Values.ClassHistory.PropertyChanges.ChangeType&#xD;&#xA;         &#xD;&#xA;         if ($ChangeType -eq &quot;Insert&quot;)&#xD;&#xA;         {&#xD;&#xA;          try&#xD;&#xA;          {&#xD;&#xA;           Set-SCSMObject -SMObject $ActualHw -Property $Propery -Value $Value&#xD;&#xA;          }&#xD;&#xA;          catch&#xD;&#xA;          {&#xD;&#xA;           Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object: $ActualHw For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;          }&#xD;&#xA;         }&#xD;&#xA;         elseIf ($ChangeType -eq &quot;Modify&quot;)&#xD;&#xA;         {&#xD;&#xA;          try&#xD;&#xA;          {&#xD;&#xA;           Set-SCSMObject -SMObject $ActualHw -Property $Propery -Value $Value&#xD;&#xA;          }&#xD;&#xA;          catch&#xD;&#xA;          {&#xD;&#xA;           Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object: $ActualHw For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;          }&#xD;&#xA;         }&#xD;&#xA;         elseif ($ChangeType -eq &quot;Delete&quot;)&#xD;&#xA;         {&#xD;&#xA;          try&#xD;&#xA;          {&#xD;&#xA;           Set-SCSMObject -SMObject $ActualHw -Property $Propery -Value &quot;&quot;&#xD;&#xA;          }&#xD;&#xA;          catch&#xD;&#xA;          {&#xD;&#xA;           Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object: $ActualHw For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;          }&#xD;&#xA;         }&#xD;&#xA;         &#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;       }&#xD;&#xA;       elseif (($($RelationshipChanges.ManagementPackRelationshipTypeId) -ne $DevHasSoftInstalledRelClId) -or ($($RelationshipChanges.ManagementPackRelationshipTypeId) -ne $DevHasUpdInstalledRelClId))&#xD;&#xA;       {&#xD;&#xA;        $SourceObj = $null&#xD;&#xA;        $TargetObj = $null&#xD;&#xA;        $RelationshipClassObj = $null&#xD;&#xA;        $RChangeType = $null&#xD;&#xA;        &#xD;&#xA;        $SourceObj = $ObjHist.ObjectHistory.Values.RelationshipHistory.SourceObjectId&#xD;&#xA;        $TargetObj = $ObjHist.ObjectHistory.Values.RelationshipHistory.TargetObjectId&#xD;&#xA;        $RelationshipClassObj = $ObjHist.ObjectHistory.Values.RelationshipHistory.ManagementPackRelationshipTypeId&#xD;&#xA;        $RChangeType = $ObjHist.ObjectHistory.Values.RelationshipHistory.ChangeType&#xD;&#xA;        &#xD;&#xA;        $Src = $null&#xD;&#xA;        $Tar = $null&#xD;&#xA;        $Rel = $null&#xD;&#xA;     try&#xD;&#xA;   {&#xD;&#xA;         $Src = Get-SCSMObject -Id $SourceObj&#xD;&#xA;         $Tar = Get-SCSMObject -Id $TargetObj&#xD;&#xA;         $Rel = Get-SCSMRelationshipClass -id $RelationshipClassObj&#xD;&#xA;         }&#xD;&#xA;  catch{&#xD;&#xA;    Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot; SRC:$($SRC) , Tar:$($Tar) , Rel: $($Rel), Hardware Connector Cannot Update Object: $ActualHw For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;&#xD;&#xA;    }&#xD;&#xA;  finally&#xD;&#xA;   {&#xD;&#xA;   if($Src -and $Tar -and $Rel) &#xD;&#xA;    {&#xD;&#xA;          if ($RChangeType -eq &quot;Insert&quot;)&#xD;&#xA;          {&#xD;&#xA;           try&#xD;&#xA;           {&#xD;&#xA;            New-SCSMRelationshipObject -Source $Src -Target $Tar -Relationship $Rel -Bulk&#xD;&#xA;           }&#xD;&#xA;           catch&#xD;&#xA;           {&#xD;&#xA;            Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object Relationships:$ActualHw For Relationship:$Rel with Source:$Src and Target:$Tar for Change Type:$ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;           }&#xD;&#xA;          }&#xD;&#xA;          elseIf ($RChangeType -eq &quot;Modify&quot;)&#xD;&#xA;          {&#xD;&#xA;           try&#xD;&#xA;           {&#xD;&#xA;            New-SCSMRelationshipObject -Source $Src -Target $Tar -Relationship $Rel -Bulk&#xD;&#xA;           }&#xD;&#xA;           catch&#xD;&#xA;           {&#xD;&#xA;            Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object Relationships:$ActualHw For Relationship:$Rel with Source:$Src and Target:$Tar for Change Type:$ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;           }&#xD;&#xA;          }&#xD;&#xA;          elseif ($RChangeType -eq &quot;Delete&quot;)&#xD;&#xA;          {&#xD;&#xA;           try&#xD;&#xA;           {&#xD;&#xA;            Get-SCSMRelationshipObject -BySource $Src | ? { ($_.RelationshipClassId -eq $Rel) } | Remove-SCSMRelationshipObject&#xD;&#xA;           }&#xD;&#xA;           catch&#xD;&#xA;           {&#xD;&#xA;            &#xD;&#xA;            Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object Relationships:$ActualHw For Relationship:$Rel with Source:$Src and Target:$Tar for Change Type:$ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;            &#xD;&#xA;           }&#xD;&#xA;          }&#xD;&#xA;          }&#xD;&#xA;   }&#xD;&#xA;       }&#xD;&#xA;       &#xD;&#xA;      }&#xD;&#xA;     }&#xD;&#xA;     Set-SCSMObject -SMObject $ActualHw -Property &quot;LastModifiedSync&quot; -Value $LastModified&#xD;&#xA;    }&#xD;&#xA;   }&#xD;&#xA;   &#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA; }&#xD;&#xA; Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId 10000 -Category 0 -EntryType Information -Message &quot;Hardware Connector Finished Process of Computer Objects&quot;&#xD;&#xA; &#xD;&#xA; #Process Network Devices&#xD;&#xA; Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId 10000 -Category 0 -EntryType Information -Message &quot;Hardware Connector Start Processing of Network Objects&quot;&#xD;&#xA;&#xD;&#xA;if($NetworkDeviceClass)&#xD;&#xA;{&#xD;&#xA; $NetworkDs = Get-SCSMObject -Class $NetworkDeviceClass&#xD;&#xA;  foreach ($NetworkD in $NetworkDs)&#xD;&#xA;  {&#xD;&#xA;   try&#xD;&#xA;    {&#xD;&#xA;    $nAssetsRel = (Get-SCSMRelationshipObject -ByTarget $NetworkD | ? {$_.RelationshipId -eq $($HAssetRefNetRelCl.id)}).SourceObject&#xD;&#xA;    }&#xD;&#xA;   finally&#xD;&#xA;    {&#xD;&#xA;    $nAssetTag = $null&#xD;&#xA;    $NetworkDUser= $null&#xD;&#xA;    $NetworkDAsset =$null&#xD;&#xA;    if($NetworkD.SerialNumber)&#xD;&#xA;     {&#xD;&#xA;     $nAssetTag = &quot;$PreFix&quot; + $($NetworkD.SerialNumber)&#xD;&#xA;     }&#xD;&#xA;    else{$nAssetTag = &quot;NOT PRESENT&quot;}&#xD;&#xA;    &#xD;&#xA;    if(!$nAssetsRel)&#xD;&#xA;     {&#xD;&#xA;     $nAssetRelHashTable=@{&#xD;&#xA;          &quot;AssetName&quot; = $($NetworkD.DisplayName);&#xD;&#xA;                &quot;DisplayName&quot; = $($NetworkD.DisplayName);&#xD;&#xA;                &quot;Type&quot; = $NetHardwareAssetTypeId;&#xD;&#xA;                &quot;ReadinessStatus&quot; = $ReadinessStatusEnumId;&#xD;&#xA;                &quot;AssetTag&quot; = $nAssetTag;&#xD;&#xA;          &quot;AssetStatus&quot; = $AssetStatusEnumDeployedId;&#xD;&#xA;          }&#xD;&#xA;     $NetworkDAsset= New-SCSMObject -Class $HardwareAssetClass -PropertyHashtable $nAssetRelHashTable -PassThru&#xD;&#xA;     New-SCSMRelationshipObject -Source $NetworkDAsset -Target $NetworkD -Relationship $HAssetRefNetRelCl -Bulk&#xD;&#xA;     $NetworkDUser= (Get-SCSMRelationshipObject -BySource $NetworkD -ErrorAction SilentlyContinue | ? {$_.RelationshipId -eq $($NetDevUserRelationShip.Id)}).TargetObject&#xD;&#xA;      if($NetworkDUser)&#xD;&#xA;       {&#xD;&#xA;       New-SCSMRelationshipObject -Source $NetworkDAsset -Target $NetworkDUser -Relationship $HardwareAssetHasUser -Bulk&#xD;&#xA;       }&#xD;&#xA;     &#xD;&#xA;     &#xD;&#xA;     }&#xD;&#xA;     &#xD;&#xA;    }&#xD;&#xA;   &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if($NetworkClass)&#xD;&#xA;{&#xD;&#xA;  $NetworkDevices = Get-SCSMObject -Class $NetworkClass -Filter &quot;ObjectStatus -ne $PendingDeleteEnumId&quot;&#xD;&#xA;  if ($NetworkDevices)&#xD;&#xA;  {&#xD;&#xA;   foreach ($NetDevice in $NetworkDevices)&#xD;&#xA;   {&#xD;&#xA;    [datetime]$LastModified = $NetDevice.LastModified&#xD;&#xA;    $NetDevExists = Get-SCSMObject -Class $NetworkDeviceClass -Filter &quot;SNMPAddress -eq '$($NetDevice.SNMPAddress)' and ObjectStatus -ne '$PendingDeleteEnumId'&quot;&#xD;&#xA;    if (!$NetDevExists)&#xD;&#xA;    {&#xD;&#xA;     [datetime]$LastModified = $NetDevice.LastModified&#xD;&#xA;     [string]$NetDevHash = $($NetDevice.SNMPAddress) + $($NetDevice.sysName) + $($NetDevice.Model) + $($NetDevice.Vendor) + $($LastModified.ToString())&#xD;&#xA;     $ObjectHash = Get-StringHash -String $NetDevHash&#xD;&#xA;     &#xD;&#xA;     $NetHashTable = @{&#xD;&#xA;      &#xD;&#xA;      &quot;DisplayName&quot; = $($NetDevice.SNMPAddress);&#xD;&#xA;      &quot;DeviceName&quot; = $($NetDevice.sysName);&#xD;&#xA;      &quot;Ports&quot; = $($NetDevice.PortNumber);&#xD;&#xA;      &quot;SNMPAddress&quot; = $($NetDevice.SNMPAddress);&#xD;&#xA;      &quot;SupportsSNMP&quot; = $($NetDevice.SupportsSNMP);&#xD;&#xA;      &quot;ObjectHash&quot; = $ObjectHash&#xD;&#xA;      &quot;LastDiscoveredDate&quot; = (Get-Date);&#xD;&#xA;      &quot;Location&quot; = $($NetDevice.Location);&#xD;&#xA;      &quot;SNMPVersion&quot; = $($NetDevice.SNMPVersion);&#xD;&#xA;      &quot;Description&quot; = $($NetDevice.Description);&#xD;&#xA;      &quot;Status&quot; = $ActiveDeviceStatusEnumId;&#xD;&#xA;      &quot;LastModifiedSync&quot; = $LastModified;&#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;     }&#xD;&#xA;     try&#xD;&#xA;     {&#xD;&#xA;      $NewNetDevice = New-SCSMObject -Class $NetworkDeviceClass -PropertyHashtable $NetHashTable -PassThru&#xD;&#xA;      New-SCSMRelationshipObject -Relationship $ConfigItemRelCl -Source $NewNetDevice -Target $NetDevice -Bulk&#xD;&#xA;      &#xD;&#xA;      if ($NetDevice.PrimaryOwnerName)&#xD;&#xA;      {&#xD;&#xA;       $Owner = Get-SCSMObject -Class $UserClass -Filter &quot;DisplayName -like $($NetDevice.PrimaryOwnerName)&quot;&#xD;&#xA;       if ($Owner)&#xD;&#xA;       {&#xD;&#xA;        $MustRelateOwner = New-SCSMRelationshipObject -Source $NewNetDevice -Target $Owner -Relationship $NetDevUserRelationShip -Bulk&#xD;&#xA;       }&#xD;&#xA;      }&#xD;&#xA;      &#xD;&#xA;      if ($NetDevice.Vendor)&#xD;&#xA;      {&#xD;&#xA;       $NewMan = $null&#xD;&#xA;       $NewMan = Get-SCSMObject -Class $DevManufacturer -Filter &quot;DisplayName -eq $($NetDevice.Vendor)&quot;&#xD;&#xA;       if ($NewMan)&#xD;&#xA;       {&#xD;&#xA;        $RelMan = New-SCSMRelationshipObject -Source $NewNetDevice -Target $NewMan -Relationship $NetDevModelRel -Bulk&#xD;&#xA;        &#xD;&#xA;       }&#xD;&#xA;       else&#xD;&#xA;       {&#xD;&#xA;        &#xD;&#xA;        $VendorHashTable = @{&#xD;&#xA;         &#xD;&#xA;         &quot;DisplayName&quot; = $($NetDevice.Vendor);&#xD;&#xA;         &quot;ManufacturerName&quot; = $($NetDevice.Vendor);&#xD;&#xA;         &#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        $NewMan = New-SCSMObject -Class $DevManufacturer -PropertyHashtable $VendorHashTable -PassThru&#xD;&#xA;        $RelMan = New-SCSMRelationshipObject -Source $NewNetDevice -Target $NewMan -Relationship $NetDevManufactRel -Bulk&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;       }&#xD;&#xA;       &#xD;&#xA;       if ($NewMan)&#xD;&#xA;       {&#xD;&#xA;        try&#xD;&#xA;      {&#xD;&#xA;          $Key = ($HardwareConnectorAdminSettingObj.Searchkey)&#xD;&#xA;          $env:MS_BingSearch_API_key = &quot;$Key&quot;&#xD;&#xA;          $Uri = 'https://api.cognitive.microsoft.com/bing/v5.0/search?q=' + $($NetDevice.Vendor)&#xD;&#xA;          $Result = Invoke-RestMethod -Uri $Uri -Method 'GET' -ContentType 'application/json' -Headers @{ 'Ocp-Apim-Subscription-Key' = $env:MS_BingSearch_API_key }&#xD;&#xA;          $Url = $Result.webPages.value[0].displayUrl&#xD;&#xA;          $ManUrl = &quot;http://&quot; + $Url&#xD;&#xA;   }&#xD;&#xA;  catch&#xD;&#xA;   {&#xD;&#xA;   $ManUrl = $null&#xD;&#xA;   Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $WarningId -Category 0 -EntryType Warning -Message &quot;SCSM Server Cannot Find Network Manufacturer URL. Please Check if you have Insert the Bing API Key in Hardware Connector Setting, or SCSM Server is connected to Internet.&quot;&#xD;&#xA;   }&#xD;&#xA;  finally&#xD;&#xA;   {               &#xD;&#xA;          if ($ManUrl)&#xD;&#xA;          {&#xD;&#xA;           Set-SCSMObject -SMObject $NewMan -Property &quot;ManufacturerWebSite&quot; -Value $ManUrl&#xD;&#xA;          }&#xD;&#xA;     }&#xD;&#xA;    &#xD;&#xA;    }&#xD;&#xA;       &#xD;&#xA;      }&#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      if ($NetDevice.Model)&#xD;&#xA;      {&#xD;&#xA;       $ModEx = $null&#xD;&#xA;       $ModEx = Get-SCSMObject -Class $DevModel -Filter &quot;DisplayName -eq $($NetDevice.Model)&quot;&#xD;&#xA;       if ($ModEx)&#xD;&#xA;       {&#xD;&#xA;        $RelModel = New-SCSMRelationshipObject -Source $NewNetDevice -Target $ModEx -Relationship $NetDevModelRel -Bulk&#xD;&#xA;        $RelDevMan = New-SCSMRelationshipObject -Source $RelModel -Target $NewMan -Relationship $ModelHasManufacturerRelCl -Bulk&#xD;&#xA;        &#xD;&#xA;       }&#xD;&#xA;       else&#xD;&#xA;       {&#xD;&#xA;        &#xD;&#xA;        $ModelHashTable = @{&#xD;&#xA;         &#xD;&#xA;         &quot;DisplayName&quot; = $($NetDevice.Model);&#xD;&#xA;         &quot;ModelName&quot; = $($NetDevice.Model);&#xD;&#xA;         &#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        $ModEx = New-SCSMObject -Class $DevModel -PropertyHashtable $ModelHashTable -PassThru&#xD;&#xA;       }&#xD;&#xA; if ($NetDevice.Model)&#xD;&#xA;    {&#xD;&#xA;        &#xD;&#xA;  try&#xD;&#xA;   { &#xD;&#xA;       $Key = ($HardwareConnectorAdminSettingObj.Searchkey)&#xD;&#xA;          $env:MS_BingSearch_API_key = &quot;$Key&quot;&#xD;&#xA;          $Uri = 'https://api.cognitive.microsoft.com/bing/v5.0/search?q=' + $($NetDevice.Model)&#xD;&#xA;          $Result = Invoke-RestMethod -Uri $Uri -Method 'GET' -ContentType 'application/json' -Headers @{ 'Ocp-Apim-Subscription-Key' = $env:MS_BingSearch_API_key }&#xD;&#xA;          $Url = $Result.webPages.value[0].displayUrl&#xD;&#xA;          $ModelUrl = &quot;http://&quot; + $Url&#xD;&#xA;   }&#xD;&#xA;  catch&#xD;&#xA;   {&#xD;&#xA;   $ModelUrl = $null&#xD;&#xA;   Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $WarningId -Category 0 -EntryType Warning -Message &quot;SCSM Server Cannot Find Network Model URL. Please Check if you have Insert the Bing API Key in Hardware Connector Setting, or SCSM Server is connected to Internet.&quot;&#xD;&#xA;   }&#xD;&#xA;  finally&#xD;&#xA;   {                    &#xD;&#xA;          &#xD;&#xA;          if ($ModelUrl)&#xD;&#xA;          {&#xD;&#xA;           Set-SCSMObject -SMObject $ModEx -Property &quot;ModelWebSite&quot; -Value $ModelUrl&#xD;&#xA;          }&#xD;&#xA;      }&#xD;&#xA;  }&#xD;&#xA;       $RelModel = New-SCSMRelationshipObject -Source $NewNetDevice -Target $ModEx -Relationship $NetDevModelRel -Bulk&#xD;&#xA;       $RelDevMan = New-SCSMRelationshipObject -Source $ModEx -Target $NewMan -Relationship $ModelHasManufacturerRelCl -Bulk&#xD;&#xA;       &#xD;&#xA;      }&#xD;&#xA;      &#xD;&#xA;      $DevAssetEx = Get-SCSMObject -Class $HardwareAssetClass -Filter &quot;DisplayName -eq $($NewNetDevice.DisplayName)&quot;&#xD;&#xA;      if (!$DevAssetEx)&#xD;&#xA;      {&#xD;&#xA;       $AssetHashTable = @{&#xD;&#xA;        &quot;AssetName&quot; = $($NewNetDevice.DisplayName);&#xD;&#xA;        &quot;DisplayName&quot; = $($NewNetDevice.DisplayName);&#xD;&#xA;        &quot;Type&quot; = $NetHardwareAssetTypeId;&#xD;&#xA;        &quot;ReadinessStatus&quot; = $ReadinessStatusEnumId;&#xD;&#xA;        &quot;AssetTag&quot; = $AssetTag;&#xD;&#xA;       }&#xD;&#xA;       $DevAsset = New-SCSMObject -Class $HardwareAssetClass -PropertyHashtable $AssetHashTable -PassThru&#xD;&#xA;       New-SCSMRelationshipObject -Relationship $HAssetRefNetRelCl -Source $DevAsset -Target $NewNetDevice -Bulk&#xD;&#xA;      }&#xD;&#xA;     }&#xD;&#xA;     catch&#xD;&#xA;     {&#xD;&#xA;     }&#xD;&#xA;     &#xD;&#xA;     &#xD;&#xA;     &#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;     $NObjLast = Get-Date -Date $($NetDevExists.LastModifiedSync) -Format &quot;yyyy-MM-dd hh:mm&quot;&#xD;&#xA;     $NetDvLast = Get-Date -Date $($NetDevice.LastModified) -Format &quot;yyyy-MM-dd hh:mm&quot;&#xD;&#xA;     if ($NObjLast -ne $NetDvLast)&#xD;&#xA;     {&#xD;&#xA;      $ObjHistory = $null&#xD;&#xA;      $emg = $null&#xD;&#xA;      $emg = New-Object Microsoft.EnterpriseManagement.EnterpriseManagementGroup &quot;localhost&quot;&#xD;&#xA;      $ObjHistory = $emg.EntityObjects.GetObjectHistoryTransactions($NetDevice) | ? { $_.DateOccurred -gt $($NetDevExists.LastModifiedSync) }&#xD;&#xA;      foreach ($ObjHist in $ObjHistory)&#xD;&#xA;      {&#xD;&#xA;       try&#xD;&#xA;       {&#xD;&#xA;        $PropertyChanges = $null&#xD;&#xA;        $RelationshipChanges = $null&#xD;&#xA;        &#xD;&#xA;        $PropertyChanges = $ObjHist.ObjectHistory.Values.ClassHistory.PropertyChanges&#xD;&#xA;        $RelationshipChanges = $ObjHist.ObjectHistory.Values.ClassHistory.RelationshipChanges&#xD;&#xA;       }&#xD;&#xA;       Catch&#xD;&#xA;       {&#xD;&#xA;        $PropertyChanges = $null&#xD;&#xA;        $RelationshipChanges = $null&#xD;&#xA;       }&#xD;&#xA;       Finally&#xD;&#xA;       {&#xD;&#xA;        if ($PropertyChanges)&#xD;&#xA;        {&#xD;&#xA;         if ($PropertyChanges.Count -gt 1)&#xD;&#xA;         {&#xD;&#xA;          foreach ($PropertyChange in $PropertyChanges.Values.Second)&#xD;&#xA;          {&#xD;&#xA;            $Propery = $null&#xD;&#xA;            $Value = $null&#xD;&#xA;            $ChangeType = $null&#xD;&#xA;            &#xD;&#xA;            $Propery = $PropertyChange.Type.Name&#xD;&#xA;            $Value = $PropertyChange.Value&#xD;&#xA;            $ChangeType = $ObjHist.ObjectHistory.Values.ClassHistory.ChangeType&#xD;&#xA;            &#xD;&#xA;            if ($ChangeType -eq &quot;Insert&quot;)&#xD;&#xA;            {&#xD;&#xA;             try&#xD;&#xA;             {&#xD;&#xA;              Set-SCSMObject -SMObject $NetDevExists -Property $Propery -Value $Value&#xD;&#xA;             }&#xD;&#xA;             catch&#xD;&#xA;             {&#xD;&#xA;              Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object: $NetDevExists For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;             }&#xD;&#xA;            }&#xD;&#xA;            elseIf ($ChangeType -eq &quot;Modify&quot;)&#xD;&#xA;            {&#xD;&#xA;             try&#xD;&#xA;             {&#xD;&#xA;              Set-SCSMObject -SMObject $NetDevExists -Property $Propery -Value $Value&#xD;&#xA;             }&#xD;&#xA;             catch&#xD;&#xA;             {&#xD;&#xA;              Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object: $NetDevExists For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;             }&#xD;&#xA;            }&#xD;&#xA;            elseif ($ChangeType -eq &quot;Delete&quot;)&#xD;&#xA;            {&#xD;&#xA;             try&#xD;&#xA;             {&#xD;&#xA;              Set-SCSMObject -SMObject $NetDevExists -Property $Propery -Value &quot; &quot;&#xD;&#xA;             }&#xD;&#xA;             catch&#xD;&#xA;             {&#xD;&#xA;              Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object: $NetDevExists For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;             }&#xD;&#xA;            }&#xD;&#xA;          }&#xD;&#xA;         }&#xD;&#xA;         else&#xD;&#xA;         {&#xD;&#xA;            $Propery = $null&#xD;&#xA;            $Value = $null&#xD;&#xA;            $ChangeType = $null&#xD;&#xA;            &#xD;&#xA;            $Propery = $ObjHist.ObjectHistory.Values.ClassHistory.PropertyChanges.Key&#xD;&#xA;            $Value = $ObjHist.ObjectHistory.Values.ClassHistory.PropertyChanges.Value&#xD;&#xA;            $ChangeType = $ObjHist.ObjectHistory.Values.ClassHistory.PropertyChanges.ChangeType&#xD;&#xA;            &#xD;&#xA;            if ($ChangeType -eq &quot;Insert&quot;)&#xD;&#xA;            {&#xD;&#xA;             try&#xD;&#xA;             {&#xD;&#xA;              Set-SCSMObject -SMObject $NetDevExists -Property $Propery -Value $Value&#xD;&#xA;             }&#xD;&#xA;             catch&#xD;&#xA;             {&#xD;&#xA;              Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object: $NetDevExists For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;             }&#xD;&#xA;            }&#xD;&#xA;            elseIf ($ChangeType -eq &quot;Modify&quot;)&#xD;&#xA;            {&#xD;&#xA;             try&#xD;&#xA;             {&#xD;&#xA;              Set-SCSMObject -SMObject $NetDevExists -Property $Propery -Value $Value&#xD;&#xA;             }&#xD;&#xA;             catch&#xD;&#xA;             {&#xD;&#xA;              Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object: $NetDevExists For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;             }&#xD;&#xA;            }&#xD;&#xA;            elseif ($ChangeType -eq &quot;Delete&quot;)&#xD;&#xA;            {&#xD;&#xA;             try&#xD;&#xA;             {&#xD;&#xA;              Set-SCSMObject -SMObject $NetDevExists -Property $Propery -Value &quot;&quot;&#xD;&#xA;             }&#xD;&#xA;             catch&#xD;&#xA;             {&#xD;&#xA;              Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object: $NetDevExists For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;             }&#xD;&#xA;            }&#xD;&#xA;         }&#xD;&#xA;        }&#xD;&#xA;        elseif ($RelationshipChanges)&#xD;&#xA;        {&#xD;&#xA;         $SourceObj = $null&#xD;&#xA;         $TargetObj = $null&#xD;&#xA;         $RelationshipClassObj = $null&#xD;&#xA;         $RChangeType = $null&#xD;&#xA;         &#xD;&#xA;         $SourceObj = $ObjHist.ObjectHistory.Values.RelationshipHistory.SourceObjectId&#xD;&#xA;         $TargetObj = $ObjHist.ObjectHistory.Values.RelationshipHistory.TargetObjectId&#xD;&#xA;         $RelationshipClassObj = $ObjHist.ObjectHistory.Values.RelationshipHistory.ManagementPackRelationshipTypeId&#xD;&#xA;         $RChangeType = $ObjHist.ObjectHistory.Values.RelationshipHistory.ChangeType&#xD;&#xA;         &#xD;&#xA;         $Src = $null&#xD;&#xA;         $Tar = $null&#xD;&#xA;         $Rel = $null&#xD;&#xA;         &#xD;&#xA;         $Src = Get-SCSMObject -Id $SourceObj&#xD;&#xA;         $Tar = Get-SCSMObject -Id $TargetObj&#xD;&#xA;         $Rel = Get-SCSMRelationshipClass -id = $RelationshipClassObj&#xD;&#xA;         &#xD;&#xA;         if ($RChangeType -eq &quot;Insert&quot;)&#xD;&#xA;         {&#xD;&#xA;          try&#xD;&#xA;          {&#xD;&#xA;           New-SCSMRelationshipObject -Source $Src -Target $Tar -Relationship $Rel -Bulk&#xD;&#xA;          }&#xD;&#xA;          catch&#xD;&#xA;          {&#xD;&#xA;           Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object Relationships:$NetDevExists For Relationship:$Rel with Source:$Src and Target:$Tar for Change Type:$ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;          }&#xD;&#xA;         }&#xD;&#xA;         elseIf ($RChangeType -eq &quot;Modify&quot;)&#xD;&#xA;         {&#xD;&#xA;          try&#xD;&#xA;          {&#xD;&#xA;           New-SCSMRelationshipObject -Source $Src -Target $Tar -Relationship $Rel -Bulk&#xD;&#xA;          }&#xD;&#xA;          catch&#xD;&#xA;          {&#xD;&#xA;           Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object Relationships:$NetDevExists For Relationship:$Rel with Source:$Src and Target:$Tar for Change Type:$ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;          }&#xD;&#xA;         }&#xD;&#xA;         elseif ($RChangeType -eq &quot;Delete&quot;)&#xD;&#xA;         {&#xD;&#xA;          try&#xD;&#xA;          {&#xD;&#xA;           Get-SCSMRelationshipObject -BySource $Src | ? { ($_.RelationshipClassId -eq $Rel) } | Remove-SCSMRelationshipObject&#xD;&#xA;          }&#xD;&#xA;          catch&#xD;&#xA;          {&#xD;&#xA;           Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object Relationships:$NetDevExists For Relationship:$Rel with Source:$Src and Target:$Tar for Change Type:$ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;          }&#xD;&#xA;         }&#xD;&#xA;         &#xD;&#xA;         &#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;       }&#xD;&#xA;      }&#xD;&#xA;      Set-SCSMObject -SMObject $NetDevExists -Property &quot;LastModifiedSync&quot; -Value $LastModified&#xD;&#xA;     }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;   }&#xD;&#xA;  }&#xD;&#xA;  Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId 10000 -Category 0 -EntryType Information -Message &quot;Hardware Connector Finished Process of Network Objects&quot;&#xD;&#xA;} &#xD;&#xA;&#xD;&#xA;&#xD;&#xA; #Process Printers&#xD;&#xA; Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId 10000 -Category 0 -EntryType Information -Message &quot;Hardware Connector Start Processing of Printer Objects&quot;&#xD;&#xA;&#xD;&#xA; if ($PrinterClass)&#xD;&#xA; {&#xD;&#xA;  $PrintDs = Get-SCSMObject -Class $PrinterClass&#xD;&#xA;  foreach ($PrintD in $PrintDs)&#xD;&#xA;  {&#xD;&#xA;   try&#xD;&#xA;    {&#xD;&#xA;    $pAssetsRel = (Get-SCSMRelationshipObject -ByTarget $PrintD | ? {$_.RelationshipId -eq $($HAssetRefPrinterRelCl.id)}).SourceObject&#xD;&#xA;    }&#xD;&#xA;   finally&#xD;&#xA;    {&#xD;&#xA;    $pAssetTag = $null&#xD;&#xA;    $PrintDUser= $null&#xD;&#xA;    $PrintDAsset =$null&#xD;&#xA;    if($PrintD.SerialNumber)&#xD;&#xA;     {&#xD;&#xA;     $pAssetTag = &quot;$PreFix&quot; + $($PrintD.SerialNumber)&#xD;&#xA;     }&#xD;&#xA;    else{$pAssetTag = &quot;NOT PRESENT&quot;}&#xD;&#xA;    &#xD;&#xA;    if(!$pAssetsRel)&#xD;&#xA;     {&#xD;&#xA;     $pAssetRelHashTable=@{&#xD;&#xA;          &quot;AssetName&quot; = $($PrintD.DisplayName);&#xD;&#xA;                &quot;DisplayName&quot; = $($PrintD.DisplayName);&#xD;&#xA;                &quot;Type&quot; = $PrinterAssetEnumId;&#xD;&#xA;                &quot;ReadinessStatus&quot; = $ReadinessStatusEnumId;&#xD;&#xA;                &quot;AssetTag&quot; = $pAssetTag;&#xD;&#xA;          &quot;AssetStatus&quot; = $AssetStatusEnumDeployedId;&#xD;&#xA;          }&#xD;&#xA;     $PrintDAsset= New-SCSMObject -Class $HardwareAssetClass -PropertyHashtable $pAssetRelHashTable -PassThru&#xD;&#xA;     New-SCSMRelationshipObject -Source $PrintDAsset -Target $PrintD -Relationship $HAssetRefPrinterRelCl -Bulk&#xD;&#xA;     $PrintDUser= (Get-SCSMRelationshipObject -BySource $PrintD -ErrorAction SilentlyContinue | ? {$_.RelationshipId -eq $($PrinterHasUserClass.Id)}).TargetObject&#xD;&#xA;      if($PrintDUser)&#xD;&#xA;       {&#xD;&#xA;       New-SCSMRelationshipObject -Source $PrintDAsset -Target $PrintDUser -Relationship $HardwareAssetHasUser -Bulk&#xD;&#xA;       }&#xD;&#xA;     &#xD;&#xA;     &#xD;&#xA;     }&#xD;&#xA;     &#xD;&#xA;    }&#xD;&#xA;   &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA; &#xD;&#xA; &#xD;&#xA; &#xD;&#xA; }&#xD;&#xA; &#xD;&#xA; $Printers = Get-SCSMObject -Class $SystemPrinterClass -Filter &quot;ObjectStatus -ne $PendingDeleteEnumId&quot;&#xD;&#xA; if ($Printers)&#xD;&#xA; {&#xD;&#xA;  foreach ($Printer in $Printers)&#xD;&#xA;  {&#xD;&#xA;   $PrinterExists = Get-SCSMObject -Class $PrinterClass -Filter &quot;DevId -eq $($Printer.Id)&quot;&#xD;&#xA;   if (!$PrinterExists)&#xD;&#xA;   {&#xD;&#xA;    [datetime]$LastModified = $Printer.LastModified&#xD;&#xA;    [string]$PObjHash = $($Printer.DisplayName) + $($Printer.PrintNetworkAddress) + $($LastModified.ToString())&#xD;&#xA;    $ObjHashPrinter = Get-StringHash -String $PObjHash&#xD;&#xA;    &#xD;&#xA;    $PrinterHashTable = @{&#xD;&#xA;     &quot;DisplayName&quot; = $($Printer.DisplayName);&#xD;&#xA;     &quot;PrinterName&quot; = $($Printer.DisplayName);&#xD;&#xA;     &quot;IPAddress&quot; = $($Printer.PrintNetworkAddress);&#xD;&#xA;     &quot;SpeedPPS&quot; = $($Printer.PrintPagesPerMinute);&#xD;&#xA;     &quot;LastDiscoveredDate&quot; = (Get-Date);&#xD;&#xA;     &quot;ObjectHash&quot; = $ObjHashPrinter;&#xD;&#xA;     &quot;Status&quot; = $ActiveDeviceStatusEnumId;&#xD;&#xA;     &quot;LastModifiedSync&quot; = $LastModified;&#xD;&#xA;     &quot;DevId&quot; = $($Printer.Id);&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    $NewPrinter = New-SCSMObject -Class $PrinterClass -PropertyHashtable $PrinterHashTable -PassThru&#xD;&#xA;    New-SCSMRelationshipObject -Relationship $ConfigItemRelCl -Source $NewPrinter -Target $Printer -Bulk&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    If ($Printer.ManagedBy)&#xD;&#xA;    {&#xD;&#xA;     $Owner = Get-SCSMObject -Class $UserClass -Filter &quot;DisplayName -eq $($Printer.ManagedBy)&quot;&#xD;&#xA;     if ($Owner)&#xD;&#xA;     {&#xD;&#xA;      $MustRelateOwner = New-SCSMRelationshipObject -Source $NewPrinter -Target $Owner -Relationship $PrinterHasUserClass -Bulk&#xD;&#xA;     }&#xD;&#xA;     &#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    $PDevAssetEx = Get-SCSMObject -Class $HardwareAssetClass -Filter &quot;DisplayName -eq $($NewPrinter.DisplayName)&quot;&#xD;&#xA;    if (!$PDevAssetEx)&#xD;&#xA;    {&#xD;&#xA;     $PAssetHashTable = @{&#xD;&#xA;      &quot;AssetName&quot; = $($NewPrinter.DisplayName);&#xD;&#xA;      &quot;DisplayName&quot; = $($NewPrinter.DisplayName);&#xD;&#xA;      &quot;Type&quot; = $PrinterAssetEnumId;&#xD;&#xA;      &quot;ReadinessStatus&quot; = $ReadinessStatusEnumId;&#xD;&#xA;      &quot;AssetTag&quot; = $AssetTag;&#xD;&#xA;     }&#xD;&#xA;     $PDevAsset = New-SCSMObject -Class $HardwareAssetClass -PropertyHashtable $PAssetHashTable -PassThru&#xD;&#xA;     New-SCSMRelationshipObject -Relationship $HAssetRefPrinterRelCl -Source $PDevAsset -Target $NewPrinter -Bulk&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;   }&#xD;&#xA;   else&#xD;&#xA;   {&#xD;&#xA;    $PObjLast = Get-Date -Date $($PrinterExists.LastModifiedSync) -Format &quot;yyyy-MM-dd hh:mm&quot;&#xD;&#xA;    $PrtDvLast = Get-Date -Date $($Printer.LastModified) -Format &quot;yyyy-MM-dd hh:mm&quot;&#xD;&#xA;    [DateTime]$LastModified= $Printer.LastModified&#xD;&#xA;    if ($PObjLast -ne $PrtDvLast)&#xD;&#xA;    {&#xD;&#xA;     $ObjHistory = $null&#xD;&#xA;     $emg = $null&#xD;&#xA;     $emg = New-Object Microsoft.EnterpriseManagement.EnterpriseManagementGroup &quot;localhost&quot;&#xD;&#xA;     $ObjHistory = $emg.EntityObjects.GetObjectHistoryTransactions($Printer) | ? { $_.DateOccurred -gt $($PrinterExists.LastModifiedSync) }&#xD;&#xA;     foreach ($ObjHist in $ObjHistory)&#xD;&#xA;     {&#xD;&#xA;      try&#xD;&#xA;      {&#xD;&#xA;       $PropertyChanges = $null&#xD;&#xA;       $RelationshipChanges = $null&#xD;&#xA;       &#xD;&#xA;       $PropertyChanges = $ObjHist.ObjectHistory.Values.ClassHistory.PropertyChanges&#xD;&#xA;       $RelationshipChanges = $ObjHist.ObjectHistory.Values.ClassHistory.RelationshipChanges&#xD;&#xA;      }&#xD;&#xA;      Catch&#xD;&#xA;      {&#xD;&#xA;       $PropertyChanges = $null&#xD;&#xA;       $RelationshipChanges = $null&#xD;&#xA;      }&#xD;&#xA;      Finally&#xD;&#xA;      {&#xD;&#xA;       if ($PropertyChanges)&#xD;&#xA;       {&#xD;&#xA;        if ($PropertyChanges.Count -gt 1)&#xD;&#xA;        {&#xD;&#xA;         foreach ($PropertyChange in $PropertyChanges.Values.Second)&#xD;&#xA;         {&#xD;&#xA;          $Propery = $null&#xD;&#xA;          $Value = $null&#xD;&#xA;          $ChangeType = $null&#xD;&#xA;          &#xD;&#xA;          $Propery = $PropertyChange.Type.Name&#xD;&#xA;          $Value = $PropertyChange.Value&#xD;&#xA;          $ChangeType = $ObjHist.ObjectHistory.Values.ClassHistory.ChangeType&#xD;&#xA;          &#xD;&#xA;          if ($ChangeType -eq &quot;Insert&quot;)&#xD;&#xA;          {&#xD;&#xA;           try&#xD;&#xA;           {&#xD;&#xA;            Set-SCSMObject -SMObject $PrinterExists -Property $Propery -Value $Value&#xD;&#xA;           }&#xD;&#xA;           catch&#xD;&#xA;           {&#xD;&#xA;            Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object: $PrinterExists For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;           }&#xD;&#xA;          }&#xD;&#xA;          elseIf ($ChangeType -eq &quot;Modify&quot;)&#xD;&#xA;          {&#xD;&#xA;           try&#xD;&#xA;           {&#xD;&#xA;            Set-SCSMObject -SMObject $PrinterExists -Property $Propery -Value $Value&#xD;&#xA;           }&#xD;&#xA;           catch&#xD;&#xA;           {&#xD;&#xA;            Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object: $PrinterExists For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;           }&#xD;&#xA;          }&#xD;&#xA;          elseif ($ChangeType -eq &quot;Delete&quot;)&#xD;&#xA;          {&#xD;&#xA;           try&#xD;&#xA;           {&#xD;&#xA;            Set-SCSMObject -SMObject $PrinterExists -Property $Propery -Value &quot; &quot;&#xD;&#xA;           }&#xD;&#xA;           catch&#xD;&#xA;           {&#xD;&#xA;            Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object: $PrinterExists For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;           }&#xD;&#xA;          }&#xD;&#xA;         }&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;         $Propery = $null&#xD;&#xA;         $Value = $null&#xD;&#xA;         $ChangeType = $null&#xD;&#xA;         &#xD;&#xA;         $Propery = $ObjHist.ObjectHistory.Values.ClassHistory.PropertyChanges.Key&#xD;&#xA;         $Value = $ObjHist.ObjectHistory.Values.ClassHistory.PropertyChanges.Value&#xD;&#xA;         $ChangeType = $ObjHist.ObjectHistory.Values.ClassHistory.PropertyChanges.ChangeType&#xD;&#xA;         &#xD;&#xA;         if ($ChangeType -eq &quot;Insert&quot;)&#xD;&#xA;         {&#xD;&#xA;          try&#xD;&#xA;          {&#xD;&#xA;           Set-SCSMObject -SMObject $PrinterExists -Property $Propery -Value $Value&#xD;&#xA;          }&#xD;&#xA;          catch&#xD;&#xA;          {&#xD;&#xA;           Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object: $PrinterExists For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;          }&#xD;&#xA;         }&#xD;&#xA;         elseIf ($ChangeType -eq &quot;Modify&quot;)&#xD;&#xA;         {&#xD;&#xA;          try&#xD;&#xA;          {&#xD;&#xA;           Set-SCSMObject -SMObject $PrinterExists -Property $Propery -Value $Value&#xD;&#xA;          }&#xD;&#xA;          catch&#xD;&#xA;          {&#xD;&#xA;           Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object: $PrinterExists For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;          }&#xD;&#xA;         }&#xD;&#xA;         elseif ($ChangeType -eq &quot;Delete&quot;)&#xD;&#xA;         {&#xD;&#xA;          try&#xD;&#xA;          {&#xD;&#xA;           Set-SCSMObject -SMObject $PrinterExists -Property $Propery -Value &quot;&quot;&#xD;&#xA;          }&#xD;&#xA;          catch&#xD;&#xA;          {&#xD;&#xA;           Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object: $PrinterExists For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;          }&#xD;&#xA;         }&#xD;&#xA;         &#xD;&#xA;        }&#xD;&#xA;       }&#xD;&#xA;       elseif ($RelationshipChanges)&#xD;&#xA;       {&#xD;&#xA;        $SourceObj = $null&#xD;&#xA;        $TargetObj = $null&#xD;&#xA;        $RelationshipClassObj = $null&#xD;&#xA;        $RChangeType = $null&#xD;&#xA;        &#xD;&#xA;        $SourceObj = $ObjHist.ObjectHistory.Values.RelationshipHistory.SourceObjectId&#xD;&#xA;        $TargetObj = $ObjHist.ObjectHistory.Values.RelationshipHistory.TargetObjectId&#xD;&#xA;        $RelationshipClassObj = $ObjHist.ObjectHistory.Values.RelationshipHistory.ManagementPackRelationshipTypeId&#xD;&#xA;        $RChangeType = $ObjHist.ObjectHistory.Values.RelationshipHistory.ChangeType&#xD;&#xA;        &#xD;&#xA;        $Src = $null&#xD;&#xA;        $Tar = $null&#xD;&#xA;        $Rel = $null&#xD;&#xA;        &#xD;&#xA;        $Src = Get-SCSMObject -Id $SourceObj&#xD;&#xA;        $Tar = Get-SCSMObject -Id $TargetObj&#xD;&#xA;        $Rel = Get-SCSMRelationshipClass -id = $RelationshipClassObj&#xD;&#xA;        &#xD;&#xA;        if ($RChangeType -eq &quot;Insert&quot;)&#xD;&#xA;        {&#xD;&#xA;         try&#xD;&#xA;         {&#xD;&#xA;          New-SCSMRelationshipObject -Source $Src -Target $Tar -Relationship $Rel -Bulk&#xD;&#xA;         }&#xD;&#xA;         catch&#xD;&#xA;         {&#xD;&#xA;          Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object Relationships:$PrinterExists For Relationship:$Rel with Source:$Src and Target:$Tar for Change Type:$ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;         }&#xD;&#xA;        }&#xD;&#xA;        elseIf ($RChangeType -eq &quot;Modify&quot;)&#xD;&#xA;        {&#xD;&#xA;         try&#xD;&#xA;         {&#xD;&#xA;          New-SCSMRelationshipObject -Source $Src -Target $Tar -Relationship $Rel -Bulk&#xD;&#xA;         }&#xD;&#xA;         catch&#xD;&#xA;         {&#xD;&#xA;          Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object Relationships:$PrinterExists For Relationship:$Rel with Source:$Src and Target:$Tar for Change Type:$ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;         }&#xD;&#xA;        }&#xD;&#xA;        elseif ($RChangeType -eq &quot;Delete&quot;)&#xD;&#xA;        {&#xD;&#xA;         try&#xD;&#xA;         {&#xD;&#xA;          Get-SCSMRelationshipObject -BySource $Src | ? { ($_.RelationshipClassId -eq $Rel) } | Remove-SCSMRelationshipObject&#xD;&#xA;         }&#xD;&#xA;         catch&#xD;&#xA;         {&#xD;&#xA;          Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object Relationships:$PrinterExists For Relationship:$Rel with Source:$Src and Target:$Tar for Change Type:$ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;         }&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;       }&#xD;&#xA;       &#xD;&#xA;      }&#xD;&#xA;     }&#xD;&#xA;     Set-SCSMObject -SMObject $PrinterExists -Property &quot;LastModifiedSync&quot; -Value $LastModified&#xD;&#xA;    }&#xD;&#xA;   }&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA; }&#xD;&#xA; Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId 10000 -Category 0 -EntryType Information -Message &quot;Hardware Connector Finished Process of Printer Objects&quot;&#xD;&#xA; &#xD;&#xA; #Process Mobile Devices&#xD;&#xA; Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId 10000 -Category 0 -EntryType Information -Message &quot;Hardware Connector Start Processing of Mobile Objects&quot;&#xD;&#xA; if($MobileDeviceClass)&#xD;&#xA; {&#xD;&#xA; &#xD;&#xA; $MobDs = Get-SCSMObject -Class $MobileDeviceClass&#xD;&#xA;  foreach ($MobD in $MobDs)&#xD;&#xA;  {&#xD;&#xA;   try&#xD;&#xA;    {&#xD;&#xA;    $mbAssetsRel = (Get-SCSMRelationshipObject -ByTarget $MobD | ? {$_.RelationshipId -eq $($HAssetRefMobRelCl.id)}).SourceObject&#xD;&#xA;    }&#xD;&#xA;   finally&#xD;&#xA;    {&#xD;&#xA;    $mbAssetTag = $null&#xD;&#xA;    $MobDUser= $null&#xD;&#xA;    $MobDAsset =$null&#xD;&#xA;    if($MobD.SerialNumber)&#xD;&#xA;     {&#xD;&#xA;     $mbAssetTag = &quot;$PreFix&quot; + $($MobD.SerialNumber)&#xD;&#xA;     }&#xD;&#xA;    else{$mbAssetTag = &quot;NOT PRESENT&quot;}&#xD;&#xA;    &#xD;&#xA;    if(!$mbAssetsRel)&#xD;&#xA;     {&#xD;&#xA;     $mbAssetRelHashTable=@{&#xD;&#xA;          &quot;AssetName&quot; = $($MobD.DisplayName);&#xD;&#xA;                &quot;DisplayName&quot; = $($MobD.DisplayName);&#xD;&#xA;                &quot;Type&quot; = $MobDevAssetTypeId;&#xD;&#xA;                &quot;ReadinessStatus&quot; = $ReadinessStatusEnumId;&#xD;&#xA;                &quot;AssetTag&quot; = $mbAssetTag;&#xD;&#xA;          &quot;AssetStatus&quot; = $AssetStatusEnumDeployedId;&#xD;&#xA;          }&#xD;&#xA;     $MobDAsset= New-SCSMObject -Class $HardwareAssetClass -PropertyHashtable $mbAssetRelHashTable -PassThru&#xD;&#xA;     New-SCSMRelationshipObject -Source $MobDAsset -Target $MobD -Relationship $HAssetRefMobRelCl -Bulk&#xD;&#xA;     $MobDUser= (Get-SCSMRelationshipObject -BySource $MobD -ErrorAction SilentlyContinue | ? {$_.RelationshipId -eq $($MobileDevHasUsr.Id)}).TargetObject&#xD;&#xA;      if($MobDUser)&#xD;&#xA;       {&#xD;&#xA;       New-SCSMRelationshipObject -Source $MobDAsset -Target $MobDUser -Relationship $HardwareAssetHasUser -Bulk&#xD;&#xA;       }&#xD;&#xA;     }&#xD;&#xA;     &#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;  }&#xD;&#xA; &#xD;&#xA; }&#xD;&#xA; &#xD;&#xA; $MobileDevices = Get-SCSMObject -Class $SystemMobileClass -Filter &quot;ObjectStatus -ne $PendingDeleteEnumId&quot;&#xD;&#xA; if ($MobileDevices)&#xD;&#xA; {&#xD;&#xA;  foreach ($MobileDevice in $MobileDevices)&#xD;&#xA;  {&#xD;&#xA;   $MobileDeviceExists = Get-SCSMObject -Class $MobileDeviceClass -Filter &quot;DevId -eq $($MobileDevice.Id)&quot;&#xD;&#xA;   [datetime]$LastModified = $MobileDevice.LastModified&#xD;&#xA;   [string]$MObjHash = $($MobileDevice.DeviceImei) + $($MobileDevice.DevicePhoneNumber) + $($MobileDevice.FirmwareVersion) + $($MobileDevice.DeviceMobileOperator) + $($MobileDevice.DeviceOS) + $($LastModified.ToString())&#xD;&#xA;   $ObjHashMobile = Get-StringHash -String $MPObjHash&#xD;&#xA;   if (!$MobileDeviceExists)&#xD;&#xA;   {&#xD;&#xA;    switch -wildcard ($MobileDevice.DeviceOS)&#xD;&#xA;    {&#xD;&#xA;     &quot;*Windows*&quot; { $DiplayNameP = &quot;Windows Device&quot; }&#xD;&#xA;     &quot;*Android*&quot; { $DiplayNameP = &quot;Android Device&quot; }&#xD;&#xA;     &quot;*IOS*&quot; { $DiplayNameP = &quot;IOS Device&quot; }&#xD;&#xA;     default { $DiplayNameP = &quot;Other Mobile Device&quot; }&#xD;&#xA;     &#xD;&#xA;    }&#xD;&#xA;    switch -wildcard ($MobileDevice.DeviceOS)&#xD;&#xA;    {&#xD;&#xA;     &quot;*Windows*&quot; { $MobileType = $WindowsMobileEnumId }&#xD;&#xA;     &quot;*Android*&quot; { $MobileType = $AndroidMobileEnumId }&#xD;&#xA;     &quot;*IOS*&quot; { $MobileType = $IoSMobileEnumId }&#xD;&#xA;     default { $MobileType = $OtherMobileEnumId }&#xD;&#xA;     &#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    $MobileHashTable = @{&#xD;&#xA;     &quot;DisplayName&quot; = $DiplayNameP;&#xD;&#xA;     &quot;DeviceName&quot; = $DiplayNameP;&#xD;&#xA;     &quot;DeviceImei&quot; = $($MobileDevice.DeviceImei);&#xD;&#xA;     &quot;DeviceOS&quot; = $($MobileDevice.DeviceOS);&#xD;&#xA;     &quot;OSType&quot; = $MobileType;&#xD;&#xA;     &quot;ProcessorType&quot; = $($MobileDevice.ProcessorType);&#xD;&#xA;     &quot;FirmwareVersion&quot; = $($MobileDevice.FirmwareVersion);&#xD;&#xA;     &quot;HardwareVersion&quot; = $($MobileDevice.HardwareVersion);&#xD;&#xA;     &quot;OEM&quot; = $($MobileDevice.OEM);&#xD;&#xA;     &quot;HorizontalResolution&quot; = $($MobileDevice.HorizontalResolution);&#xD;&#xA;     &quot;VerticalResolution&quot; = $($MobileDevice.VerticalResolution);&#xD;&#xA;     &quot;DeviceHash&quot; = $ObjHashMobile;&#xD;&#xA;     &quot;LastDiscoveredDate&quot; = (Get-Date);&#xD;&#xA;     &quot;Status&quot; = $ActiveDeviceStatusEnumId;&#xD;&#xA;     &quot;DevicePhoneNumber&quot; = $($MobileDevice.DevicePhoneNumber);&#xD;&#xA;     &quot;DeviceMobileOperator&quot; = $($MobileDevice.DeviceMobileOperator);&#xD;&#xA;     &quot;ExchangeServer&quot; = $($MobileDevice.ExchangeServer);&#xD;&#xA;     &quot;LastModifiedSync&quot; = $LastModified;&#xD;&#xA;     &quot;DevId&quot; = $($MobileDevice.Id);&#xD;&#xA;     &#xD;&#xA;    }&#xD;&#xA;    $NewMobileDevice = New-SCSMObject -Class $MobileDeviceClass -PropertyHashtable $MobileHashTable -PassThru&#xD;&#xA;    New-SCSMRelationshipObject -Relationship $ConfigItemRelCl -Source $NewMobileDevice -Target $MobileDevice -Bulk&#xD;&#xA;    &#xD;&#xA;    if ($MobileDevice.DeviceManufacturer)&#xD;&#xA;    {&#xD;&#xA;     $DNewMan = $null&#xD;&#xA;     $DNewMan = Get-SCSMObject -Class $DevManufacturer -Filter &quot;DisplayName -eq $($MobileDevice.DeviceManufacturer)&quot;&#xD;&#xA;     if ($DNewMan)&#xD;&#xA;     {&#xD;&#xA;      $DRelMan = New-SCSMRelationshipObject -Source $NewMobileDevice -Target $DNewMan -Relationship $MobDevHasManufacturer -Bulk&#xD;&#xA;      &#xD;&#xA;     }&#xD;&#xA;     else&#xD;&#xA;     {&#xD;&#xA;      &#xD;&#xA;      $MobDevHashTable = @{&#xD;&#xA;       &#xD;&#xA;       &quot;DisplayName&quot; = $($MobileDevice.DeviceManufacturer);&#xD;&#xA;       &quot;ManufacturerName&quot; = $($MobileDevice.DeviceManufacturer);&#xD;&#xA;       &#xD;&#xA;      }&#xD;&#xA;      &#xD;&#xA;      $DNewMan = New-SCSMObject -Class $DevManufacturer -PropertyHashtable $MobDevHashTable -PassThru&#xD;&#xA;      $DRelMan = New-SCSMRelationshipObject -Source $NewMobileDevice -Target $DNewMan -Relationship $MobDevHasManufacturer -Bulk&#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;     }&#xD;&#xA;    }&#xD;&#xA;    if ($MobileDevice.DeviceModel)&#xD;&#xA;    {&#xD;&#xA;     $DModEx = $null&#xD;&#xA;     $DModEx = Get-SCSMObject -Class $DevModel -Filter &quot;DisplayName -eq $($MobileDevice.DeviceModel)&quot;&#xD;&#xA;     if ($DModEx)&#xD;&#xA;     {&#xD;&#xA;      $DRelModel = New-SCSMRelationshipObject -Source $NewMobileDevice -Target $DModEx -Relationship $MobDevHasModel -Bulk&#xD;&#xA;      if ($DNewMan)&#xD;&#xA;      {&#xD;&#xA;       $DRelDevMan = New-SCSMRelationshipObject -Source $DModEx -Target $DNewMan -Relationship $ModelHasManufacturerRelCl -Bulk&#xD;&#xA;      }&#xD;&#xA;     }&#xD;&#xA;     else&#xD;&#xA;     {&#xD;&#xA;      &#xD;&#xA;      $MobileModelHashTable = @{&#xD;&#xA;       &#xD;&#xA;       &quot;DisplayName&quot; = $($MobileDevice.DeviceModel);&#xD;&#xA;       &quot;ModelName&quot; = $($MobileDevice.DeviceModel);&#xD;&#xA;       &#xD;&#xA;      }&#xD;&#xA;      &#xD;&#xA;      $DModEx = New-SCSMObject -Class $DevModel -PropertyHashtable $MobileModelHashTable -PassThru&#xD;&#xA;      if ($MobileDevice.DeviceModel)&#xD;&#xA;      {&#xD;&#xA;       $Key = ($HardwareConnectorAdminSettingObj.Searchkey)&#xD;&#xA;       $env:MS_BingSearch_API_key = &quot;$Key&quot;&#xD;&#xA;       $Uri = 'https://api.cognitive.microsoft.com/bing/v5.0/search?q=' + $($MobileDevice.DeviceModel)&#xD;&#xA;       $Result = Invoke-RestMethod -Uri $Uri -Method 'GET' -ContentType 'application/json' -Headers @{ 'Ocp-Apim-Subscription-Key' = $env:MS_BingSearch_API_key }&#xD;&#xA;       $Url = $Result.webPages.value[0].displayUrl&#xD;&#xA;       $ModelUrl = &quot;http://&quot; + $Url&#xD;&#xA;       &#xD;&#xA;       &#xD;&#xA;       if ($ModelUrl)&#xD;&#xA;       {&#xD;&#xA;        Set-SCSMObject -SMObject $DModEx -Property &quot;ModelWebSite&quot; -Value $ModelUrl&#xD;&#xA;       }&#xD;&#xA;      }&#xD;&#xA;      $RelModel = New-SCSMRelationshipObject -Source $NewNetDevice -Target $ModEx -Relationship $NetDevModelRel -Bulk&#xD;&#xA;      $RelDevMan = New-SCSMRelationshipObject -Source $ModEx -Target $NewMan -Relationship $ModelHasManufacturerRelCl -Bulk&#xD;&#xA;      &#xD;&#xA;     }&#xD;&#xA;     $DRelModel = New-SCSMRelationshipObject -Source $NewMobileDevice -Target $DModEx -Relationship $MobDevHasModel -Bulk&#xD;&#xA;     if ($DNewMan)&#xD;&#xA;     {&#xD;&#xA;      $DRelDevMan = New-SCSMRelationshipObject -Source $DModEx -Target $DNewMan -Relationship $ModelHasManufacturerRelCl -Bulk&#xD;&#xA;     }&#xD;&#xA;     &#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    $MDevAssetEx = Get-SCSMObject -Class $HardwareAssetClass -Filter &quot;DisplayName -eq $DiplayNameP&quot;&#xD;&#xA;    if (!$MDevAssetEx)&#xD;&#xA;    {&#xD;&#xA;     $MAssetHashTable = @{&#xD;&#xA;      &quot;AssetName&quot; = $DiplayNameP;&#xD;&#xA;      &quot;DisplayName&quot; = $DiplayNameP;&#xD;&#xA;      &quot;Type&quot; = $AssetMobileEnumId;&#xD;&#xA;      &quot;ReadinessStatus&quot; = $ReadinessStatusEnumId;&#xD;&#xA;      &#xD;&#xA;     }&#xD;&#xA;     $MDevAsset = New-SCSMObject -Class $HardwareAssetClass -PropertyHashtable $MAssetHashTable -PassThru&#xD;&#xA;     New-SCSMRelationshipObject -Relationship $HAssetRefMobRelCl -Source $MDevAsset -Target $NewMobileDevice -Bulk&#xD;&#xA;    }&#xD;&#xA;   }&#xD;&#xA;   else&#xD;&#xA;   {&#xD;&#xA;    [DateTime]$LastModified= $MobileDevice.LastModified&#xD;&#xA;    $MObjLast = Get-Date -Date $($MobileDeviceExists.LastModifiedSync) -Format &quot;yyyy-MM-dd hh:mm&quot;&#xD;&#xA;    $MobDvLast = Get-Date -Date $($MobileDevice.LastModified) -Format &quot;yyyy-MM-dd hh:mm&quot;&#xD;&#xA;    if ($MObjLast -ne $MobDvLast)&#xD;&#xA;    {&#xD;&#xA;     $ObjHistory = $null&#xD;&#xA;     $emg = $null&#xD;&#xA;     $emg = New-Object Microsoft.EnterpriseManagement.EnterpriseManagementGroup &quot;localhost&quot;&#xD;&#xA;     $ObjHistory = $emg.EntityObjects.GetObjectHistoryTransactions($MobileDevice) | ? { $_.DateOccurred -gt $($MobileDeviceExists.LastModifiedSync) }&#xD;&#xA;     foreach ($ObjHist in $ObjHistory)&#xD;&#xA;     {&#xD;&#xA;      try&#xD;&#xA;      {&#xD;&#xA;       $PropertyChanges = $null&#xD;&#xA;       $RelationshipChanges = $null&#xD;&#xA;       &#xD;&#xA;       $PropertyChanges = $ObjHist.ObjectHistory.Values.ClassHistory.PropertyChanges&#xD;&#xA;       $RelationshipChanges = $ObjHist.ObjectHistory.Values.ClassHistory.RelationshipChanges&#xD;&#xA;      }&#xD;&#xA;      Catch&#xD;&#xA;      {&#xD;&#xA;       $PropertyChanges = $null&#xD;&#xA;       $RelationshipChanges = $null&#xD;&#xA;      }&#xD;&#xA;      Finally&#xD;&#xA;      {&#xD;&#xA;       if ($PropertyChanges)&#xD;&#xA;       {&#xD;&#xA;        if ($PropertyChanges.Count -gt 1)&#xD;&#xA;        {&#xD;&#xA;         foreach ($PropertyChange in $PropertyChanges.Values.Second)&#xD;&#xA;         {&#xD;&#xA;          $Propery = $null&#xD;&#xA;          $Value = $null&#xD;&#xA;          $ChangeType = $null&#xD;&#xA;          &#xD;&#xA;          $Propery = $PropertyChange.Type.Name&#xD;&#xA;          $Value = $PropertyChange.Value&#xD;&#xA;          $ChangeType = $ObjHist.ObjectHistory.Values.ClassHistory.ChangeType&#xD;&#xA;          &#xD;&#xA;          if ($ChangeType -eq &quot;Insert&quot;)&#xD;&#xA;          {&#xD;&#xA;           try&#xD;&#xA;           {&#xD;&#xA;            Set-SCSMObject -SMObject $MobileDeviceExists -Property $Propery -Value $Value&#xD;&#xA;           }&#xD;&#xA;           catch&#xD;&#xA;           {&#xD;&#xA;            Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object: $MobileDeviceExists For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;           }&#xD;&#xA;          }&#xD;&#xA;          elseIf ($ChangeType -eq &quot;Modify&quot;)&#xD;&#xA;          {&#xD;&#xA;           try&#xD;&#xA;           {&#xD;&#xA;            Set-SCSMObject -SMObject $MobileDeviceExists -Property $Propery -Value $Value&#xD;&#xA;           }&#xD;&#xA;           catch&#xD;&#xA;           {&#xD;&#xA;            Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object: $MobileDeviceExists For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;           }&#xD;&#xA;          }&#xD;&#xA;          elseif ($ChangeType -eq &quot;Delete&quot;)&#xD;&#xA;          {&#xD;&#xA;           try&#xD;&#xA;           {&#xD;&#xA;            Set-SCSMObject -SMObject $MobileDeviceExists -Property $Propery -Value &quot; &quot;&#xD;&#xA;           }&#xD;&#xA;           catch&#xD;&#xA;           {&#xD;&#xA;            Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object: $MobileDeviceExists For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;           }&#xD;&#xA;          }&#xD;&#xA;         }&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;         $Propery = $null&#xD;&#xA;         $Value = $null&#xD;&#xA;         $ChangeType = $null&#xD;&#xA;         &#xD;&#xA;         $Propery = $ObjHist.ObjectHistory.Values.ClassHistory.PropertyChanges.Key&#xD;&#xA;         $Value = $ObjHist.ObjectHistory.Values.ClassHistory.PropertyChanges.Value&#xD;&#xA;         $ChangeType = $ObjHist.ObjectHistory.Values.ClassHistory.PropertyChanges.ChangeType&#xD;&#xA;         &#xD;&#xA;         if ($ChangeType -eq &quot;Insert&quot;)&#xD;&#xA;         {&#xD;&#xA;          try&#xD;&#xA;          {&#xD;&#xA;           Set-SCSMObject -SMObject $MobileDeviceExists -Property $Propery -Value $Value&#xD;&#xA;          }&#xD;&#xA;          catch&#xD;&#xA;          {&#xD;&#xA;           Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object: $MobileDeviceExists For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;          }&#xD;&#xA;         }&#xD;&#xA;         elseIf ($ChangeType -eq &quot;Modify&quot;)&#xD;&#xA;         {&#xD;&#xA;          try&#xD;&#xA;          {&#xD;&#xA;           Set-SCSMObject -SMObject $MobileDeviceExists -Property $Propery -Value $Value&#xD;&#xA;          }&#xD;&#xA;          catch&#xD;&#xA;          {&#xD;&#xA;           Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object: $MobileDeviceExists For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;          }&#xD;&#xA;         }&#xD;&#xA;         elseif ($ChangeType -eq &quot;Delete&quot;)&#xD;&#xA;         {&#xD;&#xA;          try&#xD;&#xA;          {&#xD;&#xA;           Set-SCSMObject -SMObject $MobileDeviceExists -Property $Propery -Value &quot;&quot;&#xD;&#xA;          }&#xD;&#xA;          catch&#xD;&#xA;          {&#xD;&#xA;           Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object: $MobileDeviceExists For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;          }&#xD;&#xA;         }&#xD;&#xA;         &#xD;&#xA;        }&#xD;&#xA;       }&#xD;&#xA;       elseif ($RelationshipChanges)&#xD;&#xA;       {&#xD;&#xA;        $SourceObj = $null&#xD;&#xA;        $TargetObj = $null&#xD;&#xA;        $RelationshipClassObj = $null&#xD;&#xA;        $RChangeType = $null&#xD;&#xA;        &#xD;&#xA;        $SourceObj = $ObjHist.ObjectHistory.Values.RelationshipHistory.SourceObjectId&#xD;&#xA;        $TargetObj = $ObjHist.ObjectHistory.Values.RelationshipHistory.TargetObjectId&#xD;&#xA;        $RelationshipClassObj = $ObjHist.ObjectHistory.Values.RelationshipHistory.ManagementPackRelationshipTypeId&#xD;&#xA;        $RChangeType = $ObjHist.ObjectHistory.Values.RelationshipHistory.ChangeType&#xD;&#xA;        &#xD;&#xA;        $Src = $null&#xD;&#xA;        $Tar = $null&#xD;&#xA;        $Rel = $null&#xD;&#xA;        &#xD;&#xA;        $Src = Get-SCSMObject -Id $SourceObj&#xD;&#xA;        $Tar = Get-SCSMObject -Id $TargetObj&#xD;&#xA;        $Rel = Get-SCSMRelationshipClass -id = $RelationshipClassObj&#xD;&#xA;        &#xD;&#xA;        if ($RChangeType -eq &quot;Insert&quot;)&#xD;&#xA;        {&#xD;&#xA;         try&#xD;&#xA;         {&#xD;&#xA;          New-SCSMRelationshipObject -Source $Src -Target $Tar -Relationship $Rel -Bulk&#xD;&#xA;         }&#xD;&#xA;         catch&#xD;&#xA;         {&#xD;&#xA;          Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object Relationships:$MobileDeviceExists For Relationship:$Rel with Source:$Src and Target:$Tar for Change Type:$ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;         }&#xD;&#xA;        }&#xD;&#xA;        elseIf ($RChangeType -eq &quot;Modify&quot;)&#xD;&#xA;        {&#xD;&#xA;         try&#xD;&#xA;         {&#xD;&#xA;          New-SCSMRelationshipObject -Source $Src -Target $Tar -Relationship $Rel -Bulk&#xD;&#xA;         }&#xD;&#xA;         catch&#xD;&#xA;         {&#xD;&#xA;          Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object Relationships:$MobileDeviceExists For Relationship:$Rel with Source:$Src and Target:$Tar for Change Type:$ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;         }&#xD;&#xA;        }&#xD;&#xA;        elseif ($RChangeType -eq &quot;Delete&quot;)&#xD;&#xA;        {&#xD;&#xA;         try&#xD;&#xA;         {&#xD;&#xA;          Get-SCSMRelationshipObject -BySource $Src | ? { ($_.RelationshipClassId -eq $Rel) } | Remove-SCSMRelationshipObject&#xD;&#xA;         }&#xD;&#xA;         catch&#xD;&#xA;         {&#xD;&#xA;          Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Hardware Connector Cannot Update Object Relationships:$MobileDeviceExists For Relationship:$Rel with Source:$Src and Target:$Tar for Change Type:$ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;         }&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;       }&#xD;&#xA;       &#xD;&#xA;      }&#xD;&#xA;     }&#xD;&#xA;     Set-SCSMObject -SMObject $MobileDeviceExists -Property &quot;LastModifiedSync&quot; -Value $LastModified&#xD;&#xA;    }&#xD;&#xA;   }&#xD;&#xA;  }&#xD;&#xA; }&#xD;&#xA; Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId 10000 -Category 0 -EntryType Information -Message &quot;Hardware Connector Finished Process of Mobile Objects&quot;&#xD;&#xA; &#xD;&#xA; #Process Scanners&#xD;&#xA; Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId 10000 -Category 0 -EntryType Information -Message &quot;Hardware Connector Start Processing of Scanner Objects&quot;&#xD;&#xA; $ScannerDevices = Get-SCSMObject -Class $ScannerCl -Filter &quot;ObjectStatus -ne $PendingDeleteEnumId&quot;&#xD;&#xA; if($ScannerDevices)&#xD;&#xA; {&#xD;&#xA;    foreach ($ScannerDevice in $ScannerDevices)&#xD;&#xA;  {&#xD;&#xA;   try&#xD;&#xA;    {&#xD;&#xA;    $AssetsRel = (Get-SCSMRelationshipObject -ByTarget $ScannerDevice | ? {$_.RelationshipId -eq $($HardwareAssetReferenceScannerRelCl.id)}).SourceObject&#xD;&#xA;    }&#xD;&#xA;   finally&#xD;&#xA;    {&#xD;&#xA;    $sAssetTag = $null&#xD;&#xA;    $ScannerUser= $null&#xD;&#xA;    $ScannerAsset =$null&#xD;&#xA;    if($ScannerDevice.SerialNumber)&#xD;&#xA;     {&#xD;&#xA;     $sAssetTag = &quot;$PreFix&quot; + $($ScannerDevice.SerialNumber)&#xD;&#xA;     }&#xD;&#xA;    else{$sAssetTag = &quot;NOT PRESENT&quot;}&#xD;&#xA;    &#xD;&#xA;    if(!$AssetsRel)&#xD;&#xA;     {&#xD;&#xA;     $AssetRelHashTable=@{&#xD;&#xA;          &quot;AssetName&quot; = $($ScannerDevice.DisplayName);&#xD;&#xA;                &quot;DisplayName&quot; = $($ScannerDevice.DisplayName);&#xD;&#xA;                &quot;Type&quot; = $ScannerAssetTypeId;&#xD;&#xA;                &quot;ReadinessStatus&quot; = $ReadinessStatusEnumId;&#xD;&#xA;                &quot;AssetTag&quot; = $sAssetTag;&#xD;&#xA;          &quot;AssetStatus&quot; = $AssetStatusEnumDeployedId;&#xD;&#xA;          }&#xD;&#xA;     $ScannerAsset= New-SCSMObject -Class $HardwareAssetClass -PropertyHashtable $AssetRelHashTable -PassThru&#xD;&#xA;     New-SCSMRelationshipObject -Source $ScannerAsset -Target $ScannerDevice -Relationship $HardwareAssetReferenceScannerRelCl -Bulk&#xD;&#xA;     $ScannerUser= (Get-SCSMRelationshipObject -BySource $ScannerDevice -ErrorAction SilentlyContinue | ? {$_.RelationshipId -eq $($ScannerUserRelCl.Id)}).TargetObject&#xD;&#xA;      if($ScannerUser)&#xD;&#xA;       {&#xD;&#xA;       New-SCSMRelationshipObject -Source $ScannerAsset -Target $ScannerUser -Relationship $HardwareAssetHasUser -Bulk&#xD;&#xA;       }&#xD;&#xA;     &#xD;&#xA;     &#xD;&#xA;     }&#xD;&#xA;     &#xD;&#xA;    }&#xD;&#xA;   &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  }&#xD;&#xA;   &#xD;&#xA;   &#xD;&#xA;   &#xD;&#xA;   &#xD;&#xA;   }&#xD;&#xA; Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId 10000 -Category 0 -EntryType Information -Message &quot;Hardware Connector  Finished Processing of Scanner Objects&quot;&#xD;&#xA;&#xD;&#xA; #Process Monitors&#xD;&#xA; Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId 10000 -Category 0 -EntryType Information -Message &quot;Hardware Connector Start Processing of Monitor Objects&quot;&#xD;&#xA; $MonitorDevices = Get-SCSMObject -Class $MonitorCl -Filter &quot;ObjectStatus -ne $PendingDeleteEnumId&quot;&#xD;&#xA; if($MonitorDevices)&#xD;&#xA; {&#xD;&#xA;    foreach ($MonitorDevice in $MonitorDevices)&#xD;&#xA;  {&#xD;&#xA;   try&#xD;&#xA;    {&#xD;&#xA;    $mAssetsRel = (Get-SCSMRelationshipObject -ByTarget $MonitorDevice | ? {$_.RelationshipId -eq $($HardwareAssetRefMonitorRelCl.id)}).SourceObject&#xD;&#xA;    }&#xD;&#xA;   finally&#xD;&#xA;    {&#xD;&#xA;    $mAssetTag = $null&#xD;&#xA;    $MonitorUser= $null&#xD;&#xA;    $MonitorAsset =$null&#xD;&#xA;    if($MonitorDevice.SerialNumber)&#xD;&#xA;     {&#xD;&#xA;     $mAssetTag = &quot;$PreFix&quot; + $($MonitorDevice.SerialNumber)&#xD;&#xA;     }&#xD;&#xA;    else{$mAssetTag = &quot;NOT PRESENT&quot;}&#xD;&#xA;    &#xD;&#xA;    if(!$mAssetsRel)&#xD;&#xA;     {&#xD;&#xA;     $mAssetRelHashTable=@{&#xD;&#xA;          &quot;AssetName&quot; = $($MonitorDevice.DisplayName);&#xD;&#xA;                &quot;DisplayName&quot; = $($MonitorDevice.DisplayName);&#xD;&#xA;                &quot;Type&quot; = $MonitorAssetTyteId;&#xD;&#xA;                &quot;ReadinessStatus&quot; = $ReadinessStatusEnumId;&#xD;&#xA;                &quot;AssetTag&quot; = $mAssetTag;&#xD;&#xA;          &quot;AssetStatus&quot; = $AssetStatusEnumDeployedId;&#xD;&#xA;          }&#xD;&#xA;     $MonitorAsset= New-SCSMObject -Class $HardwareAssetClass -PropertyHashtable $mAssetRelHashTable -PassThru&#xD;&#xA;     New-SCSMRelationshipObject -Source $MonitorAsset -Target $MonitorDevice -Relationship $HardwareAssetRefMonitorRelCl -Bulk&#xD;&#xA;     $MonitorUser= (Get-SCSMRelationshipObject -BySource $MonitorDevice -ErrorAction SilentlyContinue | ? {$_.RelationshipId -eq $($MonitorUserRelCL.Id)}).TargetObject&#xD;&#xA;      if($MonitorUser)&#xD;&#xA;       {&#xD;&#xA;       New-SCSMRelationshipObject -Source $MonitorAsset -Target $MonitorUser -Relationship $HardwareAssetHasUser -Bulk&#xD;&#xA;       }&#xD;&#xA;     &#xD;&#xA;     &#xD;&#xA;     }&#xD;&#xA;     &#xD;&#xA;    }&#xD;&#xA;   &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  }&#xD;&#xA;   &#xD;&#xA;   &#xD;&#xA;   &#xD;&#xA;   &#xD;&#xA;   }&#xD;&#xA; Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId 10000 -Category 0 -EntryType Information -Message &quot;Hardware Connector Finished Processing of Monitor Objects&quot;&#xD;&#xA;&#xD;&#xA; #Process OtherDevice&#xD;&#xA; Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId 10000 -Category 0 -EntryType Information -Message &quot;Hardware Connector Start Processing of Other Device Objects&quot;&#xD;&#xA; $OtherDevices = Get-SCSMObject -Class $OtherDeviceCl -Filter &quot;ObjectStatus -ne $PendingDeleteEnumId&quot;&#xD;&#xA; if($OtherDevices)&#xD;&#xA; {&#xD;&#xA;    foreach ($OtherDevice in $OtherDevices)&#xD;&#xA;  {&#xD;&#xA;   try&#xD;&#xA;    {&#xD;&#xA;    $oAssetsRel = (Get-SCSMRelationshipObject -ByTarget $OtherDevice | ? {$_.RelationshipId -eq $($HardwareAssetRefOtherDevRelCl.id)}).SourceObject&#xD;&#xA;    }&#xD;&#xA;   finally&#xD;&#xA;    {&#xD;&#xA;    $oAssetTag = $null&#xD;&#xA;    $OtherDeUser= $null&#xD;&#xA;    $OtherDevAsset =$null&#xD;&#xA;    if($OtherDevice.SerialNumber)&#xD;&#xA;     {&#xD;&#xA;     $oAssetTag = &quot;$PreFix&quot; + $($OtherDevice.SerialNumber)&#xD;&#xA;     }&#xD;&#xA;    else{$oAssetTag = &quot;NOT PRESENT&quot;}&#xD;&#xA;    &#xD;&#xA;    if(!$oAssetsRel)&#xD;&#xA;     {&#xD;&#xA;     $oAssetRelHashTable=@{&#xD;&#xA;          &quot;AssetName&quot; = $($OtherDevice.DisplayName);&#xD;&#xA;                &quot;DisplayName&quot; = $($OtherDevice.DisplayName);&#xD;&#xA;                &quot;Type&quot; = $OtherDeviceTypeId;&#xD;&#xA;                &quot;ReadinessStatus&quot; = $ReadinessStatusEnumId;&#xD;&#xA;                &quot;AssetTag&quot; = $oAssetTag;&#xD;&#xA;          &quot;AssetStatus&quot; = $AssetStatusEnumDeployedId;&#xD;&#xA;          }&#xD;&#xA;     $OtherDeviceAsset= New-SCSMObject -Class $HardwareAssetClass -PropertyHashtable $oAssetRelHashTable -PassThru&#xD;&#xA;     New-SCSMRelationshipObject -Source $OtherDeviceAsset -Target $OtherDevice -Relationship $HardwareAssetRefOtherDevRelCl -Bulk&#xD;&#xA;     $OtherDevUser= (Get-SCSMRelationshipObject -BySource $OtherDevice -ErrorAction SilentlyContinue | ? {$_.RelationshipId -eq $($OtherDeviceRelCl.Id)}).TargetObject&#xD;&#xA;      if($OtherDevUser)&#xD;&#xA;       {&#xD;&#xA;       New-SCSMRelationshipObject -Source $OtherDeviceAsset -Target $OtherDevUser -Relationship $HardwareAssetHasUser -Bulk&#xD;&#xA;       }&#xD;&#xA;     &#xD;&#xA;     &#xD;&#xA;     }&#xD;&#xA;     &#xD;&#xA;    }&#xD;&#xA;   &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  }&#xD;&#xA;   &#xD;&#xA;   &#xD;&#xA;   &#xD;&#xA;   &#xD;&#xA;   }&#xD;&#xA;  Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId 10000 -Category 0 -EntryType Information -Message &quot;Hardware Connector Finished Processing of Other Device Objects&quot;&#xD;&#xA;&#xD;&#xA; &#xD;&#xA; &#xD;&#xA; &#xD;&#xA; #Process Storage Device&#xD;&#xA; Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId 10000 -Category 0 -EntryType Information -Message &quot;Hardware Connector Start Processing of Storage Device Objects&quot;&#xD;&#xA; $StorageDevices = Get-SCSMObject -Class $StorageDeviceClass -Filter &quot;ObjectStatus -ne $PendingDeleteEnumId&quot;&#xD;&#xA; if($StorageDevices)&#xD;&#xA; {&#xD;&#xA;    foreach ($StorageDevice in $StorageDevices)&#xD;&#xA;  {&#xD;&#xA;   try&#xD;&#xA;    {&#xD;&#xA;    $stAssetsRel = (Get-SCSMRelationshipObject -ByTarget $StorageDevice | ? {$_.RelationshipId -eq $($HardwareRefStorageDev.id)}).SourceObject&#xD;&#xA;    }&#xD;&#xA;   finally&#xD;&#xA;    {&#xD;&#xA;    $stAssetTag = $null&#xD;&#xA;    $StorageDeviceUser= $null&#xD;&#xA;    $StorageDeviceAsset =$null&#xD;&#xA;    if($StorageDevice.SerialNumber)&#xD;&#xA;     {&#xD;&#xA;     $stAssetTag = &quot;$PreFix&quot; + $($StorageDevice.SerialNumber)&#xD;&#xA;     }&#xD;&#xA;    else{$stAssetTag = &quot;NOT PRESENT&quot;}&#xD;&#xA;    &#xD;&#xA;    if(!$stAssetsRel)&#xD;&#xA;     {&#xD;&#xA;     $stAssetRelHashTable=@{&#xD;&#xA;          &quot;AssetName&quot; = $($StorageDevice.DisplayName);&#xD;&#xA;                &quot;DisplayName&quot; = $($StorageDevice.DisplayName);&#xD;&#xA;                &quot;Type&quot; = $StorageDevTypeId;&#xD;&#xA;                &quot;ReadinessStatus&quot; = $ReadinessStatusEnumId;&#xD;&#xA;                &quot;AssetTag&quot; = $stAssetTag;&#xD;&#xA;          &quot;AssetStatus&quot; = $AssetStatusEnumDeployedId;&#xD;&#xA;          }&#xD;&#xA;     $StorageDeviceAsset= New-SCSMObject -Class $HardwareAssetClass -PropertyHashtable $stAssetRelHashTable -PassThru&#xD;&#xA;     New-SCSMRelationshipObject -Source $StorageDeviceAsset -Target $StorageDevice -Relationship $HardwareRefStorageDev -Bulk&#xD;&#xA;     $StorageDeviceUser= (Get-SCSMRelationshipObject -BySource $StorageDevice -ErrorAction SilentlyContinue | ? {$_.RelationshipId -eq $($StorageDevHasUserRelCl.Id)}).TargetObject&#xD;&#xA;      if($StorageDeviceUser)&#xD;&#xA;       {&#xD;&#xA;       New-SCSMRelationshipObject -Source $StorageDeviceAsset -Target $StorageDeviceUser -Relationship $HardwareAssetHasUser -Bulk&#xD;&#xA;       }&#xD;&#xA;     &#xD;&#xA;     &#xD;&#xA;     }&#xD;&#xA;     &#xD;&#xA;    }&#xD;&#xA;   &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  }&#xD;&#xA;   &#xD;&#xA;   &#xD;&#xA;   &#xD;&#xA;   &#xD;&#xA;   }&#xD;&#xA;  Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId 10000 -Category 0 -EntryType Information -Message &quot;Hardware Connector Finished Processing of Other Device Objects&quot;&#xD;&#xA;&#xD;&#xA; &#xD;&#xA; &#xD;&#xA; &#xD;&#xA; #Process Manufacturers And Final Models Count.&#xD;&#xA; $Manufs = Get-SCSMObject -Class $DevManufacturer&#xD;&#xA; foreach ($m in $Manufs)&#xD;&#xA; {&#xD;&#xA;  Set-SCSMObject -SMObject $m -Property &quot;DeviceCount&quot; -Value &quot;0&quot;&#xD;&#xA;  $Models = Get-SCSMRelationshipObject -bytarget $m | ? RelationshipId -eq $ModelHasManufacturerRelCl.Id&#xD;&#xA;  foreach ($Model in $Models)&#xD;&#xA;  {&#xD;&#xA;   $Mo = $null&#xD;&#xA;   $Mo = Get-SCSMObject -Id $Model.SourceObject.Id&#xD;&#xA;   [int]$DeviceCountinModel = $Mo.ModelCount&#xD;&#xA;   $FnV = $null&#xD;&#xA;   $FnV = (Get-SCSMObject -Id $m.Id).DeviceCount&#xD;&#xA;   $FinalVMod = $null&#xD;&#xA;   $FinalVMod = ($FnV) + ($DeviceCountinModel)&#xD;&#xA;   Set-SCSMObject -SMObject $m -property &quot;DeviceCount&quot; -Value $FinalVMod&#xD;&#xA;  }&#xD;&#xA; }&#xD;&#xA; &#xD;&#xA; $InactiveId = (Get-SCSMEnumeration -Name ITSMConnectorStatus.Inactive).id&#xD;&#xA; Set-SCSMObject -SMObject $HardwareConnectorAdminSettingObj -Property &quot;Status&quot; -Value $InactiveId&#xD;&#xA; Set-SCSMObject -SMObject $HardwareConnectorAdminSettingObj -Property &quot;LastSynced&quot; -Value (Get-Date)&#xD;&#xA; Write-EventLog -LogName 'Operations Manager' -Source 'Hardware Connector' -EventId 10100 -Category 0 -EntryType Information -Message &quot;Hardware Connector Finished Process Hardware Objects&quot;&#xD;&#xA;}&#xD;&#xA;# SIG # Begin signature block&#xD;&#xA;# MIIUAAYJKoZIhvcNAQcCoIIT8TCCE+0CAQExCzAJBgUrDgMCGgUAMGkGCisGAQQB&#xD;&#xA;# gjcCAQSgWzBZMDQGCisGAQQBgjcCAR4wJgIDAQAABBAfzDtgWUsITrck0sYpfvNR&#xD;&#xA;# AgEAAgEAAgEAAgEAAgEAMCEwCQYFKw4DAhoFAAQUj/s49jXhQbKxQmVy0B4/23ZD&#xD;&#xA;# pQmggg60MIIEFDCCAvygAwIBAgILBAAAAAABL07hUtcwDQYJKoZIhvcNAQEFBQAw&#xD;&#xA;# VzELMAkGA1UEBhMCQkUxGTAXBgNVBAoTEEdsb2JhbFNpZ24gbnYtc2ExEDAOBgNV&#xD;&#xA;# BAsTB1Jvb3QgQ0ExGzAZBgNVBAMTEkdsb2JhbFNpZ24gUm9vdCBDQTAeFw0xMTA0&#xD;&#xA;# MTMxMDAwMDBaFw0yODAxMjgxMjAwMDBaMFIxCzAJBgNVBAYTAkJFMRkwFwYDVQQK&#xD;&#xA;# ExBHbG9iYWxTaWduIG52LXNhMSgwJgYDVQQDEx9HbG9iYWxTaWduIFRpbWVzdGFt&#xD;&#xA;# cGluZyBDQSAtIEcyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlO9l&#xD;&#xA;# +LVXn6BTDTQG6wkft0cYasvwW+T/J6U00feJGr+esc0SQW5m1IGghYtkWkYvmaCN&#xD;&#xA;# d7HivFzdItdqZ9C76Mp03otPDbBS5ZBb60cO8eefnAuQZT4XljBFcm05oRc2yrmg&#xD;&#xA;# jBtPCBn2gTGtYRakYua0QJ7D/PuV9vu1LpWBmODvxevYAll4d/eq41JrUJEpxfz3&#xD;&#xA;# zZNl0mBhIvIG+zLdFlH6Dv2KMPAXCae78wSuq5DnbN96qfTvxGInX2+ZbTh0qhGL&#xD;&#xA;# 2t/HFEzphbLswn1KJo/nVrqm4M+SU4B09APsaLJgvIQgAIMboe60dAXBKY5i0Eex&#xD;&#xA;# +vBTzBj5Ljv5cH60JQIDAQABo4HlMIHiMA4GA1UdDwEB/wQEAwIBBjASBgNVHRMB&#xD;&#xA;# Af8ECDAGAQH/AgEAMB0GA1UdDgQWBBRG2D7/3OO+/4Pm9IWbsN1q1hSpwTBHBgNV&#xD;&#xA;# HSAEQDA+MDwGBFUdIAAwNDAyBggrBgEFBQcCARYmaHR0cHM6Ly93d3cuZ2xvYmFs&#xD;&#xA;# c2lnbi5jb20vcmVwb3NpdG9yeS8wMwYDVR0fBCwwKjAooCagJIYiaHR0cDovL2Ny&#xD;&#xA;# bC5nbG9iYWxzaWduLm5ldC9yb290LmNybDAfBgNVHSMEGDAWgBRge2YaRQ2XyolQ&#xD;&#xA;# L30EzTSo//z9SzANBgkqhkiG9w0BAQUFAAOCAQEATl5WkB5GtNlJMfO7FzkoG8IW&#xD;&#xA;# 3f1B3AkFBJtvsqKa1pkuQJkAVbXqP6UgdtOGNNQXzFU6x4Lu76i6vNgGnxVQ380W&#xD;&#xA;# e1I6AtcZGv2v8Hhc4EvFGN86JB7arLipWAQCBzDbsBJe/jG+8ARI9PBw+DpeVoPP&#xD;&#xA;# PfsNvPTF7ZedudTbpSeE4zibi6c1hkQgpDttpGoLoYP9KOva7yj2zIhd+wo7AKvg&#xD;&#xA;# IeviLzVsD440RZfroveZMzV+y5qKu0VN5z+fwtmK+mWybsd+Zf/okuEsMaL3sCc2&#xD;&#xA;# SI8mbzvuTXYfecPlf5Y1vC0OzAGwjn//UYCAp5LUs0RGZIyHTxZjBzFLY7Df8zCC&#xD;&#xA;# BJ8wggOHoAMCAQICEhEh1pmnZJc+8fhCfukZzFNBFDANBgkqhkiG9w0BAQUFADBS&#xD;&#xA;# MQswCQYDVQQGEwJCRTEZMBcGA1UEChMQR2xvYmFsU2lnbiBudi1zYTEoMCYGA1UE&#xD;&#xA;# AxMfR2xvYmFsU2lnbiBUaW1lc3RhbXBpbmcgQ0EgLSBHMjAeFw0xNjA1MjQwMDAw&#xD;&#xA;# MDBaFw0yNzA2MjQwMDAwMDBaMGAxCzAJBgNVBAYTAlNHMR8wHQYDVQQKExZHTU8g&#xD;&#xA;# R2xvYmFsU2lnbiBQdGUgTHRkMTAwLgYDVQQDEydHbG9iYWxTaWduIFRTQSBmb3Ig&#xD;&#xA;# TVMgQXV0aGVudGljb2RlIC0gRzIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK&#xD;&#xA;# AoIBAQCwF66i07YEMFYeWA+x7VWk1lTL2PZzOuxdXqsl/Tal+oTDYUDFRrVZUjtC&#xD;&#xA;# oi5fE2IQqVvmc9aSJbF9I+MGs4c6DkPw1wCJU6IRMVIobl1AcjzyCXenSZKX1GyQ&#xD;&#xA;# oHan/bjcs53yB2AsT1iYAGvTFVTg+t3/gCxfGKaY/9Sr7KFFWbIub2Jd4NkZrItX&#xD;&#xA;# nKgmK9kXpRDSRwgacCwzi39ogCq1oV1r3Y0CAikDqnw3u7spTj1Tk7Om+o/SWJMV&#xD;&#xA;# TLktq4CjoyX7r/cIZLB6RA9cENdfYTeqTmvT0lMlnYJz+iz5crCpGTkqUPqp0Dw6&#xD;&#xA;# yuhb7/VfUfT5CtmXNd5qheYjBEKvAgMBAAGjggFfMIIBWzAOBgNVHQ8BAf8EBAMC&#xD;&#xA;# B4AwTAYDVR0gBEUwQzBBBgkrBgEEAaAyAR4wNDAyBggrBgEFBQcCARYmaHR0cHM6&#xD;&#xA;# Ly93d3cuZ2xvYmFsc2lnbi5jb20vcmVwb3NpdG9yeS8wCQYDVR0TBAIwADAWBgNV&#xD;&#xA;# HSUBAf8EDDAKBggrBgEFBQcDCDBCBgNVHR8EOzA5MDegNaAzhjFodHRwOi8vY3Js&#xD;&#xA;# Lmdsb2JhbHNpZ24uY29tL2dzL2dzdGltZXN0YW1waW5nZzIuY3JsMFQGCCsGAQUF&#xD;&#xA;# BwEBBEgwRjBEBggrBgEFBQcwAoY4aHR0cDovL3NlY3VyZS5nbG9iYWxzaWduLmNv&#xD;&#xA;# bS9jYWNlcnQvZ3N0aW1lc3RhbXBpbmdnMi5jcnQwHQYDVR0OBBYEFNSihEo4Whh/&#xD;&#xA;# uk8wUL2d1XqH1gn3MB8GA1UdIwQYMBaAFEbYPv/c477/g+b0hZuw3WrWFKnBMA0G&#xD;&#xA;# CSqGSIb3DQEBBQUAA4IBAQCPqRqRbQSmNyAOg5beI9Nrbh9u3WQ9aCEitfhHNmmO&#xD;&#xA;# 4aVFxySiIrcpCcxUWq7GvM1jjrM9UEjltMyuzZKNniiLE0oRqr2j79OyNvy0oXK/&#xD;&#xA;# bZdjeYxEvHAvfvO83YJTqxr26/ocl7y2N5ykHDC8q7wtRzbfkiAD6HHGWPZ1BZo0&#xD;&#xA;# 8AtZWoJENKqA5C+E9kddlsm2ysqdt6a65FDT1De4uiAO0NOSKlvEWbuhbds8zkSd&#xD;&#xA;# wTgqreONvc0JdxoQvmcKAjZkiLmzGybu555gxEaovGEzbM9OuZy5avCfN/61PU+a&#xD;&#xA;# 003/3iCOTpem/Z8JvE3KGHbJsE2FUPKA0h0G9VgEB7EYMIIF9TCCBN2gAwIBAgIQ&#xD;&#xA;# KkVe0MLlP86cwi4qAhN8pjANBgkqhkiG9w0BAQsFADB4MQswCQYDVQQGEwJJTDEW&#xD;&#xA;# MBQGA1UEChMNU3RhcnRDb20gTHRkLjEpMCcGA1UECxMgU3RhcnRDb20gQ2VydGlm&#xD;&#xA;# aWNhdGlvbiBBdXRob3JpdHkxJjAkBgNVBAMTHVN0YXJ0Q29tIENsYXNzIDEgRFYg&#xD;&#xA;# U2VydmVyIENBMB4XDTE2MDgyMDEyMDkzNloXDTE3MDgyMDEyMDkzNlowKTELMAkG&#xD;&#xA;# A1UEBhMCR1IxGjAYBgNVBAMMEXNpZ24ubXNoZWxsYXMuY29tMIIBIjANBgkqhkiG&#xD;&#xA;# 9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlhTZTQAyYBBLvnzT2hpfFY0vS/X6CcYDHNR2&#xD;&#xA;# lvwFJQBvpX2eM5k2jqiBDiDX4gY9YiwWukq+MiGGblNQiYa7d2Qgjs5TjoS/lMNJ&#xD;&#xA;# lZI/WIYj3H5e77qT7VwRS5KCmydId8Zud8avSa95l5sK45cnrFiT+flN0fe7b7nw&#xD;&#xA;# gv+4n7++1AlwvgzAfPdO/pY5RrTzQ+vOkhPF+jCFJ0gfG981DOWlISkorMnVwv2h&#xD;&#xA;# dXVN9bEzQ2THs+QQFeu1rzOlUEaTaaRm6kDlNZzz4XKU9U1gNxsT5Z52xD2sgZno&#xD;&#xA;# PAo6g/0Cm7jGuD8IAG32yrDACI2EtIAPDxCQajmivMx1ojivgwIDAQABo4ICyDCC&#xD;&#xA;# AsQwDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcD&#xD;&#xA;# ATAJBgNVHRMEAjAAMB0GA1UdDgQWBBQNOShOI1UPPhQjPuSYSAnfVeTifTAfBgNV&#xD;&#xA;# HSMEGDAWgBTXkU4BxLC/+Mhnk0Sc5zP6rZMMrzBvBggrBgEFBQcBAQRjMGEwJAYI&#xD;&#xA;# KwYBBQUHMAGGGGh0dHA6Ly9vY3NwLnN0YXJ0c3NsLmNvbTA5BggrBgEFBQcwAoYt&#xD;&#xA;# aHR0cDovL2FpYS5zdGFydHNzbC5jb20vY2VydHMvc2NhLnNlcnZlcjEuY3J0MDgG&#xD;&#xA;# A1UdHwQxMC8wLaAroCmGJ2h0dHA6Ly9jcmwuc3RhcnRzc2wuY29tL3NjYS1zZXJ2&#xD;&#xA;# ZXIxLmNybDAcBgNVHREEFTATghFzaWduLm1zaGVsbGFzLmNvbTAjBgNVHRIEHDAa&#xD;&#xA;# hhhodHRwOi8vd3d3LnN0YXJ0c3NsLmNvbS8wUQYDVR0gBEowSDAIBgZngQwBAgEw&#xD;&#xA;# PAYLKwYBBAGBtTcBAgUwLTArBggrBgEFBQcCARYfaHR0cHM6Ly93d3cuc3RhcnRz&#xD;&#xA;# c2wuY29tL3BvbGljeTCCAQUGCisGAQQB1nkCBAIEgfYEgfMA8QB2AGj2mPgfZIK+&#xD;&#xA;# OozuuSgdTPxxUV1nk9RE0QpnrLtPT/vEAAABVqgDmKcAAAQDAEcwRQIgJLiVb+Ja&#xD;&#xA;# a6BunnPE5hXdwenireOqMnkM24O7C6oTupUCIQDN0bYMsAwYmQVqO6EVxeQ+VbYd&#xD;&#xA;# iWfbnPrw79AZeM68YAB3AKS5CZC0GFgUh7sTosxncAo8NZgE+RvfuON3zQ7IDdwQ&#xD;&#xA;# AAABVqgDmcMAAAQDAEgwRgIhAPrLozUMYEWEdyPT0wBhuz9cUeGuWw4YluLGMO25&#xD;&#xA;# xAxwAiEAhKlyExSyer/qcuThyqGQEYR7YcuaHp7nVAnS8ffNsXQwDQYJKoZIhvcN&#xD;&#xA;# AQELBQADggEBACe6BNqcaS4N6cBHguRXo1XBottsPHUEqk+WaFsKvBndjzr01BkI&#xD;&#xA;# NhymaC64eMtnHRIybThGNhSQ+JLmGijM+Su414IJu0R1hkDUVo0hsNdCyL+1aBL1&#xD;&#xA;# pjqDvy/iqgP5wN9PU/5DAIvz8vAFJQC62Ci9x4whhtkiHjFsPwevgPU3om4rjaTb&#xD;&#xA;# 4wzAoDn49nXcEQO6WPuQJTgyzJoUL3+isk2PFW1XLS3IvXsbUNQ7V56woOCiPEyh&#xD;&#xA;# zGSpn/dhKYgfCgVlHvA2V3fzOBjlXq3PsKC38/gIc9HTcjcXN3oHsAGUI0jfjeSD&#xD;&#xA;# TS39FyssETg4QlSXrf4QZmjpf5v2ZJ+EvloxggS2MIIEsgIBATCBjDB4MQswCQYD&#xD;&#xA;# VQQGEwJJTDEWMBQGA1UEChMNU3RhcnRDb20gTHRkLjEpMCcGA1UECxMgU3RhcnRD&#xD;&#xA;# b20gQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxJjAkBgNVBAMTHVN0YXJ0Q29tIENs&#xD;&#xA;# YXNzIDEgRFYgU2VydmVyIENBAhAqRV7QwuU/zpzCLioCE3ymMAkGBSsOAwIaBQCg&#xD;&#xA;# WjAYBgorBgEEAYI3AgEMMQowCKACgAChAoAAMBkGCSqGSIb3DQEJAzEMBgorBgEE&#xD;&#xA;# AYI3AgEEMCMGCSqGSIb3DQEJBDEWBBQTN3h6GXBzEvuIcutwowd2jhST8TANBgkq&#xD;&#xA;# hkiG9w0BAQEFAASCAQAuEjDYPOZmTdlEhmk9HMI+LA950apYg7CLGdJtT8UYIGTx&#xD;&#xA;# aAKfgM1ToSXB7g28/aMb47J4L0ivelSvkP/GMnftFQIeNFrc8pHdcHKADot8+z41&#xD;&#xA;# W32456QAysluVBWXo5QFQHWm4pr9KjferwNyyw+2JFJEeEAAyKcTX5WnfdmfVNmO&#xD;&#xA;# bUedCWSfx/tA+HFBAyf4n436VCPc5D5CqeKjstmyOeDZ16dJLSeDsESVJOmlg2Jv&#xD;&#xA;# RIVfaxWkFZmE17fjnlF/ogXfi8n/a4rodCDYBnDXsYzLYtwOAT7V4c5v+Ld0Qs8X&#xD;&#xA;# JQvx733416xf895OPGnISbSCe+9QQRR6BX1h/UyyoYICojCCAp4GCSqGSIb3DQEJ&#xD;&#xA;# BjGCAo8wggKLAgEBMGgwUjELMAkGA1UEBhMCQkUxGTAXBgNVBAoTEEdsb2JhbFNp&#xD;&#xA;# Z24gbnYtc2ExKDAmBgNVBAMTH0dsb2JhbFNpZ24gVGltZXN0YW1waW5nIENBIC0g&#xD;&#xA;# RzICEhEh1pmnZJc+8fhCfukZzFNBFDAJBgUrDgMCGgUAoIH9MBgGCSqGSIb3DQEJ&#xD;&#xA;# AzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE2MDgyMDEzMDQxOFowIwYJ&#xD;&#xA;# KoZIhvcNAQkEMRYEFKMHJH4K7uCEMsccI+bngW9tYR7vMIGdBgsqhkiG9w0BCRAC&#xD;&#xA;# DDGBjTCBijCBhzCBhAQUY7gvq2H1g5CWlQULACScUCkz7HkwbDBWpFQwUjELMAkG&#xD;&#xA;# A1UEBhMCQkUxGTAXBgNVBAoTEEdsb2JhbFNpZ24gbnYtc2ExKDAmBgNVBAMTH0ds&#xD;&#xA;# b2JhbFNpZ24gVGltZXN0YW1waW5nIENBIC0gRzICEhEh1pmnZJc+8fhCfukZzFNB&#xD;&#xA;# FDANBgkqhkiG9w0BAQEFAASCAQB/FqbWtJ04tzUzbjTzfA1HtcqGqo526GVNJQWx&#xD;&#xA;# yFCPCdM+o27FuXQpOqDHj5YhHqiaAOiZWswLi8PzdITrpPzb5eDtxeLkhku//BTj&#xD;&#xA;# EzRAIl3mR3SLQ2qm4DUAJI3zvL8htyC465OmpAztfqjJzxp9J5OQc9vdJ2x6W6sQ&#xD;&#xA;# pG1xfqLcEJeagDjiFpfwbiOXoqAsyIylG7PJNYA+s/CqlNIJj5EIvHelvLD0k3Ii&#xD;&#xA;# 5EAoZ9nfiUuL6Gj52Uj9pmIsubhEIj1/v83FlM5DgHGH3yl9CpDP44n8Ez/S9MQ6&#xD;&#xA;# XW165XU0NTYu688ZcxD1NzQYaVEi1N2F6TIp05H/51o9s4VA&#xD;&#xA;# SIG # End signature block&#xD;&#xA;" TaskID="HardwareSyncNow.WindowsPowerShellScript.829f6d7e_6c3e_4383_bd37_97848b187c66" SnapIns="{x:Null}" ScriptName="{x:Null}" PropertyToBind="{x:Null}" Parameter="{x:Null}">
		<ns0:WindowsPowerShellScript.Parameters>
			<x:Array Type="{x:Type p7:ActivityParameter}" xmlns:p7="clr-namespace:Microsoft.ServiceManager.WorkflowAuthoring.Common;Assembly=Microsoft.ServiceManager.WorkflowAuthoring.Common, Version=7.0.5000.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" />
		</ns0:WindowsPowerShellScript.Parameters>
	</ns0:WindowsPowerShellScript>
</SequentialWorkflowActivity>