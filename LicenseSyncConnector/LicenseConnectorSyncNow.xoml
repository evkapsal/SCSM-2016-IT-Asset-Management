<SequentialWorkflowActivity x:Class="WorkflowAuthoring.LicenseConnectorSyncNow" x:Name="LicenseConnectorSyncNow" xmlns:ns0="clr-namespace:Microsoft.ServiceManager.WorkflowAuthoring.ActivityLibrary;Assembly=Microsoft.ServiceManager.WorkflowAuthoring.ActivityLibrary, Version=7.0.5000.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/workflow">
	<ns0:WindowsPowerShellScript Parameter="{x:Null}" SnapIns="{x:Null}" x:Name="LicenseNowSync" PropertyToBind="{x:Null}" TimeoutSeconds="3600" ScriptBody="&lt;# &#xD;&#xA; .NOTES&#xD;&#xA; ===========================================================================&#xD;&#xA;  Created with:  SAPIEN Technologies, Inc., PowerShell Studio 2015&#xD;&#xA;  Created on:    29/5/2016 22:00 PM&#xD;&#xA;  Created by:    Evangelos Kapsalakis &#xD;&#xA;  Organization:  Microsoft Hellas&#xD;&#xA;  Filename:  License Sync Connector    &#xD;&#xA; ===========================================================================&#xD;&#xA; .DESCRIPTION&#xD;&#xA;  A description of the file.&#xD;&#xA;#&gt;&#xD;&#xA;Import-Module SMLets&#xD;&#xA;&#xD;&#xA;$ITSMLicConnectorClass = Get-SCSMClass -Name LicenseSyncConnector$&#xD;&#xA;$Connector = Get-SCSMObject -Class $ITSMLicConnectorClass&#xD;&#xA;if ($Connector.IsActive -eq $true)&#xD;&#xA;{&#xD;&#xA; &#xD;&#xA; Function Get-StringHash([String]$String)&#xD;&#xA; {&#xD;&#xA;  $StringBuilder = New-Object System.Text.StringBuilder&#xD;&#xA;  [System.Security.Cryptography.HashAlgorithm]::Create('MD5').ComputeHash([System.Text.Encoding]::UTF8.GetBytes($String)) | %{&#xD;&#xA;   [Void]$StringBuilder.Append($_.ToString(&quot;x2&quot;))&#xD;&#xA;  }&#xD;&#xA;  $StringBuilder.ToString()&#xD;&#xA; }&#xD;&#xA; &#xD;&#xA; &#xD;&#xA; Try&#xD;&#xA; {&#xD;&#xA;  $ActiveId = (Get-SCSMEnumeration -Name ITSMConnectorStatus.Running$).id&#xD;&#xA;  Set-SCSMObject -SMObject $Connector -Property &quot;Status&quot; -Value $ActiveId&#xD;&#xA;  Set-SCSMObject -SMObject $Connector -Property &quot;SyncNow&quot; -Value $false&#xD;&#xA; }&#xD;&#xA; Catch { }&#xD;&#xA; &#xD;&#xA; &#xD;&#xA; Try&#xD;&#xA; {&#xD;&#xA;  $events = [System.Diagnostics.EventLog]::SourceExists(&quot;License Connector&quot;);&#xD;&#xA; }&#xD;&#xA; catch { }&#xD;&#xA; finally&#xD;&#xA; {&#xD;&#xA;  if ($events -ne $true)&#xD;&#xA;  {&#xD;&#xA;   New-EventLog -LogName 'Operations Manager' -Source 'License Connector'&#xD;&#xA;   Write-EventLog -LogName 'Operations Manager' -Source 'License Connector' -EventId 10000 -Category 0 -EntryType Information -Message &quot;License Connector Succesfully Create Event Log Source&quot;&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  Write-EventLog -LogName 'Operations Manager' -Source 'License Connector' -EventId 10000 -Category 0 -EntryType Information -Message &quot;License Connector Start Processing Licensing Objects&quot;&#xD;&#xA; }&#xD;&#xA; &#xD;&#xA; $ErrorID = 10101&#xD;&#xA; $InfoID = 10100&#xD;&#xA; $WarningId = 10102&#xD;&#xA; &#xD;&#xA; &#xD;&#xA; #Classes&#xD;&#xA; $ITSMSoftwareAgreementCl = Get-SCSMClass -Name SoftwareAgreement$&#xD;&#xA; $ITSMSoftwareCl = Get-SCSMClass -Name Software$&#xD;&#xA; $ITSMSoftwareAssetCl = Get-SCSMClass -Name SoftwareAsset$&#xD;&#xA; $ITSMLicensingClassCl = Get-SCSMClass -Name LicenseStatus$&#xD;&#xA; &#xD;&#xA; #RelationshipClasses&#xD;&#xA; $ITSMSoftAssetHasSoftAgreementRelCl = Get-SCSMRelationshipClass -Name Relationship.SoftwareAssetHasAgreement$&#xD;&#xA; $ITSMSoftAssetHasSoftRelCl = Get-SCSMRelationshipClass -Name Relationship.SoftwareAssetHasSoftware$&#xD;&#xA; $ITSMLicStatusHasAgreement = Get-SCSMRelationshipClass -Name Relationship.LicStatusIsForSoftwareAgreement$&#xD;&#xA; $ITSMLicStatusHaSoftware = Get-SCSMRelationshipClass -Name Relationship.LicStatusHasSoftware$&#xD;&#xA; &#xD;&#xA; #EnumTypes&#xD;&#xA; $BaseCalcEnumId = (Get-SCSMEnumeration -Name ManagementScope.BaseLicenseCalculation$).id&#xD;&#xA; $LicStatusHealthy = (Get-SCSMEnumeration -Name LicStatus.Healthy$).id&#xD;&#xA; $LicStatusWarning = (Get-SCSMEnumeration -Name LicStatus.Warning).id&#xD;&#xA; $LicStatusError = (Get-SCSMEnumeration -Name LicStatus.Error$).id&#xD;&#xA; $ObjectStatusPendingDeleteId= (Get-SCSMEnumeration -Name System.ConfigItem.ObjectStatusEnum.PendingDelete$).id&#xD;&#xA; &#xD;&#xA; #Main Script&#xD;&#xA; $AssetForCalc = $null&#xD;&#xA; $AssetForCalc = Get-SCSMObject -Class $ITSMSoftwareAssetCl -Filter &quot;ManagementScope -eq $BaseCalcEnumId&quot;&#xD;&#xA; if ($AssetForCalc)&#xD;&#xA; {&#xD;&#xA;  foreach ($Assets in $AssetForCalc)&#xD;&#xA;  {&#xD;&#xA;   $RelatedAgreements = $null&#xD;&#xA;   $RelatedAgreements += (Get-SCSMRelationshipObject -BySource $Assets | ? { ($_.RelationshipId -eq $ITSMSoftAssetHasSoftAgreementRelCl.id) -and  ($_.ObjectStatus -ne $ObjectStatusPendingDeleteId ) })&#xD;&#xA;   if ($RelatedAgreements)&#xD;&#xA;   {&#xD;&#xA;    [int]$AgreementLicNumber = 0&#xD;&#xA;    [int]$ExpiredLics = 0&#xD;&#xA;    &#xD;&#xA;    foreach ($RelA in $RelatedAgreements)&#xD;&#xA;    {&#xD;&#xA;     $RelatedAgreement = $null&#xD;&#xA;     $RelatedAgreement = $RelA.TargetObject&#xD;&#xA;     &#xD;&#xA;     $RelAgreementObj = $null&#xD;&#xA;     $RelAgreementObj = Get-SCSMObject -Id $RelatedAgreement.Id&#xD;&#xA;     &#xD;&#xA;     [int]$AgreementLicNumber = $AgreementLicNumber + $RelAgreementObj.Quantity&#xD;&#xA;     [DateTime]$AgreementExpirationDate = $RelAgreementObj.ExpirationDate&#xD;&#xA;     [Datetime]$Today = (Get-Date)&#xD;&#xA;     if ($AgreementExpirationDate -lt $Today)&#xD;&#xA;     {&#xD;&#xA;      $ExpiredLics = $ExpiredLics + $RelAgreementObj.Quantity&#xD;&#xA;     }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    $RelatedSoft = $null&#xD;&#xA;    $RelatedSoft = (Get-SCSMRelationshipObject -BySource $Assets | ?{ ($_.RelationshipId -eq $ITSMSoftAssetHasSoftRelCl.id) -and ($_.ObjectStatus -ne $ObjectStatusPendingDeleteId ) }).TargetObject&#xD;&#xA;    $RelatedSoftObj = $null&#xD;&#xA;    $RelatedSoftObj = Get-SCSMObject -Id $RelatedSoft.id&#xD;&#xA;    [Int]$InstalledLicNumber = $RelatedSoftObj.Installed&#xD;&#xA;    &#xD;&#xA;    $HashString = $null&#xD;&#xA;    $ObjectHash = $null&#xD;&#xA;    $AvailableLic = $null&#xD;&#xA;    [int]$AvailableLic = $AgreementLicNumber - $InstalledLicNumber&#xD;&#xA;    if ($ExpiredLics)&#xD;&#xA;    {&#xD;&#xA;     $AvailableLic = $AvailableLic - $ExpiredLics&#xD;&#xA;    }&#xD;&#xA;    $HashString = ($AvailableLic.ToString() + $AgreementLicNumber.ToString() + $InstalledLicNumber.ToString() + $($RelatedSoft.DisplayName))&#xD;&#xA;    $ObjectHash = Get-StringHash -String $HashString&#xD;&#xA;    &#xD;&#xA;    $HasAlreadyLicStatusObjs = $null&#xD;&#xA;    $HasAlreadyLicStatusObjs = (Get-SCSMRelationshipObject -ByTarget $RelatedSoft | ?{ ($_.RelationshipId -eq $ITSMLicStatusHaSoftware.id)}).SourceObject&#xD;&#xA;    foreach ($HasAlreadyLicStatusObj in $HasAlreadyLicStatusObjs)&#xD;&#xA;    {&#xD;&#xA;     &#xD;&#xA;     $LicObjectStatus = $null&#xD;&#xA;     $LicObjectStatus = Get-SCSMObject -Id $HasAlreadyLicStatusObj.id&#xD;&#xA;    &#xD;&#xA;     if($LicObjectStatus.ObjectStatus.Id -eq $ObjectStatusPendingDeleteId)&#xD;&#xA;      {$HasAlreadyLicStatus = $null}&#xD;&#xA;     else&#xD;&#xA;      {$HasAlreadyLicStatus = $LicObjectStatus }&#xD;&#xA;    &#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;     &#xD;&#xA;    if (!$HasAlreadyLicStatus)&#xD;&#xA;    {&#xD;&#xA;     try&#xD;&#xA;     {&#xD;&#xA;      [decimal]$PError= '99.99'&#xD;&#xA;      [decimal]$PWarning = '90.00'&#xD;&#xA;      #calcs&#xD;&#xA;      $PercentageInstalled = $null&#xD;&#xA;      [decimal]$PercentageInstalled = &quot;{0:N2}&quot; -f (($InstalledLicNumber/$AgreementLicNumber) * 100)&#xD;&#xA;      &#xD;&#xA;      if &#xD;&#xA;      ($PercentageInstalled -gt $PError)&#xD;&#xA;      {&#xD;&#xA;       $LicStatus = $null&#xD;&#xA;       $Status = $null&#xD;&#xA;       [int]$LicStatus = 1&#xD;&#xA;       $Status = $LicStatusError&#xD;&#xA;      }&#xD;&#xA;      &#xD;&#xA;      elseif&#xD;&#xA;      ($PercentageInstalled -lt $PError -and $PercentageInstalled -ge $PWarning)&#xD;&#xA;      {&#xD;&#xA;       $LicStatus = $null&#xD;&#xA;       $Status = $null&#xD;&#xA;       [int]$LicStatus = 2&#xD;&#xA;       $Status = $LicStatusWarning&#xD;&#xA;      }&#xD;&#xA;      else&#xD;&#xA;      {&#xD;&#xA;       $LicStatus = $null&#xD;&#xA;       $Status = $null&#xD;&#xA;       [int]$LicStatus = 3&#xD;&#xA;       $Status = $LicStatusHealthy&#xD;&#xA;       &#xD;&#xA;      }&#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      #NewLicObject&#xD;&#xA;      $LicHashTable = $null&#xD;&#xA;      $LicHashTable = @{&#xD;&#xA;       &quot;DisplayName&quot; = $($RelatedSoft.DisplayName) + &quot; License&quot;;&#xD;&#xA;       &quot;Used&quot; = $InstalledLicNumber;&#xD;&#xA;       &quot;Installed&quot; = $AgreementLicNumber;&#xD;&#xA;       &quot;Available&quot; = $AvailableLic;&#xD;&#xA;       &quot;LastUpdate&quot; = (Get-Date);&#xD;&#xA;       &quot;GridStat&quot; = $LicStatus;&#xD;&#xA;       &quot;Status&quot; = $Status;&#xD;&#xA;       &quot;LicObjectHash&quot; = $ObjectHash;&#xD;&#xA;       &quot;Expired&quot; = $ExpiredLics;&#xD;&#xA;      }&#xD;&#xA;      &#xD;&#xA;      #create Object&#xD;&#xA;      $LicObj = $null&#xD;&#xA;      $LicObj = New-SCSMObject -Class $ITSMLicensingClassCl -PropertyHashtable $LicHashTable -PassThru&#xD;&#xA;      #create Relationships&#xD;&#xA;      if ($RelatedAgreements)&#xD;&#xA;      {&#xD;&#xA;       foreach ($RelAgg in $RelatedAgreements)&#xD;&#xA;       {&#xD;&#xA;        New-SCSMRelationshipObject -Source $LicObj -Target $RelAgg.TargetObject -Relationship $ITSMLicStatusHasAgreement -Bulk&#xD;&#xA;       }&#xD;&#xA;      }&#xD;&#xA;      &#xD;&#xA;      New-SCSMRelationshipObject -Source $LicObj -Target $RelatedSoftObj -Relationship $ITSMLicStatusHaSoftware -Bulk&#xD;&#xA;      &#xD;&#xA;     }&#xD;&#xA;     catch&#xD;&#xA;     {&#xD;&#xA;      Write-EventLog -LogName 'Operations Manager' -Source 'License Connector' -EventId $WarningId -Category 0 -EntryType Warning -Message &quot;Something Wrong Happened with License Connector while Processing New License Object: $($LicObj.DisplayName) with Exception Message: $($_.Exception.Message) and Exception: $($_.Exception.InnerException)&quot;&#xD;&#xA;     }&#xD;&#xA;     &#xD;&#xA;     &#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;     try&#xD;&#xA;     {&#xD;&#xA;      $HasAlreadyLicStatusobj = $null&#xD;&#xA;      $HasAlreadyLicStatusobj = Get-SCSMObject -Id $HasAlreadyLicStatus.id&#xD;&#xA;      &#xD;&#xA;      if ($HasAlreadyLicStatusobj.LicObjectHash -ne $ObjectHash)&#xD;&#xA;      {&#xD;&#xA;       #calcs&#xD;&#xA;       [decimal]$PError= '99.99'&#xD;&#xA;       [decimal]$PWarning = '90.00'&#xD;&#xA;       $PercentageInstalled = $null&#xD;&#xA;       [decimal]$PercentageInstalled = &quot;{0:N2}&quot; -f (($InstalledLicNumber/$AgreementLicNumber) * 100)&#xD;&#xA;       &#xD;&#xA;       if &#xD;&#xA;       &#xD;&#xA;       ($PercentageInstalled -gt $PError)&#xD;&#xA;       {&#xD;&#xA;        $LicStatus = $null&#xD;&#xA;        $Status = $null&#xD;&#xA;        [int]$LicStatus = 1&#xD;&#xA;        $Status = $LicStatusError &#xD;&#xA;       }&#xD;&#xA;       &#xD;&#xA;       elseif ($PercentageInstalled -lt $PError -and $PercentageInstalled -ge $PWarning)&#xD;&#xA;       {&#xD;&#xA;        $LicStatus = $null&#xD;&#xA;        $Status = $null&#xD;&#xA;        [int]$LicStatus = 2&#xD;&#xA;        $Status = $LicStatusWarning&#xD;&#xA;       }&#xD;&#xA;       else&#xD;&#xA;       {&#xD;&#xA;        $LicStatus = $null&#xD;&#xA;        $Status = $null&#xD;&#xA;        [int]$LicStatus = 3&#xD;&#xA;        $Status = $LicStatusHealthy&#xD;&#xA;        &#xD;&#xA;       }&#xD;&#xA;       &#xD;&#xA;       &#xD;&#xA;       $UpDLicHashTable = @{&#xD;&#xA;        &quot;Used&quot; = $InstalledLicNumber;&#xD;&#xA;        &quot;Installed&quot; = $AgreementLicNumber;&#xD;&#xA;        &quot;Available&quot; = $AvailableLic;&#xD;&#xA;        &quot;LastUpdate&quot; = (Get-Date);&#xD;&#xA;        &quot;GridStat&quot; = $LicStatus;&#xD;&#xA;        &quot;Status&quot; = $Status;&#xD;&#xA;        &quot;LicObjectHash&quot; = $ObjectHash;&#xD;&#xA;        &quot;Expired&quot; = $ExpiredLics;&#xD;&#xA;       }&#xD;&#xA;       &#xD;&#xA;       Set-SCSMObject -SMObject $HasAlreadyLicStatusobj -PropertyHashtable $UpDLicHashTable&#xD;&#xA;       &#xD;&#xA;       #Check Relationships&#xD;&#xA;       if ($RelatedAgreements)&#xD;&#xA;       {&#xD;&#xA;        foreach ($ARelAgg in $RelatedAgreements)&#xD;&#xA;        {&#xD;&#xA;         $HasAgreementAlreadyAssigned = $null&#xD;&#xA;         $HasAgreementAlreadyAssigned = Get-SCSMRelationshipObject -BySource $HasAlreadyLicStatusobj | ? { ($_.RelationshipId -eq $ITSMLicStatusHasAgreement.id) -and ($_.SourceObject.id -eq $ARelAgg.id) }&#xD;&#xA;         if (!$HasAgreementAlreadyAssigned)&#xD;&#xA;         {&#xD;&#xA;          New-SCSMRelationshipObject -Source $HasAlreadyLicStatusobj -Target $ARelAgg -Relationship $ITSMLicStatusHasAgreement -Bulk&#xD;&#xA;          &#xD;&#xA;         }&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;       }&#xD;&#xA;       &#xD;&#xA;      }&#xD;&#xA;      &#xD;&#xA;     }&#xD;&#xA;     catch&#xD;&#xA;     {&#xD;&#xA;      Write-EventLog -LogName 'Operations Manager' -Source 'License Connector' -EventId $WarningId -Category 0 -EntryType Warning -Message &quot;Something Wrong Happened with License Connector while Processing Already Exists License Object: $($HasAlreadyLicStatus.DisplayName) with Exception Message: $($_.Exception.Message) and Exception: $($_.Exception.InnerException)&quot;&#xD;&#xA;     }&#xD;&#xA;     &#xD;&#xA;    }&#xD;&#xA;   }&#xD;&#xA;   &#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA; }&#xD;&#xA; &#xD;&#xA; Set-SCSMObject -SMObject $Connector -Property &quot;Status&quot; -Value $InactiveId&#xD;&#xA; Set-SCSMObject -SMObject $Connector -Property &quot;LastSynced&quot; -Value (Get-Date)&#xD;&#xA; Write-EventLog -LogName 'Operations Manager' -Source 'License Connector' -EventId 10000 -Category 0 -EntryType Information -Message &quot;License Connector Finished Processing Software Assets and Agreements Objects&quot;&#xD;&#xA;}&#xD;&#xA;" TaskID="LicenseConnectorSyncNow.WindowsPowerShellScript.562d81b9_29c6_4e93_b917_72d8ebe01530" ScriptName="{x:Null}">
		<ns0:WindowsPowerShellScript.Parameters>
			<x:Array Type="{x:Type p7:ActivityParameter}" xmlns:p7="clr-namespace:Microsoft.ServiceManager.WorkflowAuthoring.Common;Assembly=Microsoft.ServiceManager.WorkflowAuthoring.Common, Version=7.0.5000.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" />
		</ns0:WindowsPowerShellScript.Parameters>
	</ns0:WindowsPowerShellScript>
</SequentialWorkflowActivity>