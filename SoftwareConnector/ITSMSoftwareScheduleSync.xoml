<SequentialWorkflowActivity x:Class="WorkflowAuthoring.ITSMSoftwareScheduleSync" x:Name="ITSMSoftwareScheduleSync" xmlns:ns0="clr-namespace:Microsoft.ServiceManager.WorkflowAuthoring.ActivityLibrary;Assembly=Microsoft.ServiceManager.WorkflowAuthoring.ActivityLibrary, Version=7.0.5000.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/workflow">
	<ns0:WindowsPowerShellScript Parameter="{x:Null}" SnapIns="{x:Null}" x:Name="ScheduleSync" PropertyToBind="{x:Null}" TimeoutSeconds="3600" ScriptBody="&lt;# &#xD;&#xA; .NOTES&#xD;&#xA; ===========================================================================&#xD;&#xA;  Created with:  SAPIEN Technologies, Inc., PowerShell Studio 2015 v4.2.99&#xD;&#xA;  Created on:    20/8/2016 20:00 PM&#xD;&#xA;  Created by:    Evangelos Kapsalakis &#xD;&#xA;  Organization:  Microsoft Hellas&#xD;&#xA;  Filename:      Software Connector&#xD;&#xA; ===========================================================================&#xD;&#xA; .DESCRIPTION&#xD;&#xA;  A description of the file.&#xD;&#xA;#&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Import-Module SMLets&#xD;&#xA;&#xD;&#xA;$ITSMSoftwareConnectorClass = Get-SCSMClass -Name SoftwareConnector$&#xD;&#xA;$Connector = Get-SCSMObject -Class $ITSMSoftwareConnectorClass&#xD;&#xA;if ($Connector.IsActive -eq $true)&#xD;&#xA;{&#xD;&#xA; Set-SCSMObject -SMObject $Connector -Property &quot;SyncNow&quot; -Value $false&#xD;&#xA; &#xD;&#xA; Function Get-StringHash([String]$String)&#xD;&#xA; {&#xD;&#xA;  $StringBuilder = New-Object System.Text.StringBuilder&#xD;&#xA;  [System.Security.Cryptography.HashAlgorithm]::Create('MD5').ComputeHash([System.Text.Encoding]::UTF8.GetBytes($String)) | %{&#xD;&#xA;   [Void]$StringBuilder.Append($_.ToString(&quot;x2&quot;))&#xD;&#xA;  }&#xD;&#xA;  $StringBuilder.ToString()&#xD;&#xA; }&#xD;&#xA; &#xD;&#xA; $HardwareConnectorAdminSettingCl = Get-SCSMClass -Name HardwareConnector$&#xD;&#xA; $HardwareConnectorAdminSettingObj = Get-SCSMObject -Class $HardwareConnectorAdminSettingCl&#xD;&#xA; &#xD;&#xA; Try&#xD;&#xA; {&#xD;&#xA;  $ActiveId = (Get-SCSMEnumeration -Name ITSMConnectorStatus.Running$).id&#xD;&#xA;  Set-SCSMObject -SMObject $Connector -Property &quot;Status&quot; -Value $ActiveId&#xD;&#xA; }&#xD;&#xA; Catch { }&#xD;&#xA; &#xD;&#xA; &#xD;&#xA; Try&#xD;&#xA; {&#xD;&#xA;  $events = [System.Diagnostics.EventLog]::SourceExists(&quot;Software Connector&quot;);&#xD;&#xA; }&#xD;&#xA; catch { }&#xD;&#xA; finally&#xD;&#xA; {&#xD;&#xA;  if ($events -ne $true)&#xD;&#xA;  {&#xD;&#xA;   New-EventLog -LogName 'Operations Manager' -Source 'Software Connector'&#xD;&#xA;   Write-EventLog -LogName 'Operations Manager' -Source 'Software Connector' -EventId 10000 -Category 0 -EntryType Information -Message &quot;Software Connector Succesfully Create Event Log Source&quot;&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  Write-EventLog -LogName 'Operations Manager' -Source 'Software Connector' -EventId 10000 -Category 0 -EntryType Information -Message &quot;Software Connector Start Processing Software Objects&quot;&#xD;&#xA; }&#xD;&#xA; &#xD;&#xA; $ErrorID = 10101&#xD;&#xA; $InfoID = 10100&#xD;&#xA; $WarningId = 10102&#xD;&#xA; &#xD;&#xA; #Object Classes&#xD;&#xA; $SoftwareClass = Get-SCSMClass -Name System.SoftwareItem$&#xD;&#xA; $ITSMSoftwareClass = Get-SCSMClass -Name Software$&#xD;&#xA; $ITSMVersionClass = Get-SCSMClass -Name SoftwareVersion$&#xD;&#xA; $ITSMPublisherClass = Get-SCSMClass -Name SoftwarePublisher$&#xD;&#xA; $ITSMSoftwareAssetClass = Get-SCSMClass -Name SoftwareAsset$&#xD;&#xA; $ITSMHardwareAssetClass = Get-SCSMClass -Name HardwareAsset$&#xD;&#xA; #Relationship Classes&#xD;&#xA; $SoftwareRelCl = Get-SCSMRelationshipClass -Name System.DeviceHasSoftwareItemInstalled$&#xD;&#xA; $ITSMSoftHasPubRelCl = Get-SCSMRelationshipClass -Name Relationship.SoftwareHasPublisher$&#xD;&#xA; $ITSMSoftHasVersionRelCl = Get-SCSMRelationshipClass -Name Relationship.SoftwareHasVersion$&#xD;&#xA; $ITSMSoftAssetHasSoftRelCl = Get-SCSMRelationshipClass -Name Relationship.SoftwareAssetHasSoftware$&#xD;&#xA; $ITSMSoftIsForHardwareAssetRelCl = Get-SCSMRelationshipClass -Name Relationship.SoftwareIsInstalledOnHardwareAsset$&#xD;&#xA; $PendingDeleteEnumId = (Get-SCSMEnumeration -Name System.ConfigItem.ObjectStatusEnum.PendingDelete$).Id&#xD;&#xA; $InactiveId = (Get-SCSMEnumeration -Name ITSMConnectorStatus.Inactive$).id&#xD;&#xA; $ReadinessStatusEnumId = (Get-SCSMEnumeration -Name ReadinessStatus.InUse$).id&#xD;&#xA; $NotAvailableStatusEnumId = (Get-SCSMEnumeration -Name ReadinessStatus.NotAvailable$).id&#xD;&#xA; $ConfigItemRelCl = Get-SCSMRelationshipClass -Name System.ConfigItemRelatesToConfigItem$&#xD;&#xA; $VersionIsForAsset = Get-SCSMRelationshipClass -Name Relationship.SoftwareVersionInstalledOnAssets$&#xD;&#xA; $AssetStatusEnumDeployedId = (Get-SCSMEnumeration -Name System.ConfigItem.AssetStatusEnum.Deployed$).id&#xD;&#xA; $AssetStatusEnumUndefinedId = (Get-SCSMEnumeration -Name System.ConfigItem.AssetStatusEnum.Undefined$).id&#xD;&#xA; &#xD;&#xA; $SoftwareInstalled = Get-SCSMObject -Class $SoftwareClass -Filter &quot;ObjectStatus -ne $PendingDeleteEnumId&quot;&#xD;&#xA; if ($SoftwareInstalled)&#xD;&#xA; {&#xD;&#xA;  foreach ($iSoftware in $SoftwareInstalled)&#xD;&#xA;  {&#xD;&#xA;   $iSoftName = $null&#xD;&#xA;   $iSoftPublisher = $null&#xD;&#xA;   $iSoftVersion = $null&#xD;&#xA;   $iSoftwareProductCode = $null&#xD;&#xA;   $HashString = $null&#xD;&#xA;   $iSoftIsInstalled = $null&#xD;&#xA;   $iSoftInstalledCount = $null&#xD;&#xA;   $iSoftExists = $null&#xD;&#xA;   $NotAvailable = $false&#xD;&#xA;   $iSoftName = $iSoftware.DisplayName&#xD;&#xA;   $iSoftPublisher = $iSoftware.Publisher&#xD;&#xA;   $iSoftVersion = $iSoftware.VersionString&#xD;&#xA;   $iSoftwareProductCode = $iSoftware.ProductCode&#xD;&#xA;   $LastModified = $iSoftware.LastModified&#xD;&#xA;   &#xD;&#xA;   &#xD;&#xA;   [string]$HashString = ($iSoftName + $iSoftPublisher + $iSoftwareProductCode)&#xD;&#xA;   $iSoftHash = Get-StringHash -String $HashString&#xD;&#xA;   &#xD;&#xA;   $iSoftExists = (Get-SCSMObject -Class $ITSMSoftwareClass -Filter &quot;ObjectHash -eq '$iSoftHash' and ObjectStatus -ne '$PendingDeleteEnumId'&quot;)&#xD;&#xA;   if (!$iSoftExists)&#xD;&#xA;   {&#xD;&#xA;    &#xD;&#xA;    $iSofthashtable = $null&#xD;&#xA;    $iSofthashtable = @{&#xD;&#xA;     &quot;DisplayName&quot; = $iSoftName;&#xD;&#xA;     &quot;SoftwareName&quot; = $iSoftName;&#xD;&#xA;     &quot;ProductCode&quot; = $iSoftwareProductCode;&#xD;&#xA;     &quot;LastDiscoveredDate&quot; = (Get-Date);&#xD;&#xA;     &quot;ObjectHash&quot; = $iSoftHash;&#xD;&#xA;     &quot;Installed&quot; = $iSoftInstalledCount;&#xD;&#xA;     &quot;LastModifiedSync&quot; = $LastModified;&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    $SoftItem = $null&#xD;&#xA;    $SoftItem = New-SCSMObject -Class $ITSMSoftwareClass -PropertyHashtable $iSofthashtable -PassThru&#xD;&#xA;    if ($SoftItem)&#xD;&#xA;    {&#xD;&#xA;     try&#xD;&#xA;     {&#xD;&#xA;      if ($iSoftPublisher.Length -gt 0)&#xD;&#xA;      {&#xD;&#xA;       try&#xD;&#xA;       {&#xD;&#xA;        $PublisherExists = $null&#xD;&#xA;        $PublisherExists = Get-SCSMObject -Class $ITSMPublisherClass | ?{ $_.DisplayName -match $iSoftPublisher }&#xD;&#xA;       }&#xD;&#xA;       Finally&#xD;&#xA;       {&#xD;&#xA;        if ($PublisherExists)&#xD;&#xA;        {&#xD;&#xA;         &#xD;&#xA;         New-SCSMRelationshipObject -Source $SoftItem -Target $PublisherExists -Relationship $ITSMSoftHasPubRelCl -Bulk&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;         &#xD;&#xA;         &#xD;&#xA;         &#xD;&#xA;         $PubHashTable = @{&#xD;&#xA;          &quot;DisplayName&quot; = $iSoftPublisher;&#xD;&#xA;          &quot;PublisherName&quot; = $iSoftPublisher;&#xD;&#xA;         }&#xD;&#xA;         &#xD;&#xA;         $Publisher = $null&#xD;&#xA;         $Publisher = New-SCSMObject -Class $ITSMPublisherClass -PropertyHashtable $PubHashTable -PassThru&#xD;&#xA;         if ($Publisher.PublisherName)&#xD;&#xA;         {&#xD;&#xA;          try&#xD;&#xA;          {&#xD;&#xA;           $Key = ($HardwareConnectorAdminSettingObj.Searchkey)&#xD;&#xA;           $env:MS_BingSearch_API_key = &quot;$Key&quot;&#xD;&#xA;           $Uri = 'https://api.cognitive.microsoft.com/bing/v5.0/search?q=' + $($Publisher.PublisherName)&#xD;&#xA;           $Result = Invoke-RestMethod -Uri $Uri -Method 'GET' -ContentType 'application/json' -Headers @{ 'Ocp-Apim-Subscription-Key' = $env:MS_BingSearch_API_key }&#xD;&#xA;           $Url = $Result.webPages.value[0].displayUrl&#xD;&#xA;           $PubUrl = &quot;http://&quot; + $Url&#xD;&#xA;          }&#xD;&#xA;          finally&#xD;&#xA;          {&#xD;&#xA;           Set-SCSMObject -SMObject $Publisher -Property &quot;website&quot; -Value $PubUrl&#xD;&#xA;          }&#xD;&#xA;          &#xD;&#xA;          New-SCSMRelationshipObject -Source $SoftItem -Target $Publisher -Relationship $ITSMSoftHasPubRelCl -Bulk&#xD;&#xA;         }&#xD;&#xA;        }&#xD;&#xA;       }&#xD;&#xA;      }&#xD;&#xA;      if ($iSoftVersion.Length -gt 0)&#xD;&#xA;      {&#xD;&#xA;       $VersionHashStr = $null&#xD;&#xA;       $VersionHash = $null&#xD;&#xA;       $Version = $null&#xD;&#xA;       &#xD;&#xA;       $VersionHashStr = $iSoftHash + $iSoftVersion&#xD;&#xA;       $VersionHash = Get-StringHash -String $VersionHashStr&#xD;&#xA;       $Version = Get-SCSMObject -Class $ITSMVersionClass -Filter &quot;VersionHash -eq $VersionHash&quot;&#xD;&#xA;       if ($Version)&#xD;&#xA;       {&#xD;&#xA;        #Check Already Relationship&#xD;&#xA;        $VerForSoft = (Get-SCSMRelationshipObject -BySource $Version | ? { RelationshipId -eq $ITSMSoftHasVersionRelCl.id }).TargetObject&#xD;&#xA;        if ($VerForSoft.id -ne $SoftItem.id)&#xD;&#xA;        {&#xD;&#xA;         New-SCSMRelationshipObject -Source $Version -Target $SoftItem -Relationship $ITSMSoftHasVersionRelCl -Bulk&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;       }&#xD;&#xA;       else&#xD;&#xA;       {&#xD;&#xA;        &#xD;&#xA;        $VerHashTable = $null&#xD;&#xA;        $VerHashTable = @{&#xD;&#xA;         &quot;DisplayName&quot; = $iSoftVersion;&#xD;&#xA;         &quot;SoftwareVersionMaj&quot; = $iSoftVersion;&#xD;&#xA;         &quot;VersionHash&quot; = $VersionHash;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        $Version = $null&#xD;&#xA;        $Version = New-SCSMObject -Class $ITSMVersionClass -PropertyHashtable $VerHashTable -PassThru&#xD;&#xA;        New-SCSMRelationshipObject -Source $Version -Target $SoftItem -Relationship $ITSMSoftHasVersionRelCl -Bulk&#xD;&#xA;       }&#xD;&#xA;      }&#xD;&#xA;      &#xD;&#xA;      $SoftWareAsset = $null&#xD;&#xA;      $SoftWareAsset = Get-SCSMObject -Class $ITSMSoftwareAssetClass -Filter &quot;DisplayName -eq $SoftItem.DisplayName&quot; -ErrorAction SilentlyContinue&#xD;&#xA;      &#xD;&#xA;      if (!$SoftWareAsset)&#xD;&#xA;      {&#xD;&#xA;       &#xD;&#xA;       $SoftAssTable = $null&#xD;&#xA;       $SoftAssTable = @{&#xD;&#xA;        &quot;DisplayName&quot; = $iSoftName;&#xD;&#xA;        &quot;AssetName&quot; = $iSoftName;&#xD;&#xA;        &quot;SerialNumber&quot; = $iSoftwareProductCode;&#xD;&#xA;        &quot;ReadinessStatus&quot; = $Ready;&#xD;&#xA;       }&#xD;&#xA;       &#xD;&#xA;       $SoftWareAsset = $null&#xD;&#xA;       $SoftWareAsset = New-SCSMObject -Class $ITSMSoftwareAssetClass -PropertyHashtable $SoftAssTable -PassThru&#xD;&#xA;       New-SCSMRelationshipObject -Source $SoftWareAsset -Target $SoftItem -Relationship $ITSMSoftAssetHasSoftRelCl -Bulk&#xD;&#xA;       &#xD;&#xA;      }&#xD;&#xA;      &#xD;&#xA;      $iSoftIsInstall = $null&#xD;&#xA;      $iSoftIsInstall = Get-SCSMRelationshipObject -ByTarget $iSoftware | ? { $_.RelationShipId -eq $SoftwareRelCl.id }&#xD;&#xA;      if ($iSoftIsInstall)&#xD;&#xA;      {&#xD;&#xA;       $Count = $iSoftIsInstall.Count&#xD;&#xA;       Set-SCSMObject -SMObject $Version -Property &quot;Installed&quot; -Value $Count&#xD;&#xA;       $FinalCount = $SoftItem.Installed + $Count&#xD;&#xA;       Set-SCSMObject -SMObject $SoftItem -Property &quot;Installed&quot; -Value $FinalCount&#xD;&#xA;       if ($FinalCount -gt 0)&#xD;&#xA;       {&#xD;&#xA;        Set-SCSMObject -SMObject $SoftWareAsset -Property &quot;ReadinessStatus&quot; -Value $ReadinessStatusEnumId&#xD;&#xA;        Set-SCSMObject -SMObject $SoftWareAsset -Property &quot;AssetStatus&quot; -Value $AssetStatusEnumDeployedId&#xD;&#xA;       }&#xD;&#xA;       else&#xD;&#xA;       {&#xD;&#xA;        Set-SCSMObject -SMObject $SoftWareAsset -Property &quot;ReadinessStatus&quot; -Value $NotAvailableStatusEnumId&#xD;&#xA;        Set-SCSMObject -SMObject $SoftWareAsset -Property &quot;AssetStatus&quot; -Value $AssetStatusEnumUndefinedId&#xD;&#xA;       }&#xD;&#xA;       &#xD;&#xA;       foreach ($Computer in $iSoftIsInstall)&#xD;&#xA;       {&#xD;&#xA;        $HardwareAsset = $null&#xD;&#xA;        $HardwareAssetPr = $null&#xD;&#xA;        $HardwareAssetPr = $Computer.SourceObject&#xD;&#xA;        $HardwareAsset = Get-SCSMObject -Class $ITSMHardwareAssetClass -Filter &quot;DisplayName -eq $($HardwareAssetPr.Name)&quot;&#xD;&#xA;        if ($HardwareAsset)&#xD;&#xA;        {&#xD;&#xA;         New-SCSMRelationshipObject -Source $Version -Target $HardwareAsset -Relationship $VersionIsForAsset -Bulk&#xD;&#xA;         New-SCSMRelationshipObject -Source $SoftItem -Target $HardwareAsset -Relationship $ITSMSoftIsForHardwareAssetRelCl -Bulk&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;       }&#xD;&#xA;       &#xD;&#xA;      }&#xD;&#xA;      &#xD;&#xA;      New-SCSMRelationshipObject -Relationship $ConfigItemRelCl -Source $SoftItem -Target $iSoftware -Bulk&#xD;&#xA;     }&#xD;&#xA;     catch&#xD;&#xA;     {&#xD;&#xA;      Write-EventLog -LogName 'Operations Manager' -Source 'Software Connector' -EventId $WarningId -Category 0 -EntryType Warning -Message &quot;Something Wrong Happened with Software Connector while Processing New Software: $($SoftItem.DisplayName) with Exception Message: $($_.Exception.Message) and Exception: $($_.Exception.InnerException)&quot;&#xD;&#xA;     }&#xD;&#xA;    }&#xD;&#xA;   }&#xD;&#xA;   else&#xD;&#xA;   {&#xD;&#xA;    $ObjLast = Get-Date -Date $($iSoftExists.LastModifiedSync) -Format &quot;yyyy-MM-dd hh:mm&quot;&#xD;&#xA;    $WinCLast = Get-Date -Date $($iSoftware.LastModified) -Format &quot;yyyy-MM-dd hh:mm&quot;&#xD;&#xA;    &#xD;&#xA;    if ($ObjLast -ne $WinCLast)&#xD;&#xA;    {&#xD;&#xA;     &#xD;&#xA;     try&#xD;&#xA;     {&#xD;&#xA;      $SoftObjs = Get-SCSMObject -Class $SoftwareClass -Filter &quot;DisplayName -eq $($iSoftware.DisplayName)&quot;&#xD;&#xA;      if ($SoftObjs.count -gt 1)&#xD;&#xA;      {&#xD;&#xA;       foreach ($SoftObj in $SoftObjs)&#xD;&#xA;       {&#xD;&#xA;        $iDate = Get-Date -Date $($SoftObj.LastModified) -Format &quot;yyyy-MM-dd hh:mm&quot;&#xD;&#xA;        if ($iDate -eq $ObjLast)&#xD;&#xA;        {&#xD;&#xA;         $IsOtherVersion = $true&#xD;&#xA;        }&#xD;&#xA;       }&#xD;&#xA;      }&#xD;&#xA;      else&#xD;&#xA;      {&#xD;&#xA;       $IsOtherVersion = $false&#xD;&#xA;      }&#xD;&#xA;      &#xD;&#xA;     }&#xD;&#xA;     finally&#xD;&#xA;     {&#xD;&#xA;      if ($IsOtherVersion -ne $true)&#xD;&#xA;      {&#xD;&#xA;       $ObjHistory = $null&#xD;&#xA;       $emg = $null&#xD;&#xA;       &#xD;&#xA;       $emg = New-Object Microsoft.EnterpriseManagement.EnterpriseManagementGroup &quot;localhost&quot;&#xD;&#xA;       $ObjHistory = $emg.EntityObjects.GetObjectHistoryTransactions($iSoftware) | ? { $_.DateOccurred -gt $ObjLast }&#xD;&#xA;       foreach ($ObjHist in $ObjHistory)&#xD;&#xA;       {&#xD;&#xA;        try&#xD;&#xA;        {&#xD;&#xA;         $PropertyChanges = $null&#xD;&#xA;         $RelationshipChanges = $null&#xD;&#xA;         &#xD;&#xA;         $PropertyChanges = $ObjHist.ObjectHistory.Values.ClassHistory.PropertyChanges&#xD;&#xA;         $RelationshipChanges = $ObjHist.ObjectHistory.Values.ClassHistory.RelationshipChanges&#xD;&#xA;        }&#xD;&#xA;        Catch&#xD;&#xA;        {&#xD;&#xA;         $PropertyChanges = $null&#xD;&#xA;         $RelationshipChanges = $null&#xD;&#xA;        }&#xD;&#xA;        Finally&#xD;&#xA;        {&#xD;&#xA;         if ($PropertyChanges)&#xD;&#xA;         {&#xD;&#xA;          if ($PropertyChanges.Count -gt 1)&#xD;&#xA;          {&#xD;&#xA;           foreach ($PropertyChange in $PropertyChanges.Values.Second)&#xD;&#xA;           {&#xD;&#xA;            $Propery = $null&#xD;&#xA;            $Value = $null&#xD;&#xA;            $ChangeType = $null&#xD;&#xA;            &#xD;&#xA;            $Propery = $PropertyChange.Type.Name&#xD;&#xA;            $Value = $PropertyChange.Value&#xD;&#xA;            $ChangeType = $ObjHist.ObjectHistory.Values.ClassHistory.ChangeType&#xD;&#xA;            &#xD;&#xA;            if ($ChangeType -eq &quot;Insert&quot;)&#xD;&#xA;            {&#xD;&#xA;             try&#xD;&#xA;             {&#xD;&#xA;              Set-SCSMObject -SMObject $iSoftExists -Property $Propery -Value $Value&#xD;&#xA;             }&#xD;&#xA;             catch&#xD;&#xA;             {&#xD;&#xA;              Write-EventLog -LogName 'Operations Manager' -Source 'Software Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Software Connector Cannot Update Object: $iSoftExists For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;             }&#xD;&#xA;            }&#xD;&#xA;            elseIf ($ChangeType -eq &quot;Modify&quot;)&#xD;&#xA;            {&#xD;&#xA;             try&#xD;&#xA;             {&#xD;&#xA;              Set-SCSMObject -SMObject $iSoftExists -Property $Propery -Value $Value&#xD;&#xA;             }&#xD;&#xA;             catch&#xD;&#xA;             {&#xD;&#xA;              Write-EventLog -LogName 'Operations Manager' -Source 'Software Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Software Connector Cannot Update Object: $iSoftExists For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;             }&#xD;&#xA;            }&#xD;&#xA;            elseif ($ChangeType -eq &quot;Delete&quot;)&#xD;&#xA;            {&#xD;&#xA;             try&#xD;&#xA;             {&#xD;&#xA;              Set-SCSMObject -SMObject $iSoftExists -Property $Propery -Value &quot; &quot;&#xD;&#xA;             }&#xD;&#xA;             catch&#xD;&#xA;             {&#xD;&#xA;              Write-EventLog -LogName 'Operations Manager' -Source 'Software Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Software Connector Cannot Update Object: $iSoftExists For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;             }&#xD;&#xA;            }&#xD;&#xA;           }&#xD;&#xA;          }&#xD;&#xA;          else&#xD;&#xA;          {&#xD;&#xA;           $Propery = $null&#xD;&#xA;           $Value = $null&#xD;&#xA;           $ChangeType = $null&#xD;&#xA;           &#xD;&#xA;           $Propery = $ObjHist.ObjectHistory.Values.ClassHistory.PropertyChanges.Key&#xD;&#xA;           $Value = $ObjHist.ObjectHistory.Values.ClassHistory.PropertyChanges.Value&#xD;&#xA;           $ChangeType = $ObjHist.ObjectHistory.Values.ClassHistory.PropertyChanges.ChangeType&#xD;&#xA;           &#xD;&#xA;           if ($ChangeType -eq &quot;Insert&quot;)&#xD;&#xA;           {&#xD;&#xA;            try&#xD;&#xA;            {&#xD;&#xA;             Set-SCSMObject -SMObject $iSoftExists -Property $Propery -Value $Value&#xD;&#xA;            }&#xD;&#xA;            catch&#xD;&#xA;            {&#xD;&#xA;             Write-EventLog -LogName 'Operations Manager' -Source 'Software Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Software Connector Cannot Update Object: $iSoftExists For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;            }&#xD;&#xA;           }&#xD;&#xA;           elseIf ($ChangeType -eq &quot;Modify&quot;)&#xD;&#xA;           {&#xD;&#xA;            try&#xD;&#xA;            {&#xD;&#xA;             Set-SCSMObject -SMObject $iSoftExists -Property $Propery -Value $Value&#xD;&#xA;            }&#xD;&#xA;            catch&#xD;&#xA;            {&#xD;&#xA;             Write-EventLog -LogName 'Operations Manager' -Source 'Software Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Software Connector Cannot Update Object: $iSoftExists For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;            }&#xD;&#xA;           }&#xD;&#xA;           elseif ($ChangeType -eq &quot;Delete&quot;)&#xD;&#xA;           {&#xD;&#xA;            try&#xD;&#xA;            {&#xD;&#xA;             Set-SCSMObject -SMObject $iSoftExists -Property $Propery -Value &quot;&quot;&#xD;&#xA;            }&#xD;&#xA;            catch&#xD;&#xA;            {&#xD;&#xA;             Write-EventLog -LogName 'Operations Manager' -Source 'Software Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Software Connector Cannot Update Object: $iSoftExists For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;            }&#xD;&#xA;           }&#xD;&#xA;           &#xD;&#xA;          }&#xD;&#xA;          &#xD;&#xA;          &#xD;&#xA;         }&#xD;&#xA;         elseif ($RelationshipChanges)&#xD;&#xA;         {&#xD;&#xA;          $SourceObj = $null&#xD;&#xA;          $TargetObj = $null&#xD;&#xA;          $RelationshipClassObj = $null&#xD;&#xA;          $RChangeType = $null&#xD;&#xA;          &#xD;&#xA;          $SourceObj = $ObjHist.ObjectHistory.Values.RelationshipHistory.SourceObjectId&#xD;&#xA;          $TargetObj = $ObjHist.ObjectHistory.Values.RelationshipHistory.TargetObjectId&#xD;&#xA;          $RelationshipClassObj = $ObjHist.ObjectHistory.Values.RelationshipHistory.ManagementPackRelationshipTypeId&#xD;&#xA;          $RChangeType = $ObjHist.ObjectHistory.Values.RelationshipHistory.ChangeType&#xD;&#xA;          &#xD;&#xA;          $Src = $null&#xD;&#xA;          $Tar = $null&#xD;&#xA;          $Rel = $null&#xD;&#xA;          &#xD;&#xA;          $Src = Get-SCSMObject -Id $SourceObj&#xD;&#xA;          $Tar = Get-SCSMObject -Id $TargetObj&#xD;&#xA;          $Rel = Get-SCSMRelationshipClass -id = $RelationshipClassObj&#xD;&#xA;          &#xD;&#xA;          if ($RChangeType -eq &quot;Insert&quot;)&#xD;&#xA;          {&#xD;&#xA;           try&#xD;&#xA;           {&#xD;&#xA;            New-SCSMRelationshipObject -Source $Src -Target $Tar -Relationship $Rel -Bulk&#xD;&#xA;           }&#xD;&#xA;           catch&#xD;&#xA;           {&#xD;&#xA;            Write-EventLog -LogName 'Operations Manager' -Source 'Software Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Software Connector Cannot Update Object Relationships:$iSoftExists For Relationship:$Rel with Source:$Src and Target:$Tar for Change Type:$ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;           }&#xD;&#xA;          }&#xD;&#xA;          elseIf ($RChangeType -eq &quot;Modify&quot;)&#xD;&#xA;          {&#xD;&#xA;           try&#xD;&#xA;           {&#xD;&#xA;            New-SCSMRelationshipObject -Source $Src -Target $Tar -Relationship $Rel -Bulk&#xD;&#xA;           }&#xD;&#xA;           catch&#xD;&#xA;           {&#xD;&#xA;            Write-EventLog -LogName 'Operations Manager' -Source 'Software Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Software Connector Cannot Update Object Relationships:$iSoftExists For Relationship:$Rel with Source:$Src and Target:$Tar for Change Type:$ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;           }&#xD;&#xA;          }&#xD;&#xA;          elseif ($RChangeType -eq &quot;Delete&quot;)&#xD;&#xA;          {&#xD;&#xA;           try&#xD;&#xA;           {&#xD;&#xA;            Get-SCSMRelationshipObject -BySource $Src | ? { ($_.RelationshipClassId -eq $Rel) } | Remove-SCSMRelationshipObject&#xD;&#xA;           }&#xD;&#xA;           catch&#xD;&#xA;           {&#xD;&#xA;            &#xD;&#xA;            Write-EventLog -LogName 'Operations Manager' -Source 'Software Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Software Connector Cannot Update Object Relationships:$iSoftExists For Relationship:$Rel with Source:$Src and Target:$Tar for Change Type:$ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;            &#xD;&#xA;           }&#xD;&#xA;          }&#xD;&#xA;          &#xD;&#xA;         }&#xD;&#xA;         &#xD;&#xA;        }&#xD;&#xA;       }&#xD;&#xA;       Set-SCSMObject -SMObject $iSoftExists -Property &quot;LastModifiedSync&quot; -Value $LastModified&#xD;&#xA;       &#xD;&#xA;      }&#xD;&#xA;     }&#xD;&#xA;     &#xD;&#xA;     &#xD;&#xA;    }&#xD;&#xA;   }&#xD;&#xA;   &#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA; }&#xD;&#xA; &#xD;&#xA; &#xD;&#xA; $Publs = Get-SCSMObject -Class $ITSMPublisherClass&#xD;&#xA; foreach ($Pub in $Publs)&#xD;&#xA; {&#xD;&#xA;  Set-SCSMObject -SMObject $Pub -Property &quot;SoftwareCount&quot; -Value &quot;0&quot;&#xD;&#xA;  $SoftCount = $null&#xD;&#xA;  $SoftCount = (Get-SCSMRelationshipObject -bytarget $Pub | ? RelationshipId -eq $ITSMSoftHasPubRelCl.Id).Count&#xD;&#xA;  Set-SCSMObject -SMObject $Pub -property &quot;SoftwareCount&quot; -Value $SoftCount&#xD;&#xA; }&#xD;&#xA; &#xD;&#xA; Set-SCSMObject -SMObject $Connector -Property &quot;Status&quot; -Value $InactiveId&#xD;&#xA; Set-SCSMObject -SMObject $Connector -Property &quot;LastSynced&quot; -Value (Get-Date)&#xD;&#xA; Set-SCSMObject -SMObject $Connector -Property &quot;SyncNow&quot; -Value $false&#xD;&#xA; Write-EventLog -LogName 'Operations Manager' -Source 'Software Connector' -EventId 10000 -Category 0 -EntryType Information -Message &quot;Software Connector Finished Processing Software Objects&quot;&#xD;&#xA;}&#xD;&#xA;# SIG # Begin signature block&#xD;&#xA;# MIIUAAYJKoZIhvcNAQcCoIIT8TCCE+0CAQExCzAJBgUrDgMCGgUAMGkGCisGAQQB&#xD;&#xA;# gjcCAQSgWzBZMDQGCisGAQQBgjcCAR4wJgIDAQAABBAfzDtgWUsITrck0sYpfvNR&#xD;&#xA;# AgEAAgEAAgEAAgEAAgEAMCEwCQYFKw4DAhoFAAQUOGwu3VAUbAiDbWLsWuoUTJUk&#xD;&#xA;# D8Oggg60MIIEFDCCAvygAwIBAgILBAAAAAABL07hUtcwDQYJKoZIhvcNAQEFBQAw&#xD;&#xA;# VzELMAkGA1UEBhMCQkUxGTAXBgNVBAoTEEdsb2JhbFNpZ24gbnYtc2ExEDAOBgNV&#xD;&#xA;# BAsTB1Jvb3QgQ0ExGzAZBgNVBAMTEkdsb2JhbFNpZ24gUm9vdCBDQTAeFw0xMTA0&#xD;&#xA;# MTMxMDAwMDBaFw0yODAxMjgxMjAwMDBaMFIxCzAJBgNVBAYTAkJFMRkwFwYDVQQK&#xD;&#xA;# ExBHbG9iYWxTaWduIG52LXNhMSgwJgYDVQQDEx9HbG9iYWxTaWduIFRpbWVzdGFt&#xD;&#xA;# cGluZyBDQSAtIEcyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlO9l&#xD;&#xA;# +LVXn6BTDTQG6wkft0cYasvwW+T/J6U00feJGr+esc0SQW5m1IGghYtkWkYvmaCN&#xD;&#xA;# d7HivFzdItdqZ9C76Mp03otPDbBS5ZBb60cO8eefnAuQZT4XljBFcm05oRc2yrmg&#xD;&#xA;# jBtPCBn2gTGtYRakYua0QJ7D/PuV9vu1LpWBmODvxevYAll4d/eq41JrUJEpxfz3&#xD;&#xA;# zZNl0mBhIvIG+zLdFlH6Dv2KMPAXCae78wSuq5DnbN96qfTvxGInX2+ZbTh0qhGL&#xD;&#xA;# 2t/HFEzphbLswn1KJo/nVrqm4M+SU4B09APsaLJgvIQgAIMboe60dAXBKY5i0Eex&#xD;&#xA;# +vBTzBj5Ljv5cH60JQIDAQABo4HlMIHiMA4GA1UdDwEB/wQEAwIBBjASBgNVHRMB&#xD;&#xA;# Af8ECDAGAQH/AgEAMB0GA1UdDgQWBBRG2D7/3OO+/4Pm9IWbsN1q1hSpwTBHBgNV&#xD;&#xA;# HSAEQDA+MDwGBFUdIAAwNDAyBggrBgEFBQcCARYmaHR0cHM6Ly93d3cuZ2xvYmFs&#xD;&#xA;# c2lnbi5jb20vcmVwb3NpdG9yeS8wMwYDVR0fBCwwKjAooCagJIYiaHR0cDovL2Ny&#xD;&#xA;# bC5nbG9iYWxzaWduLm5ldC9yb290LmNybDAfBgNVHSMEGDAWgBRge2YaRQ2XyolQ&#xD;&#xA;# L30EzTSo//z9SzANBgkqhkiG9w0BAQUFAAOCAQEATl5WkB5GtNlJMfO7FzkoG8IW&#xD;&#xA;# 3f1B3AkFBJtvsqKa1pkuQJkAVbXqP6UgdtOGNNQXzFU6x4Lu76i6vNgGnxVQ380W&#xD;&#xA;# e1I6AtcZGv2v8Hhc4EvFGN86JB7arLipWAQCBzDbsBJe/jG+8ARI9PBw+DpeVoPP&#xD;&#xA;# PfsNvPTF7ZedudTbpSeE4zibi6c1hkQgpDttpGoLoYP9KOva7yj2zIhd+wo7AKvg&#xD;&#xA;# IeviLzVsD440RZfroveZMzV+y5qKu0VN5z+fwtmK+mWybsd+Zf/okuEsMaL3sCc2&#xD;&#xA;# SI8mbzvuTXYfecPlf5Y1vC0OzAGwjn//UYCAp5LUs0RGZIyHTxZjBzFLY7Df8zCC&#xD;&#xA;# BJ8wggOHoAMCAQICEhEh1pmnZJc+8fhCfukZzFNBFDANBgkqhkiG9w0BAQUFADBS&#xD;&#xA;# MQswCQYDVQQGEwJCRTEZMBcGA1UEChMQR2xvYmFsU2lnbiBudi1zYTEoMCYGA1UE&#xD;&#xA;# AxMfR2xvYmFsU2lnbiBUaW1lc3RhbXBpbmcgQ0EgLSBHMjAeFw0xNjA1MjQwMDAw&#xD;&#xA;# MDBaFw0yNzA2MjQwMDAwMDBaMGAxCzAJBgNVBAYTAlNHMR8wHQYDVQQKExZHTU8g&#xD;&#xA;# R2xvYmFsU2lnbiBQdGUgTHRkMTAwLgYDVQQDEydHbG9iYWxTaWduIFRTQSBmb3Ig&#xD;&#xA;# TVMgQXV0aGVudGljb2RlIC0gRzIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK&#xD;&#xA;# AoIBAQCwF66i07YEMFYeWA+x7VWk1lTL2PZzOuxdXqsl/Tal+oTDYUDFRrVZUjtC&#xD;&#xA;# oi5fE2IQqVvmc9aSJbF9I+MGs4c6DkPw1wCJU6IRMVIobl1AcjzyCXenSZKX1GyQ&#xD;&#xA;# oHan/bjcs53yB2AsT1iYAGvTFVTg+t3/gCxfGKaY/9Sr7KFFWbIub2Jd4NkZrItX&#xD;&#xA;# nKgmK9kXpRDSRwgacCwzi39ogCq1oV1r3Y0CAikDqnw3u7spTj1Tk7Om+o/SWJMV&#xD;&#xA;# TLktq4CjoyX7r/cIZLB6RA9cENdfYTeqTmvT0lMlnYJz+iz5crCpGTkqUPqp0Dw6&#xD;&#xA;# yuhb7/VfUfT5CtmXNd5qheYjBEKvAgMBAAGjggFfMIIBWzAOBgNVHQ8BAf8EBAMC&#xD;&#xA;# B4AwTAYDVR0gBEUwQzBBBgkrBgEEAaAyAR4wNDAyBggrBgEFBQcCARYmaHR0cHM6&#xD;&#xA;# Ly93d3cuZ2xvYmFsc2lnbi5jb20vcmVwb3NpdG9yeS8wCQYDVR0TBAIwADAWBgNV&#xD;&#xA;# HSUBAf8EDDAKBggrBgEFBQcDCDBCBgNVHR8EOzA5MDegNaAzhjFodHRwOi8vY3Js&#xD;&#xA;# Lmdsb2JhbHNpZ24uY29tL2dzL2dzdGltZXN0YW1waW5nZzIuY3JsMFQGCCsGAQUF&#xD;&#xA;# BwEBBEgwRjBEBggrBgEFBQcwAoY4aHR0cDovL3NlY3VyZS5nbG9iYWxzaWduLmNv&#xD;&#xA;# bS9jYWNlcnQvZ3N0aW1lc3RhbXBpbmdnMi5jcnQwHQYDVR0OBBYEFNSihEo4Whh/&#xD;&#xA;# uk8wUL2d1XqH1gn3MB8GA1UdIwQYMBaAFEbYPv/c477/g+b0hZuw3WrWFKnBMA0G&#xD;&#xA;# CSqGSIb3DQEBBQUAA4IBAQCPqRqRbQSmNyAOg5beI9Nrbh9u3WQ9aCEitfhHNmmO&#xD;&#xA;# 4aVFxySiIrcpCcxUWq7GvM1jjrM9UEjltMyuzZKNniiLE0oRqr2j79OyNvy0oXK/&#xD;&#xA;# bZdjeYxEvHAvfvO83YJTqxr26/ocl7y2N5ykHDC8q7wtRzbfkiAD6HHGWPZ1BZo0&#xD;&#xA;# 8AtZWoJENKqA5C+E9kddlsm2ysqdt6a65FDT1De4uiAO0NOSKlvEWbuhbds8zkSd&#xD;&#xA;# wTgqreONvc0JdxoQvmcKAjZkiLmzGybu555gxEaovGEzbM9OuZy5avCfN/61PU+a&#xD;&#xA;# 003/3iCOTpem/Z8JvE3KGHbJsE2FUPKA0h0G9VgEB7EYMIIF9TCCBN2gAwIBAgIQ&#xD;&#xA;# KkVe0MLlP86cwi4qAhN8pjANBgkqhkiG9w0BAQsFADB4MQswCQYDVQQGEwJJTDEW&#xD;&#xA;# MBQGA1UEChMNU3RhcnRDb20gTHRkLjEpMCcGA1UECxMgU3RhcnRDb20gQ2VydGlm&#xD;&#xA;# aWNhdGlvbiBBdXRob3JpdHkxJjAkBgNVBAMTHVN0YXJ0Q29tIENsYXNzIDEgRFYg&#xD;&#xA;# U2VydmVyIENBMB4XDTE2MDgyMDEyMDkzNloXDTE3MDgyMDEyMDkzNlowKTELMAkG&#xD;&#xA;# A1UEBhMCR1IxGjAYBgNVBAMMEXNpZ24ubXNoZWxsYXMuY29tMIIBIjANBgkqhkiG&#xD;&#xA;# 9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlhTZTQAyYBBLvnzT2hpfFY0vS/X6CcYDHNR2&#xD;&#xA;# lvwFJQBvpX2eM5k2jqiBDiDX4gY9YiwWukq+MiGGblNQiYa7d2Qgjs5TjoS/lMNJ&#xD;&#xA;# lZI/WIYj3H5e77qT7VwRS5KCmydId8Zud8avSa95l5sK45cnrFiT+flN0fe7b7nw&#xD;&#xA;# gv+4n7++1AlwvgzAfPdO/pY5RrTzQ+vOkhPF+jCFJ0gfG981DOWlISkorMnVwv2h&#xD;&#xA;# dXVN9bEzQ2THs+QQFeu1rzOlUEaTaaRm6kDlNZzz4XKU9U1gNxsT5Z52xD2sgZno&#xD;&#xA;# PAo6g/0Cm7jGuD8IAG32yrDACI2EtIAPDxCQajmivMx1ojivgwIDAQABo4ICyDCC&#xD;&#xA;# AsQwDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcD&#xD;&#xA;# ATAJBgNVHRMEAjAAMB0GA1UdDgQWBBQNOShOI1UPPhQjPuSYSAnfVeTifTAfBgNV&#xD;&#xA;# HSMEGDAWgBTXkU4BxLC/+Mhnk0Sc5zP6rZMMrzBvBggrBgEFBQcBAQRjMGEwJAYI&#xD;&#xA;# KwYBBQUHMAGGGGh0dHA6Ly9vY3NwLnN0YXJ0c3NsLmNvbTA5BggrBgEFBQcwAoYt&#xD;&#xA;# aHR0cDovL2FpYS5zdGFydHNzbC5jb20vY2VydHMvc2NhLnNlcnZlcjEuY3J0MDgG&#xD;&#xA;# A1UdHwQxMC8wLaAroCmGJ2h0dHA6Ly9jcmwuc3RhcnRzc2wuY29tL3NjYS1zZXJ2&#xD;&#xA;# ZXIxLmNybDAcBgNVHREEFTATghFzaWduLm1zaGVsbGFzLmNvbTAjBgNVHRIEHDAa&#xD;&#xA;# hhhodHRwOi8vd3d3LnN0YXJ0c3NsLmNvbS8wUQYDVR0gBEowSDAIBgZngQwBAgEw&#xD;&#xA;# PAYLKwYBBAGBtTcBAgUwLTArBggrBgEFBQcCARYfaHR0cHM6Ly93d3cuc3RhcnRz&#xD;&#xA;# c2wuY29tL3BvbGljeTCCAQUGCisGAQQB1nkCBAIEgfYEgfMA8QB2AGj2mPgfZIK+&#xD;&#xA;# OozuuSgdTPxxUV1nk9RE0QpnrLtPT/vEAAABVqgDmKcAAAQDAEcwRQIgJLiVb+Ja&#xD;&#xA;# a6BunnPE5hXdwenireOqMnkM24O7C6oTupUCIQDN0bYMsAwYmQVqO6EVxeQ+VbYd&#xD;&#xA;# iWfbnPrw79AZeM68YAB3AKS5CZC0GFgUh7sTosxncAo8NZgE+RvfuON3zQ7IDdwQ&#xD;&#xA;# AAABVqgDmcMAAAQDAEgwRgIhAPrLozUMYEWEdyPT0wBhuz9cUeGuWw4YluLGMO25&#xD;&#xA;# xAxwAiEAhKlyExSyer/qcuThyqGQEYR7YcuaHp7nVAnS8ffNsXQwDQYJKoZIhvcN&#xD;&#xA;# AQELBQADggEBACe6BNqcaS4N6cBHguRXo1XBottsPHUEqk+WaFsKvBndjzr01BkI&#xD;&#xA;# NhymaC64eMtnHRIybThGNhSQ+JLmGijM+Su414IJu0R1hkDUVo0hsNdCyL+1aBL1&#xD;&#xA;# pjqDvy/iqgP5wN9PU/5DAIvz8vAFJQC62Ci9x4whhtkiHjFsPwevgPU3om4rjaTb&#xD;&#xA;# 4wzAoDn49nXcEQO6WPuQJTgyzJoUL3+isk2PFW1XLS3IvXsbUNQ7V56woOCiPEyh&#xD;&#xA;# zGSpn/dhKYgfCgVlHvA2V3fzOBjlXq3PsKC38/gIc9HTcjcXN3oHsAGUI0jfjeSD&#xD;&#xA;# TS39FyssETg4QlSXrf4QZmjpf5v2ZJ+EvloxggS2MIIEsgIBATCBjDB4MQswCQYD&#xD;&#xA;# VQQGEwJJTDEWMBQGA1UEChMNU3RhcnRDb20gTHRkLjEpMCcGA1UECxMgU3RhcnRD&#xD;&#xA;# b20gQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxJjAkBgNVBAMTHVN0YXJ0Q29tIENs&#xD;&#xA;# YXNzIDEgRFYgU2VydmVyIENBAhAqRV7QwuU/zpzCLioCE3ymMAkGBSsOAwIaBQCg&#xD;&#xA;# WjAYBgorBgEEAYI3AgEMMQowCKACgAChAoAAMBkGCSqGSIb3DQEJAzEMBgorBgEE&#xD;&#xA;# AYI3AgEEMCMGCSqGSIb3DQEJBDEWBBQzh8V7ZA9tsozo6ZI4PwVAUJ//szANBgkq&#xD;&#xA;# hkiG9w0BAQEFAASCAQB37gpAf3YC7qMEkeh/Ln0xFqmxD/RjhlB4nZ+ZNcgaz4X4&#xD;&#xA;# SjVkPI5oilJKHwy3lTtpCUHUBjDDYQ1Ga5E3s5Ku7N5LLc4ibyI7DXhPONsFX9dc&#xD;&#xA;# gL8c2+cy+xXOgvHB70+izGaeY5Z7UQ5UjVp9JNPp6/cXpX9gEX7UoVoFuP2AP8Xq&#xD;&#xA;# RGD/WLc6XayoRgFLWaIFHa67w2b/Jq9xitfIyEX2yqkATdksSK3e6QvdaqvLkYs5&#xD;&#xA;# VK1ePCa7YNavOHs06gkmhba2DkoKeW2T0x2HR/m+1GJfYMa7pzLW9v6b5QPvUig2&#xD;&#xA;# ryO/0gZqqnVxxet0+ogML4DTq9rqOttHOv7b3DSZoYICojCCAp4GCSqGSIb3DQEJ&#xD;&#xA;# BjGCAo8wggKLAgEBMGgwUjELMAkGA1UEBhMCQkUxGTAXBgNVBAoTEEdsb2JhbFNp&#xD;&#xA;# Z24gbnYtc2ExKDAmBgNVBAMTH0dsb2JhbFNpZ24gVGltZXN0YW1waW5nIENBIC0g&#xD;&#xA;# RzICEhEh1pmnZJc+8fhCfukZzFNBFDAJBgUrDgMCGgUAoIH9MBgGCSqGSIb3DQEJ&#xD;&#xA;# AzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE2MDgyMTEwNTExOFowIwYJ&#xD;&#xA;# KoZIhvcNAQkEMRYEFFaI9OETPFtHU7J6FdIJi/FFDnOeMIGdBgsqhkiG9w0BCRAC&#xD;&#xA;# DDGBjTCBijCBhzCBhAQUY7gvq2H1g5CWlQULACScUCkz7HkwbDBWpFQwUjELMAkG&#xD;&#xA;# A1UEBhMCQkUxGTAXBgNVBAoTEEdsb2JhbFNpZ24gbnYtc2ExKDAmBgNVBAMTH0ds&#xD;&#xA;# b2JhbFNpZ24gVGltZXN0YW1waW5nIENBIC0gRzICEhEh1pmnZJc+8fhCfukZzFNB&#xD;&#xA;# FDANBgkqhkiG9w0BAQEFAASCAQBPwA/WmNOe5jQu/AZ7c5CLq9bG71p03IDDp1X9&#xD;&#xA;# dKULThhuULOiaVBWuE7H522e0kqYs/iIxma8ValND28i40ky5xtqnvVlAUn7m2re&#xD;&#xA;# zaqneeuSWVDUunjgKEgctrM0Zt/Cb/cnQQag6sqEYb1tONA74PwLfo2fPxefro7L&#xD;&#xA;# Buq3EpV9oIYFw/8E7FdE5E+siDmEDujZ0n1xB0mIr77aycGMlrcWrV//PE5RDV9b&#xD;&#xA;# B+Iys/0GXXnvszys8um6Xk6wbko/R4X1gvg/gOuXomeHMF2Pudh9ym5mBH7PYaI8&#xD;&#xA;# ddgU6ZwWnnCItm6RXzF2BOofXiXACOZFmvtzYvqOBmuka+WC&#xD;&#xA;# SIG # End signature block&#xD;&#xA;" TaskID="ITSMSoftwareScheduleSync.WindowsPowerShellScript.8e6f1b84_a0e8_4f40_84f3_7c2dec2004ac" ScriptName="{x:Null}">
		<ns0:WindowsPowerShellScript.Parameters>
			<x:Array Type="{x:Type p7:ActivityParameter}" xmlns:p7="clr-namespace:Microsoft.ServiceManager.WorkflowAuthoring.Common;Assembly=Microsoft.ServiceManager.WorkflowAuthoring.Common, Version=7.0.5000.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" />
		</ns0:WindowsPowerShellScript.Parameters>
	</ns0:WindowsPowerShellScript>
</SequentialWorkflowActivity>