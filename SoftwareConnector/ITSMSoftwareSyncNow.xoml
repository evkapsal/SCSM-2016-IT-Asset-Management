<SequentialWorkflowActivity x:Class="WorkflowAuthoring.ITSMSoftwareSyncNow" x:Name="ITSMSoftwareSyncNow" xmlns:ns0="clr-namespace:Microsoft.ServiceManager.WorkflowAuthoring.ActivityLibrary;Assembly=Microsoft.ServiceManager.WorkflowAuthoring.ActivityLibrary, Version=7.0.5000.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/workflow">
	<ns0:WindowsPowerShellScript TimeoutSeconds="3600" x:Name="SyncNow" ScriptBody="&#xD;&#xA;#NOTES&#xD;&#xA;#===========================================================================&#xD;&#xA;#Created with:  SAPIEN Technologies, Inc., PowerShell Studio 2015&#xD;&#xA;#Created on:    13/5/2017 24:00 PM&#xD;&#xA;#Created by:     Evangelos Kapsalakis&#xD;&#xA;#Organization:   Microsoft Hellas&#xD;&#xA;#Filename:  Software Connector V5.1&#xD;&#xA;#===========================================================================&#xD;&#xA;#.DESCRIPTION&#xD;&#xA;#This Script proccesing Software Items from SCSM CMDB&#xD;&#xA;&#xD;&#xA;Import-Module SMLets&#xD;&#xA;&#xD;&#xA;$ITSMSoftwareConnectorClass = Get-SCSMClass -Name SoftwareConnector$&#xD;&#xA;$Connector = Get-SCSMObject -Class $ITSMSoftwareConnectorClass&#xD;&#xA;if ($Connector.IsActive -eq $true)&#xD;&#xA;{&#xD;&#xA; &#xD;&#xA; Set-SCSMObject -SMObject $Connector -Property &quot;SyncNow&quot; -Value $false&#xD;&#xA; &#xD;&#xA; Function Get-StringHash([String]$String)&#xD;&#xA; {&#xD;&#xA;  $StringBuilder = New-Object System.Text.StringBuilder&#xD;&#xA;  [System.Security.Cryptography.HashAlgorithm]::Create('MD5').ComputeHash([System.Text.Encoding]::UTF8.GetBytes($String)) | %{&#xD;&#xA;   [Void]$StringBuilder.Append($_.ToString(&quot;x2&quot;))&#xD;&#xA;  }&#xD;&#xA;  $StringBuilder.ToString()&#xD;&#xA; }&#xD;&#xA; &#xD;&#xA; $HardwareConnectorAdminSettingCl = Get-SCSMClass -Name HardwareConnector$&#xD;&#xA; $HardwareConnectorAdminSettingObj = Get-SCSMObject -Class $HardwareConnectorAdminSettingCl&#xD;&#xA; &#xD;&#xA; Try&#xD;&#xA; {&#xD;&#xA;  $ActiveId = (Get-SCSMEnumeration -Name ITSMConnectorStatus.Running$).id&#xD;&#xA;  Set-SCSMObject -SMObject $Connector -Property &quot;Status&quot; -Value $ActiveId&#xD;&#xA; }&#xD;&#xA; Catch { }&#xD;&#xA; &#xD;&#xA; &#xD;&#xA; Try&#xD;&#xA; {&#xD;&#xA;  $events = [System.Diagnostics.EventLog]::SourceExists(&quot;Software Connector&quot;);&#xD;&#xA; }&#xD;&#xA; catch { }&#xD;&#xA; finally&#xD;&#xA; {&#xD;&#xA;  if ($events -ne $true)&#xD;&#xA;  {&#xD;&#xA;   New-EventLog -LogName 'Operations Manager' -Source 'Software Connector'&#xD;&#xA;   Write-EventLog -LogName 'Operations Manager' -Source 'Software Connector' -EventId 10000 -Category 0 -EntryType Information -Message &quot;Software Connector Succesfully Create Event Log Source&quot;&#xD;&#xA;  }&#xD;&#xA;  &#xD;&#xA;  Write-EventLog -LogName 'Operations Manager' -Source 'Software Connector' -EventId 10000 -Category 0 -EntryType Information -Message &quot;Software Connector Start Processing Software Objects&quot;&#xD;&#xA; }&#xD;&#xA; &#xD;&#xA; $ErrorID = 10101&#xD;&#xA; $InfoID = 10100&#xD;&#xA; $WarningId = 10102&#xD;&#xA; &#xD;&#xA; #Object Classes&#xD;&#xA; $SoftwareClass = Get-SCSMClass -Name System.SoftwareItem$&#xD;&#xA; $ITSMSoftwareClass = Get-SCSMClass -Name Software$&#xD;&#xA; $ITSMVersionClass = Get-SCSMClass -Name SoftwareVersion$&#xD;&#xA; $ITSMPublisherClass = Get-SCSMClass -Name SoftwarePublisher$&#xD;&#xA; $ITSMSoftwareAssetClass = Get-SCSMClass -Name SoftwareAsset$&#xD;&#xA; $ITSMHardwareAssetClass = Get-SCSMClass -Name HardwareAsset$&#xD;&#xA; #Relationship Classes&#xD;&#xA; $SoftwareRelCl = Get-SCSMRelationshipClass -Name System.DeviceHasSoftwareItemInstalled$&#xD;&#xA; $ITSMSoftHasPubRelCl = Get-SCSMRelationshipClass -Name Relationship.SoftwareHasPublisher$&#xD;&#xA; $ITSMSoftHasVersionRelCl = Get-SCSMRelationshipClass -Name Relationship.SoftwareHasVersion$&#xD;&#xA; $ITSMSoftAssetHasSoftRelCl = Get-SCSMRelationshipClass -Name Relationship.SoftwareAssetHasSoftware$&#xD;&#xA; $ITSMSoftIsForHardwareAssetRelCl = Get-SCSMRelationshipClass -Name Relationship.SoftwareIsInstalledOnHardwareAsset$&#xD;&#xA; $PendingDeleteEnumId = (Get-SCSMEnumeration -Name System.ConfigItem.ObjectStatusEnum.PendingDelete$).Id&#xD;&#xA; $InactiveId = (Get-SCSMEnumeration -Name ITSMConnectorStatus.Inactive$).id&#xD;&#xA; $ReadinessStatusEnumId = (Get-SCSMEnumeration -Name ReadinessStatus.InUse$).id&#xD;&#xA; $NotAvailableStatusEnumId = (Get-SCSMEnumeration -Name ReadinessStatus.NotAvailable$).id&#xD;&#xA; $ConfigItemRelCl = Get-SCSMRelationshipClass -Name System.ConfigItemRelatesToConfigItem$&#xD;&#xA; $VersionIsForAsset = Get-SCSMRelationshipClass -Name Relationship.SoftwareVersionInstalledOnAssets$&#xD;&#xA; $AssetStatusEnumDeployedId = (Get-SCSMEnumeration -Name System.ConfigItem.AssetStatusEnum.Deployed$).id&#xD;&#xA; $AssetStatusEnumUndefinedId = (Get-SCSMEnumeration -Name System.ConfigItem.AssetStatusEnum.Undefined$).id&#xD;&#xA; &#xD;&#xA; $SoftwareInstalled = Get-SCSMObject -Class $SoftwareClass -Filter &quot;ObjectStatus -ne $PendingDeleteEnumId&quot;&#xD;&#xA; if ($SoftwareInstalled)&#xD;&#xA; {&#xD;&#xA;   foreach ($iSoftware in $SoftwareInstalled)&#xD;&#xA;   {&#xD;&#xA;     $iSoftName = $null&#xD;&#xA;     $iSoftPublisher = $null&#xD;&#xA;     $iSoftVersion = $null&#xD;&#xA;     $iSoftwareProductCode = $null&#xD;&#xA;     $HashString = $null&#xD;&#xA;     $iSoftIsInstalled = $null&#xD;&#xA;     $iSoftInstalledCount = $null&#xD;&#xA;     $iSoftExists = $null&#xD;&#xA;     $NotAvailable = $false&#xD;&#xA;     $iSoftName = $iSoftware.DisplayName&#xD;&#xA;     $iSoftPublisher = $iSoftware.Publisher&#xD;&#xA;     $iSoftVersion = $iSoftware.VersionString&#xD;&#xA;     $iSoftwareProductCode = $iSoftware.ProductCode&#xD;&#xA;     $LastModified = $iSoftware.LastModified&#xD;&#xA;     $iCSoft= $iSoftName.Replace($iSoftVersion,&quot;&quot;)&#xD;&#xA;     &#xD;&#xA;     [string]$HashString = ($iCSoft + $iSoftPublisher + $iSoftwareProductCode)&#xD;&#xA;     $iSoftHash = Get-StringHash -String $HashString&#xD;&#xA;     &#xD;&#xA;     $iSoftExists = (Get-SCSMObject -Class $ITSMSoftwareClass -Filter &quot;ObjectHash -eq '$iSoftHash' and ObjectStatus -ne '$PendingDeleteEnumId'&quot;)&#xD;&#xA;     if (!$iSoftExists)&#xD;&#xA;     {&#xD;&#xA;      &#xD;&#xA;       $iSofthashtable = $null&#xD;&#xA;       $iSofthashtable = @{&#xD;&#xA;            &quot;DisplayName&quot; = $iCSoft;&#xD;&#xA;            &quot;SoftwareName&quot; = $iSoftName;&#xD;&#xA;            &quot;ProductCode&quot; = $iSoftwareProductCode;&#xD;&#xA;            &quot;LastDiscoveredDate&quot; = (Get-Date);&#xD;&#xA;            &quot;ObjectHash&quot; = $iSoftHash;&#xD;&#xA;            &quot;Installed&quot; = $iSoftInstalledCount;&#xD;&#xA;            &quot;LastModifiedSync&quot; = $LastModified;&#xD;&#xA;           }&#xD;&#xA;       #Create Soft Item&#xD;&#xA;       $SoftItem = $null&#xD;&#xA;       $SoftItem = New-SCSMObject -Class $ITSMSoftwareClass -PropertyHashtable $iSofthashtable -PassThru&#xD;&#xA;      if ($SoftItem)&#xD;&#xA;      {&#xD;&#xA;        try&#xD;&#xA;        {&#xD;&#xA;          if ($iSoftPublisher.Length -gt 0)&#xD;&#xA;          {&#xD;&#xA;            try&#xD;&#xA;            {&#xD;&#xA;             $PublisherExists = $null&#xD;&#xA;             $PublisherExists = Get-SCSMObject -Class $ITSMPublisherClass | ?{ $_.DisplayName -match $iSoftPublisher }&#xD;&#xA;            }&#xD;&#xA;            Finally&#xD;&#xA;            {&#xD;&#xA;              if ($PublisherExists)&#xD;&#xA;               {&#xD;&#xA;                New-SCSMRelationshipObject -Source $SoftItem -Target $PublisherExists -Relationship $ITSMSoftHasPubRelCl -Bulk&#xD;&#xA;               }&#xD;&#xA;              else&#xD;&#xA;               {    &#xD;&#xA;                $PubHashTable = @{&#xD;&#xA;                     &quot;DisplayName&quot; = $iSoftPublisher;&#xD;&#xA;                     &quot;PublisherName&quot; = $iSoftPublisher;&#xD;&#xA;                    }&#xD;&#xA;                &#xD;&#xA;                $Publisher = $null&#xD;&#xA;                $Publisher = New-SCSMObject -Class $ITSMPublisherClass -PropertyHashtable $PubHashTable -PassThru&#xD;&#xA;               if ($Publisher.PublisherName)&#xD;&#xA;                 {&#xD;&#xA;                  try&#xD;&#xA;                   {&#xD;&#xA;                    $Key = ($HardwareConnectorAdminSettingObj.Searchkey)&#xD;&#xA;                    $env:MS_BingSearch_API_key = &quot;$Key&quot;&#xD;&#xA;                    $Uri = 'https://api.cognitive.microsoft.com/bing/v5.0/search?q=' + $($Publisher.PublisherName)&#xD;&#xA;                    $Result = Invoke-RestMethod -Uri $Uri -Method 'GET' -ContentType 'application/json' -Headers @{'Ocp-Apim-Subscription-Key' = $env:MS_BingSearch_API_key }&#xD;&#xA;                    $Url = $Result.webPages.value[0].displayUrl&#xD;&#xA;                    $PubUrl = &quot;http://&quot; + $Url&#xD;&#xA;                   }&#xD;&#xA;                  finally&#xD;&#xA;                   {&#xD;&#xA;                    Set-SCSMObject -SMObject $Publisher -Property &quot;website&quot; -Value $PubUrl&#xD;&#xA;                   }&#xD;&#xA;                  &#xD;&#xA;                  New-SCSMRelationshipObject -Source $SoftItem -Target $Publisher -Relationship $ITSMSoftHasPubRelCl -Bulk&#xD;&#xA;                 }&#xD;&#xA;               }&#xD;&#xA;            }&#xD;&#xA;          }&#xD;&#xA;          if ($iSoftVersion.Length -gt 0)&#xD;&#xA;          {&#xD;&#xA;           $VersionHashStr = $null&#xD;&#xA;           $VersionHash = $null&#xD;&#xA;           $Version = $null&#xD;&#xA;           &#xD;&#xA;           $VersionHashStr = $iSoftHash + $iSoftVersion&#xD;&#xA;           $VersionHash = Get-StringHash -String $VersionHashStr&#xD;&#xA;           $Version = Get-SCSMObject -Class $ITSMVersionClass -Filter &quot;VersionHash -eq $VersionHash&quot;&#xD;&#xA;           if ($Version)&#xD;&#xA;           {&#xD;&#xA;            #Check Already Relationship&#xD;&#xA;            $VerForSoft = (Get-SCSMRelationshipObject -BySource $Version | ? { RelationshipId -eq $($ITSMSoftHasVersionRelCl.id) }).TargetObject&#xD;&#xA;            if ($VerForSoft.id -ne $SoftItem.id)&#xD;&#xA;            {&#xD;&#xA;             New-SCSMRelationshipObject -Source $Version -Target $SoftItem -Relationship $ITSMSoftHasVersionRelCl -Bulk&#xD;&#xA;            }&#xD;&#xA;            &#xD;&#xA;           }&#xD;&#xA;           else&#xD;&#xA;           {&#xD;&#xA;            &#xD;&#xA;            $VerHashTable = $null&#xD;&#xA;            $VerHashTable = @{&#xD;&#xA;             &quot;DisplayName&quot; = $iSoftVersion;&#xD;&#xA;             &quot;SoftwareVersionMaj&quot; = $iSoftVersion;&#xD;&#xA;             &quot;VersionHash&quot; = $VersionHash;&#xD;&#xA;            }&#xD;&#xA;            &#xD;&#xA;            $Version = $null&#xD;&#xA;            $Version = New-SCSMObject -Class $ITSMVersionClass -PropertyHashtable $VerHashTable -PassThru&#xD;&#xA;            New-SCSMRelationshipObject -Source $Version -Target $SoftItem -Relationship $ITSMSoftHasVersionRelCl -Bulk&#xD;&#xA;           }&#xD;&#xA;          }&#xD;&#xA;        &#xD;&#xA;          $SoftWareAsset = $null&#xD;&#xA;          $SoftWareAsset = Get-SCSMObject -Class $ITSMSoftwareAssetClass -Filter &quot;DisplayName -eq $SoftItem.DisplayName&quot; -ErrorAction SilentlyContinue&#xD;&#xA;           if (!$SoftWareAsset)&#xD;&#xA;           {&#xD;&#xA;            &#xD;&#xA;            $SoftAssTable = $null&#xD;&#xA;            $SoftAssTable = @{&#xD;&#xA;             &quot;DisplayName&quot; = $iSoftName;&#xD;&#xA;             &quot;AssetName&quot; = $iSoftName;&#xD;&#xA;             &quot;SerialNumber&quot; = $iSoftwareProductCode;&#xD;&#xA;             &quot;ReadinessStatus&quot; = $Ready;&#xD;&#xA;            }&#xD;&#xA;            &#xD;&#xA;            $SoftWareAsset = $null&#xD;&#xA;            $SoftWareAsset = New-SCSMObject -Class $ITSMSoftwareAssetClass -PropertyHashtable $SoftAssTable -PassThru&#xD;&#xA;            New-SCSMRelationshipObject -Source $SoftWareAsset -Target $SoftItem -Relationship $ITSMSoftAssetHasSoftRelCl -Bulk&#xD;&#xA;            &#xD;&#xA;           }&#xD;&#xA;        &#xD;&#xA;         $iSoftIsInstall = $null&#xD;&#xA;          $iSoftIsInstall = Get-SCSMRelationshipObject -ByTarget $iSoftware | ? { $_.RelationShipId -eq $SoftwareRelCl.id }&#xD;&#xA;           if ($iSoftIsInstall)&#xD;&#xA;            {&#xD;&#xA;              $Count = $iSoftIsInstall.Count&#xD;&#xA;              Set-SCSMObject -SMObject $Version -Property &quot;Installed&quot; -Value $Count&#xD;&#xA;              $FinalCount = $SoftItem.Installed + $Count&#xD;&#xA;              Set-SCSMObject -SMObject $SoftItem -Property &quot;Installed&quot; -Value $FinalCount&#xD;&#xA;              if ($FinalCount -gt 0)&#xD;&#xA;              {&#xD;&#xA;               Set-SCSMObject -SMObject $SoftWareAsset -Property &quot;ReadinessStatus&quot; -Value $ReadinessStatusEnumId&#xD;&#xA;               Set-SCSMObject -SMObject $SoftWareAsset -Property &quot;AssetStatus&quot; -Value $AssetStatusEnumDeployedId&#xD;&#xA;              }&#xD;&#xA;              else&#xD;&#xA;              {&#xD;&#xA;               Set-SCSMObject -SMObject $SoftWareAsset -Property &quot;ReadinessStatus&quot; -Value $NotAvailableStatusEnumId&#xD;&#xA;               Set-SCSMObject -SMObject $SoftWareAsset -Property &quot;AssetStatus&quot; -Value $AssetStatusEnumUndefinedId&#xD;&#xA;              }&#xD;&#xA;             &#xD;&#xA;              foreach ($Computer in $iSoftIsInstall)&#xD;&#xA;              {&#xD;&#xA;                $HardwareAsset = $null&#xD;&#xA;                $HardwareAssetPr = $null&#xD;&#xA;                $HardwareAssetPr = $Computer.SourceObject&#xD;&#xA;                $HardwareAsset = Get-SCSMObject -Class $ITSMHardwareAssetClass -Filter &quot;DisplayName -eq $($HardwareAssetPr.Name)&quot;&#xD;&#xA;                 if ($HardwareAsset)&#xD;&#xA;                 {&#xD;&#xA;                  New-SCSMRelationshipObject -Source $Version -Target $HardwareAsset -Relationship $VersionIsForAsset -Bulk&#xD;&#xA;                  New-SCSMRelationshipObject -Source $SoftItem -Target $HardwareAsset -Relationship $ITSMSoftIsForHardwareAssetRelCl -Bulk&#xD;&#xA;                 }&#xD;&#xA;              &#xD;&#xA;               }&#xD;&#xA;            }&#xD;&#xA;        &#xD;&#xA;         New-SCSMRelationshipObject -Relationship $ConfigItemRelCl -Source $SoftItem -Target $iSoftware -Bulk&#xD;&#xA;        }&#xD;&#xA;        catch&#xD;&#xA;        {&#xD;&#xA;         Write-EventLog -LogName 'Operations Manager' -Source 'Software Connector' -EventId $WarningId -Category 0 -EntryType Warning -Message &quot;Something Wrong Happened with Software Connector while Processing New Software: $($SoftItem.DisplayName) with Exception Message: $($_.Exception.Message) and Exception: $($_.Exception.InnerException)&quot;&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;     }&#xD;&#xA;     else&#xD;&#xA;     {&#xD;&#xA;      #Process Changes&#xD;&#xA;        try&#xD;&#xA;        {&#xD;&#xA;      $ObjLast =$null    &#xD;&#xA;        $ObjLast = Get-Date -Date $($iSoftExists.LastModifiedSync) -Format &quot;yyyy-MM-dd hh:mm&quot;&#xD;&#xA;          $SoftObjs = Get-SCSMObject -Class $SoftwareClass -Filter &quot;DisplayName -eq $($iSoftware.DisplayName)&quot;&#xD;&#xA;         }   &#xD;&#xA;        finally&#xD;&#xA;        {&#xD;&#xA;          $ObjHistory = $null&#xD;&#xA;          $emg = $null&#xD;&#xA;          &#xD;&#xA;          $emg = New-Object Microsoft.EnterpriseManagement.EnterpriseManagementGroup &quot;localhost&quot;&#xD;&#xA;          $ObjHistory = $emg.EntityObjects.GetObjectHistoryTransactions($iSoftware) &#xD;&#xA;          foreach ($ObjHist in $ObjHistory)&#xD;&#xA;          {&#xD;&#xA;        if((Get-Date -Date $ObjHist.DateOccurred.Date -Format &quot;yyyy-MM-dd hh:mm&quot;) -gt $ObjLast )&#xD;&#xA;     {&#xD;&#xA;            try&#xD;&#xA;            {&#xD;&#xA;             $PropertyChanges = $null&#xD;&#xA;             $RelationshipChanges = $null&#xD;&#xA;             &#xD;&#xA;             $PropertyChanges = $ObjHist.ObjectHistory.Values.ClassHistory.PropertyChanges&#xD;&#xA;             $RelationshipChanges = $ObjHist.ObjectHistory.Values.RelationshipHistory&#xD;&#xA;            }&#xD;&#xA;            Catch&#xD;&#xA;            {&#xD;&#xA;             $PropertyChanges = $null&#xD;&#xA;             $RelationshipChanges = $null&#xD;&#xA;            }&#xD;&#xA;            Finally&#xD;&#xA;            {&#xD;&#xA;        if($PropertyChanges -or $RelationshipChanges)&#xD;&#xA;        {&#xD;&#xA;               if ($PropertyChanges)&#xD;&#xA;               {&#xD;&#xA;                if ($PropertyChanges.Count -gt 1)&#xD;&#xA;                {&#xD;&#xA;                 foreach ($PropertyChange in $PropertyChanges.Values.Second)&#xD;&#xA;                 {&#xD;&#xA;                  $Propery = $null&#xD;&#xA;                  $Value = $null&#xD;&#xA;                  $ChangeType = $null&#xD;&#xA;                  &#xD;&#xA;                  $Propery = $PropertyChange.Type.Name&#xD;&#xA;                  $Value = $PropertyChange.Value&#xD;&#xA;                  $ChangeType = $ObjHist.ObjectHistory.Values.ClassHistory.ChangeType&#xD;&#xA;                  &#xD;&#xA;                  if ($ChangeType -eq &quot;Insert&quot;)&#xD;&#xA;                  {&#xD;&#xA;                   try&#xD;&#xA;                   {&#xD;&#xA;                    Set-SCSMObject -SMObject $iSoftExists -Property $Propery -Value $Value&#xD;&#xA;                   }&#xD;&#xA;                   catch&#xD;&#xA;                   {&#xD;&#xA;                    Write-EventLog -LogName 'Operations Manager' -Source 'Software Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Software Connector Cannot Update Object: $iSoftExists For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;                   }&#xD;&#xA;                  }&#xD;&#xA;                  elseIf ($ChangeType -eq &quot;Modify&quot;)&#xD;&#xA;                  {&#xD;&#xA;                   try&#xD;&#xA;                   {&#xD;&#xA;                    Set-SCSMObject -SMObject $iSoftExists -Property $Propery -Value $Value&#xD;&#xA;                   }&#xD;&#xA;                   catch&#xD;&#xA;                   {&#xD;&#xA;                    Write-EventLog -LogName 'Operations Manager' -Source 'Software Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Software Connector Cannot Update Object: $iSoftExists For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;                   }&#xD;&#xA;                  }&#xD;&#xA;                  elseif ($ChangeType -eq &quot;Delete&quot;)&#xD;&#xA;                  {&#xD;&#xA;                   try&#xD;&#xA;                   {&#xD;&#xA;                    Set-SCSMObject -SMObject $iSoftExists -Property $Propery -Value &quot; &quot;&#xD;&#xA;                   }&#xD;&#xA;                   catch&#xD;&#xA;                   {&#xD;&#xA;                    Write-EventLog -LogName 'Operations Manager' -Source 'Software Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Software Connector Cannot Update Object: $iSoftExists For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;                   }&#xD;&#xA;                  }&#xD;&#xA;                 }&#xD;&#xA;                }&#xD;&#xA;                else&#xD;&#xA;                {&#xD;&#xA;                 $Propery = $null&#xD;&#xA;                 $Value = $null&#xD;&#xA;                 $ChangeType = $null&#xD;&#xA;                  try {&#xD;&#xA;                  $Propery = $ObjHist.ObjectHistory.Values.ClassHistory.PropertyChanges.Key&#xD;&#xA;                  $Value = $ObjHist.ObjectHistory.Values.ClassHistory.PropertyChanges.Value&#xD;&#xA;                  $ChangeType = $ObjHist.ObjectHistory.Values.ClassHistory.PropertyChanges.ChangeType&#xD;&#xA;                  }&#xD;&#xA;         finally{&#xD;&#xA;            if($ChangeType)&#xD;&#xA;              {&#xD;&#xA;                 if ($ChangeType -eq &quot;Insert&quot;)&#xD;&#xA;                       {&#xD;&#xA;                         try&#xD;&#xA;                         {&#xD;&#xA;                          Set-SCSMObject -SMObject $iSoftExists -Property $Propery -Value $Value&#xD;&#xA;                         }&#xD;&#xA;                         catch&#xD;&#xA;                         {&#xD;&#xA;                          Write-EventLog -LogName 'Operations Manager' -Source 'Software Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Software Connector Cannot Update Object: $iSoftExists For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;                         }&#xD;&#xA;                       }&#xD;&#xA;                       elseIf ($ChangeType -eq &quot;Modify&quot;)&#xD;&#xA;                       {&#xD;&#xA;                         try&#xD;&#xA;                         {&#xD;&#xA;                          Set-SCSMObject -SMObject $iSoftExists -Property $Propery -Value $Value&#xD;&#xA;                         }&#xD;&#xA;                         catch&#xD;&#xA;                         {&#xD;&#xA;                          Write-EventLog -LogName 'Operations Manager' -Source 'Software Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Software Connector Cannot Update Object: $iSoftExists For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;                         }&#xD;&#xA;                       }&#xD;&#xA;                       elseif ($ChangeType -eq &quot;Delete&quot;)&#xD;&#xA;                       {&#xD;&#xA;                         try&#xD;&#xA;                         {&#xD;&#xA;                          Set-SCSMObject -SMObject $iSoftExists -Property $Propery -Value &quot;&quot;&#xD;&#xA;                         }&#xD;&#xA;                         catch&#xD;&#xA;                         {&#xD;&#xA;                          Write-EventLog -LogName 'Operations Manager' -Source 'Software Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Software Connector Cannot Update Object: $iSoftExists For Property $Propery with Value: $Value and Method: $ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;                         }&#xD;&#xA;                       }&#xD;&#xA;                      }&#xD;&#xA;               }&#xD;&#xA;                }&#xD;&#xA;                &#xD;&#xA;                &#xD;&#xA;               }&#xD;&#xA;               elseif ($RelationshipChanges)&#xD;&#xA;               {&#xD;&#xA;                $SourceObj = $null&#xD;&#xA;                $TargetObj = $null&#xD;&#xA;                $RelationshipClassObj = $null&#xD;&#xA;                $RChangeType = $null&#xD;&#xA;                &#xD;&#xA;                $SourceObj = $ObjHist.ObjectHistory.Values.RelationshipHistory.SourceObjectId&#xD;&#xA;                $TargetObj = $ObjHist.ObjectHistory.Values.RelationshipHistory.TargetObjectId&#xD;&#xA;                $RelationshipClassObj = $ObjHist.ObjectHistory.Values.RelationshipHistory.ManagementPackRelationshipTypeId&#xD;&#xA;                $RChangeType = $ObjHist.ObjectHistory.Values.RelationshipHistory.ChangeType&#xD;&#xA;                &#xD;&#xA;                $Src = $null&#xD;&#xA;                $Tar = $null&#xD;&#xA;                $Rel = $null&#xD;&#xA;                &#xD;&#xA;         try{&#xD;&#xA;                  $Srcs = Get-SCSMObject -Id $SourceObj&#xD;&#xA;            $Srcn= (Get-SCSMRelationshipObject -ByTarget $Srcs | ? {$_.SourceObject.ManagementPackClassIds -eq &quot;2e3768dc-30bb-acd6-6877-077e3806efdf&quot;}).SourceObject&#xD;&#xA;            $Src= (Get-SCSMRelationshipObject -ByTarget $Srcn | ? {$_.RelationshipID -eq &quot;22dc3c89-1634-c792-3373-637ddc3cbaa9&quot;}).SourceObject&#xD;&#xA;                  $Tars = Get-SCSMObject -Id $TargetObj&#xD;&#xA;            $Tar= (Get-SCSMRelationshipObject -ByTarget $Tars | ? {$_.SourceObject.ManagementPackClassIds -eq &quot;bde5f9f4-f8f5-92f3-c37c-03c61f412718&quot;}).SourceObject&#xD;&#xA;                  $Rel = Get-SCSMRelationshipClass -Name Relationship.SoftwareIsInstalledOnHardwareAsset$&#xD;&#xA;            }&#xD;&#xA;         catch{}&#xD;&#xA;         finally&#xD;&#xA;               {&#xD;&#xA;           if($Src -and $Tar -and $Rel)&#xD;&#xA;            {&#xD;&#xA;                  if ($RChangeType -eq &quot;Insert&quot;)&#xD;&#xA;                  {&#xD;&#xA;                   try&#xD;&#xA;                   {&#xD;&#xA;             $alreayinserted = $null&#xD;&#xA;             $alreayinserted= Get-SCSMRelationshipObject -ByTarget $Src | ? {$_.SourceObject -eq $Tar}&#xD;&#xA;              if(!$alreayinserted)&#xD;&#xA;               {&#xD;&#xA;                     New-SCSMRelationshipObject -Source $Tar -Target $Src -Relationship $Rel -Bulk&#xD;&#xA;            $iTar= Get-SCSMObject -Id $Tar.Id&#xD;&#xA;            Set-SCSMObject -SMObject $Tar -Property &quot;Installed&quot; -Value ($($iTar.Installed) + 1)&#xD;&#xA;            Set-SCSMObject -SMObject $Tar -Property &quot;LastDiscoveredDate&quot; -Value (Get-Date)&#xD;&#xA;            $SftVrs= (Get-SCSMRelationshipObject -ByTarget $Tar | ? {$_.RelationshipId -eq &quot;8c4fc188-a99a-d7cb-deba-ef0a3199d637&quot;}).SourceObject&#xD;&#xA;            if ($SftVrs)&#xD;&#xA;             {&#xD;&#xA;             $iSftVrs= Get-SCSMObject -Id $SftVrs.id&#xD;&#xA;             New-SCSMRelationshipObject -Source $iSftVrs -Target $Src -Relationship $VersionIsForAsset -Bulk&#xD;&#xA;             Set-SCSMObject -SMObject $SftVrs -Property &quot;Installed&quot; -Value ($iSftVrs.Installed + 1)&#xD;&#xA;             }&#xD;&#xA;            }&#xD;&#xA;                   }&#xD;&#xA;                   catch&#xD;&#xA;                   {&#xD;&#xA;                    Write-EventLog -LogName 'Operations Manager' -Source 'Software Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Software Connector Cannot Update Object Relationships:$iSoftExists For Relationship:$Rel with Source:$Src and Target:$Tar for Change Type:$ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;                   }&#xD;&#xA;                  }&#xD;&#xA;                  elseIf ($RChangeType -eq &quot;Modify&quot;)&#xD;&#xA;                  {&#xD;&#xA;                   try&#xD;&#xA;                   {&#xD;&#xA;                    New-SCSMRelationshipObject -Source $Tar -Target $Src -Relationship $Rel -Bulk&#xD;&#xA;                   }&#xD;&#xA;                   catch&#xD;&#xA;                   {&#xD;&#xA;                    Write-EventLog -LogName 'Operations Manager' -Source 'Software Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Software Connector Cannot Update Object Relationships:$iSoftExists For Relationship:$Rel with Source:$Src and Target:$Tar for Change Type:$ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;                   }&#xD;&#xA;                  }&#xD;&#xA;                  elseif ($RChangeType -eq &quot;Delete&quot;)&#xD;&#xA;                  {&#xD;&#xA;                   try&#xD;&#xA;                   {&#xD;&#xA;                    Get-SCSMRelationshipObject -BySource $Tar | ? {$_.TargetObject -eq $Src } | Remove-SCSMRelationshipObject&#xD;&#xA;           $iTar= Get-SCSMObject -Id $Tar.Id&#xD;&#xA;           Set-SCSMObject -SMObject $Tar -Property &quot;Installed&quot; -Value ($($iTar.Installed) - 1)&#xD;&#xA;           Set-SCSMObject -SMObject $Tar -Property &quot;LastDiscoveredDate&quot; -Value (Get-Date)&#xD;&#xA;           &#xD;&#xA;           $SftVrs= (Get-SCSMRelationshipObject -ByTarget $Tar | ? {$_.RelationshipId -eq &quot;8c4fc188-a99a-d7cb-deba-ef0a3199d637&quot;}).SourceObject&#xD;&#xA;           if ($SftVrs)&#xD;&#xA;             {&#xD;&#xA;             $iSftVrs= Get-SCSMObject -Id $SftVrs.id&#xD;&#xA;             Get-SCSMRelationshipObject -bySource $iSftVrs | ?{$_.TargetObject -eq $Src} | Remove-SCSMRelationshipObject&#xD;&#xA;             Set-SCSMObject -SMObject $SftVrs -Property &quot;Installed&quot; -Value ($iSftVrs.Installed - 1)&#xD;&#xA;             }&#xD;&#xA;           &#xD;&#xA;                   }&#xD;&#xA;                   catch&#xD;&#xA;                   {&#xD;&#xA;                    &#xD;&#xA;                    Write-EventLog -LogName 'Operations Manager' -Source 'Software Connector' -EventId $ErrorID -Category 0 -EntryType Error -Message &quot;Software Connector Cannot Update Object Relationships:$iSoftExists For Relationship:$Rel with Source:$Src and Target:$Tar for Change Type:$ChangeType with Error: $($_.Exception.Message)&quot;&#xD;&#xA;                    &#xD;&#xA;                   }&#xD;&#xA;                  }&#xD;&#xA;                  }&#xD;&#xA;         }&#xD;&#xA;               }&#xD;&#xA;              }&#xD;&#xA;      }&#xD;&#xA;        }&#xD;&#xA;       }&#xD;&#xA;          Set-SCSMObject -SMObject $iSoftExists -Property &quot;LastModifiedSync&quot; -Value $LastModified&#xD;&#xA;        }&#xD;&#xA;       &#xD;&#xA;     #Process Version&#xD;&#xA;     if ($iSoftVersion.Length -gt 0)&#xD;&#xA;        {&#xD;&#xA;           $VersionHashStr = $null&#xD;&#xA;           $VersionHash = $null&#xD;&#xA;           $Version = $null&#xD;&#xA;           &#xD;&#xA;           $VersionHashStr = $iSoftHash + $iSoftVersion&#xD;&#xA;           $VersionHash = Get-StringHash -String $VersionHashStr&#xD;&#xA;           $Version = Get-SCSMObject -Class $ITSMVersionClass -Filter &quot;VersionHash -eq $VersionHash&quot;&#xD;&#xA;           if (!$Version)&#xD;&#xA;            {&#xD;&#xA;                    &#xD;&#xA;              $VerHashTable = $null&#xD;&#xA;              $VerHashTable = @{&#xD;&#xA;                   &quot;DisplayName&quot; = $iSoftVersion;&#xD;&#xA;                   &quot;SoftwareVersionMaj&quot; = $iSoftVersion;&#xD;&#xA;                   &quot;VersionHash&quot; = $VersionHash;&#xD;&#xA;                  }&#xD;&#xA;              &#xD;&#xA;              $Version = $null&#xD;&#xA;              $Version = New-SCSMObject -Class $ITSMVersionClass -PropertyHashtable $VerHashTable -PassThru&#xD;&#xA;              New-SCSMRelationshipObject -Source $Version -Target $iSoftExists -Relationship $ITSMSoftHasVersionRelCl -Bulk&#xD;&#xA;        New-SCSMRelationshipObject -Source $iSoftExists -Target $iSoftware -Relationship $ConfigItemRelCl -Bulk&#xD;&#xA;        $iMSoftIsInstall = Get-SCSMRelationshipObject -ByTarget $iSoftware  | ? { ($_.RelationShipId -eq $SoftwareRelCl.id )}&#xD;&#xA;        $iCount = (measure-object -InputObject $iMSoftIsInstall).Count&#xD;&#xA;              Set-SCSMObject -SMObject $Version -Property &quot;Installed&quot; -Value $iCount&#xD;&#xA;              $FinalCount = $iSoftExists.Installed + $Count&#xD;&#xA;              Set-SCSMObject -SMObject $iSoftExists -Property &quot;Installed&quot; -Value $FinalCount&#xD;&#xA;        foreach($Objs in $iMSoftIsInstall.SourceObject)&#xD;&#xA;        {&#xD;&#xA;        $HW= (Get-SCSMRelationshipObject -ByTarget $Objs | ? {$_.RelationshipId -eq &quot;4448664f-b657-407a-cdbe-b7433af0ccdb&quot;}).SourceObject&#xD;&#xA;        $ASST= (Get-SCSMRelationshipObject -ByTarget $HW | ? {$_.RelationshipId -eq &quot;22dc3c89-1634-c792-3373-637ddc3cbaa9&quot;}).SourceObject&#xD;&#xA;        New-SCSMRelationshipObject -Source $Version -Target $ASST -Relationship $VersionIsForAsset -Bulk&#xD;&#xA;        New-SCSMRelationshipObject -Source $iSoftExists -Target $ASST -Relationship $ITSMSoftIsForHardwareAssetRelCl -Bulk&#xD;&#xA;        }&#xD;&#xA;      &#xD;&#xA;            }&#xD;&#xA;         }&#xD;&#xA;     }&#xD;&#xA;     &#xD;&#xA;   }&#xD;&#xA;   &#xD;&#xA; }&#xD;&#xA; &#xD;&#xA; &#xD;&#xA; $Publs = Get-SCSMObject -Class $ITSMPublisherClass&#xD;&#xA;  foreach ($Pub in $Publs)&#xD;&#xA;  {&#xD;&#xA;    Set-SCSMObject -SMObject $Pub -Property &quot;SoftwareCount&quot; -Value &quot;0&quot;&#xD;&#xA;    $SoftCount = $null&#xD;&#xA;    $SoftCount = (Get-SCSMRelationshipObject -bytarget $Pub | ? {$_.RelationshipId -eq $($ITSMSoftHasPubRelCl.Id)}).Count&#xD;&#xA;    Set-SCSMObject -SMObject $Pub -property &quot;SoftwareCount&quot; -Value $SoftCount&#xD;&#xA;  }&#xD;&#xA; &#xD;&#xA; Set-SCSMObject -SMObject $Connector -Property &quot;Status&quot; -Value $InactiveId&#xD;&#xA; Set-SCSMObject -SMObject $Connector -Property &quot;LastSynced&quot; -Value (Get-Date)&#xD;&#xA; Set-SCSMObject -SMObject $Connector -Property &quot;SyncNow&quot; -Value $false&#xD;&#xA; Write-EventLog -LogName 'Operations Manager' -Source 'Software Connector' -EventId 10000 -Category 0 -EntryType Information -Message &quot;Software Connector Finished Processing Software Objects&quot;&#xD;&#xA;}&#xD;&#xA;" TaskID="ITSMSoftwareSyncNow.WindowsPowerShellScript.99f14fb3_e0d7_412d_b7ca_d9512d4b3cec" SnapIns="{x:Null}" ScriptName="{x:Null}" PropertyToBind="{x:Null}" Parameter="{x:Null}">
		<ns0:WindowsPowerShellScript.Parameters>
			<x:Array Type="{x:Type p7:ActivityParameter}" xmlns:p7="clr-namespace:Microsoft.ServiceManager.WorkflowAuthoring.Common;Assembly=Microsoft.ServiceManager.WorkflowAuthoring.Common, Version=7.0.5000.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" />
		</ns0:WindowsPowerShellScript.Parameters>
	</ns0:WindowsPowerShellScript>
</SequentialWorkflowActivity>